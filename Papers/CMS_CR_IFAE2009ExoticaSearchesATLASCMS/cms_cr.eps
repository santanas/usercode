%!PS-Adobe-3.1 EPSF-3.0%%Title: cms_cr.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: CMS%%CreationDate: 10/12/07%%BoundingBox: 0 0 446 91%%HiResBoundingBox: 0 0 445.9996 90.6998%%CropBox: 0 0 445.9996 90.6998%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: cms_cr.eps 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2007-04-19T15:06:22Z</xap:CreateDate>
  <xap:ModifyDate>2007-10-12T13:54:16Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>52</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgANAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9AxwfllIVEceiuXpwCi0&#xA;Na9KUxVEfonyB/yxaV/yKtv6Yq79E+QP+WLSv+RVt/TFXfonyB/yxaV/yKtv6Yq5dH8hMyqtlpRZ&#xA;iFVRFbklmNABt1JxVFf4T8q/9Wax/wCkaH/mnFVs3lnyhDE0s2k6fHEgq8j28CqAO5JWgxVD22k+&#xA;QLpwltZaVO7V4rHFbOTxoTQKD0qMVRR8p+VQKnRrEAdT9Wh/5pxVStvLvky6iEttpmnTxHYSRwQO&#xA;tfmqkYqq/wCE/Kv/AFZrH/pGh/5pxV3+E/Kv/Vmsf+kaH/mnFVsnlfyjFG0sukaekaAs7tbwhVUC&#xA;pJJXYDFVI6D5HHoV07TB9a3tv3Nv+9FAf3e3xbHtiqv/AIT8q/8AVmsf+kaH/mnFVsvljyhDG0su&#xA;k6fHEgLO728KqoHUklaAYqsby95LW3Ny2maatsByM5ggCU8eXGlMVVf8J+Vf+rNY/wDSND/zTirT&#xA;eVvKSlVbSLBS54oDbwgsaFqD4dzQE4qh5dH8hQxtLNZaVHGkhhZ3it1USAVKEkfa9uuKq0PlnyfP&#xA;Es0GlafLE4qkiW8DKR4ghaHFV/8AhPyr/wBWax/6Rof+acVaHlbykXZBpFgXSnJRbw1FelRx74q3&#xA;/hPyr/1ZrH/pGh/5pxV3+E/Kv/Vmsf8ApGh/5pxV3+E/Kv8A1ZrH/pGh/wCacVd/hPyr/wBWax/6&#xA;Rof+acVS2aH8sYZXhmTRI5Y2KSRuLRWVlNCrA7gg4qs/5BZ/2o/+nPFXf8gs/wC1H/054q7/AJBZ&#xA;/wBqP/pzxVon8qlBJOhADck/U6AYqoWGu3Jj8v8Alqwto57q50qK9u5rg/uYbZFSLdB8UjyO1FXY&#xA;UBJPYqrtQ1htE1TRrG+hjtBqs0tubqxdhFEw4iB3idfT/fM/p/EDRioBPZVAa7+Zd1pU3mC2gsf0&#xA;i+i2sM6XCkxxvJJK0UgcKJW4QUUyMimm/wAO2Ksq8satLqulJfPPZXUcrEwXWnSma3ki2KsGI2Pi&#xA;N6eOKrm1Ky1HTY7qyk9a2a5hWOZQeD8bhFLISPiWo2YbHqNsVTTFVG8tLe7tnt7iFLiF6coZQCjF&#xA;SGHIEHao8MVeGXH5LefYtC8u/oe4s9O8w6OurCa/huJo2Y3t0J7akiRBmCqXVlYU7bg4qytfy888&#xA;3fkvXtG1fXmutT1G9FzbTyTNJbmGK5Eq25QRI8MU0SCOSMM4FTTbYqq2u+T/AD7d3dpfaDcWnlqS&#xA;W7Fzq9vayySLMym2VZpG9KISlYLeSL0ioU8gSa9FXnmt+Qfz/wBJ8uXd4nmC5vp7e1Y/V7O/vbi5&#xA;klNpPEfSQoCW9doHHhxJHeqrIZfIf56ySwSWPmaOyh5XUiLNd3U7wpcG69GJlkhPreiJoWrJvVeO&#xA;wAJVT3R/IHm621O+v725W6+veXRphhnvri6ZL31p5XIeWMVib1lAalVApQ9Sqx0fkx53tZdNXTtR&#xA;gji0kaxDo7+vMj2NvqVnIlusZEZYtDcXB+IEfAiU3FMVRFp+X354r6TTeakWs0krxC5uJOCsLb4e&#xA;bRrzDLDMoXonPku/RVF6N+XX5kP5H1TQvMerfpC7updMltLgX9w0sRtY7c3Lx3EkTsjm4gaWMFWW&#xA;p3ABOKpLqX5Qfm5d+Xb7RpPMFnLaXWnT2v1QF4YDJKGorRRxCMH1G9VplUMTVQoXFUTqX5a/nY+l&#xA;+jaea3OoevqErzm+nhiIliZLL044oF9NUYIzRFmVTXjsSMVdrX5XfnJqF2twfNFu8lveS3VlJI0h&#xA;9F3iv0jnjT0yqGNbu3T012/dk1qd1VaH8pvOsfk6bTGntn1OfzNaa+ZjdSyssVv6Bes00Ll5ibc0&#xA;LKQa74qs80+UPzRsdIuL/SbmSIWui6hatpthe3bPJdlJjaXcEMaIrXLMy+p2ZmLDdFJVUU/Lv87b&#xA;u0mm/wAVTWyT2V6dPsxe3Cvb3NxGwgE8kkDySqC/LqrRMBxqBiq3Xfyn/NY6rfXeg679V+uW0CNO&#xA;1/dJO80On3MIMsioWdUu543WpPwr9GKqsn5b/nhKl6G82PGht9SXTY4r6ZSk9x6n1VpnaB2dFEg6&#xA;MGjKgqT0xVOvIfkH8wdK86JrfmHUk1G0S2vrOJWvLiaSOOe6jng2kSj0VSp5NttuaAYq9TxV2KpR&#xA;5cdE0ud3YKi3uolmJoABfTVJOKpNb+aPMnmMet5UtLeHRj/c67qfqFLgfz2tpGY5JIvCR5Iw3VOS&#xA;nlirFvNPnL8w9Ike3sPM/lLUdQg3utNazuYLlVBoQqfpKVef8okZAf5hiqZ+UfMPnPzZpSalo3mr&#xA;QpUPwz276JdrPBIDRop4/wBLko6kfI9QSKHFW/M58/xadf6fd+Y9Fklm068uTax6LeJI9vAqpMVk&#xA;OpyIhrMoBYHrWhocVR2kadZXP+G9csNVhttRh0yOykjbjNHcQSrG4RkDxtySRKowPcihriqY6x5L&#xA;Gti8XVbsTR3dk9kqxRmIxF5BKssbc2YMjIhG/UVriqk3lFtOlTUbLVRZSWmnGzkuZ4lkDETrcyXE&#xA;xZkB5Ufl0+0TUYqkegeW5Ws9RDTOfLWpXsl/fvHGtp9a9SilYoVBaO04IgYl+Uwqdlr6qrNrqS0+&#xA;qiC2aPja3FtC8UZWkREkTBCq/Z+BlNPAjFUxxV5P+Zn59x+VPM0flTy/5cvPN3mX0hcXen2JcGGJ&#xA;hyXkY4rhy3EhqBKAEb74qn35U/mzo/5haReXMFrLpeqaXL6Gr6Vdf3lvIalSTRaq3FgCVBqpqNsV&#xA;ZNpHmryvrU08Gj6xZalPaml1FZ3MU7xGtKSLGzFdx3xVCnz75FAQnzHpYD3LWKE3tv8AFdJx5W4+&#xA;PeVea1T7W423xVhX5n/n5onkjzRo3lmG0XV9V1OeOK8iS5SL6nHKyKjygLK3JhIGVCoqu9cVZ9ce&#xA;a/K1trMWh3Gs2MOtTU9HS5LmFbp+QJXjAWEhrTagxV155s8q2N1NaXus2Nrd2wja4t5rmGOSNZmC&#xA;xF0Zgyh2IC16npirrvzX5Xs9Wh0e71ixt9XuKfV9OluYUuZOX2eELMHavagxV2oea/K+m3UtpqOs&#xA;WNldw25vJre4uYYpEtg3EzsjsGEfLbmdq4qibbWdHutMXVrW+t59LZDKt/FKj25jWtXEqkpxFDU1&#xA;xVR0TzJ5d16B7jQ9Us9VgibhJLZTxXCK3WjNEzAHFVmk+a/K2sXVxZ6RrNjqN3af7129pcwzyRUP&#xA;H94kbMyfEKb4qx384fzL/wCVc+Tz5j/Rv6UpcRW31X1vq/8Ae8vi5+nN049OOKvP9H/5yb1dfMWl&#xA;6X5y/L/U/Kdlq062ttqV20pX1nIVRwmtrWq1YcirEqN6Yq9i1PzX5X0q+t9P1PWLGwv7un1W0ubm&#xA;GGaWp4j043ZWbfbYYqv1HzJ5d024+rajqlnZXHovdejcTxRP6Ef25uLsp9Nf2m6DFVbT9Y0nUtPT&#xA;UdOvbe809wWS8t5UlhZV6kSISpAp44qh9G80+WdcaZdF1ey1RrY8bhbO4iuDGfB/TZuP04ql9/8A&#xA;mR5CstOmv5fMGnNBCszfBeW5Lm3oJESsgBZWZVIrsSAeuKrfy9/MPy5598uQ67oUp9CQss1pK0X1&#xA;mBlYrxnjieURswXkoLbqQcVZNiry7z7q1vY+SYbW8WVtN1PXL621NIRV5LWKe8vJbcCq/wC9K2v1&#xA;fcj7fUdcVRXmzXdduNQ0XyrJYvpUeqLNcXX1e6VTJZ2pgje3jnjXnCzPeRhiqj4QwVxUNiqB8m/m&#xA;15WXy9Zz6foTad5eDWqPPYiOS2tRdWb3besEEbhrdEX6xxRgvINyIDEKobXNN0LWPO2ieY9PkbSt&#xA;T119R0SLVrYr6v1rS3la1nBHwyIyWsytG9VkVlU/ZXFUbaa5c66vmea/iWDU9I0FrHUIEqUS7aW8&#xA;W44VJ+BxaxyJXfgy4qy7ybf2Enk7Qo5G4rJp9qgEysivWBBReYAate2Kq+pahaaVMltYh5tRkX1I&#xA;tHtwGMiA05cWKpAtaj1GZVr1qaDFUsuLiymmjl803kPqg8rby5AWlAdG2ZolX1ruRSKiicBsVWo5&#xA;4qmM02vaopEIbRNNoTJdyhTeOo3/AHUZ5Rwgj9qWrDp6an4gqo6SdNTRIYNNUixE1tPaMwbk8M9w&#xA;rrIxf42LNy+Jvib7R3OKskxV4d+TAt/+V3/m0bsL+lfrdr6Fft/Vf3v2fanp1+jFUH+efnLybF5E&#xA;8+w+T/q8XmWOaz07zXe21q0MqrczemRNcemizEorp9tqVPTFUr1v8svKn5XfmF+WWo+TfVt7rU78&#xA;aVqSmZ5RdwSoqyTMrswH2qkJRelAKYq88j/Lbyzq/wCVX5n+cL+OWXWNK128i0yQSyKkPpyQu5EQ&#xA;PpsZfW4sWB2ApTFWVp5P8t67+aH5R3+q2RurnX/LkOo6u/qzBp7mz05Xgf4XXiVMa7LQH9qu+KsH&#xA;8u+QfNvn3yffeYbbyHNrXmLWLu4uYfOK67BatFOJj8IsZCoojLSjbnqpApir0fRPIcPnD8+3t/PU&#xA;Ekt5pvlvS76/sVnZFOpJFCjF3gYB/Td3pxahPiOqrz7SfInmb8wNE8wa7H5Bn1/XdVv7toPNP6cg&#xA;szbTK/wxixkIUrGaVDdR9krsQqzmXyI3nD87fK+h/mDBJLcxeTLaTW7NZyvrXMMzqwkltnFR6p5n&#xA;g9KjFWG6U0sP5VXnkwXEseg3f5hQ6NcOXPJLJ15MpYeLQq3Sla4q9A/NbyF+X35X+UvNuoeSL+TS&#xA;dfvtJhtJvL6XolBs7m+ihku/RmMl10ZkEgfiK0p1xVJfJX5VedtK83eTNb8u/l5L5aSxuYBrWrfp&#xA;611BbuxmAS4d4OS0PpszUj/4GtMVZ/8A85g/+Sef/to2v/G+KvPfOes/m1r/AJy8h6H+b2i2nl7Q&#xA;LjWYpLaXTAkzTXC0SONyLq6CqWkCnpQMW+KmKpJ/g/XvzB1jz5q0nkObzXqE2sXlja60utwacdP+&#xA;r0SKFbSTZzGhXd6gigHQkqsln8hXvmHz7+V/lT8xI5BcR+X7mPV7IXA5Ti0kkMUbzW7/ABVEcbtx&#xA;au3Wu+Ksa1r1vKGhfmv5G0O6kt/Li6zpVrFIzM4t4b/1PrKcz4rEsbVO4G+KvQdT/Ljyt+Vv5ufl&#xA;xP5MWWybWpbnTNVtXmkm+swiNKyt6hahqwZgtFqFoopiqRflD+U/kvzD5C85+YtdtJL/AFAXmp2l&#xA;tynnjSGGACcKiROgqZjyNa/rqq9I/wCcVdA0nTvye0rULOD0rzWDNPqMvN29WSK4khRuLMVWkcai&#xA;igffir2DFXl/n1LGHyINZ1C1F9p+ia3d3d/ZlPUElnPd3Vjd/BQ8uNteSPT2xVM/KumeXNQ17UJY&#xA;pbi5k08Qy6Le/pC8mZtM1G3t5ARK07s8ctxaPsfh+D54qyLTPJXlfS5rebT7BLaS1ggtYSjPT0rW&#xA;JoIAylqOY4pGQM1W4mlcVeZ+cbLS4poZfLUKWnl/8tpzq959WoIReSXST3dunYelZtcmVRspkUdi&#xA;MVZLDZ2vofmZqkC/72zSRGQdHNppUELEf6sodD7riqS2n5hTaH5G8radKsD3up6RZtbLES8kUTW6&#xA;KHkhcKrcm+BKvRm2pscVTLQbG4W3jlubLUbqzveLv9XZLRJZWUKpmeaW1upqr8A9RI46cVWJRQBV&#xA;kNsbnTrhE0by2unrcgo0cr21tC0iguhJtTdMDxD78PDFVa7sbi4eA+ZLyMW08yxW+j2ob0ZJGqVS&#xA;Zz+8uKKpJHFE4gl1IFcVRut/BLYyDrJcRQEezSJJX6DFT6cVTbFXk35l/kFF5q8zp5s8veYrzyj5&#xA;maMQXmo2IdjPGqhV5COW3cNxAWoehAFRiqN8ufkH5Q0j8u9V8lzyz6hHrxaXWNTlIFxNOSGSUfa4&#xA;+myhkBrvua1NVUl/L7/nHJfLfmqy8wa55pvfND6NG0OgWl2rLHaIwKADnLPXiv2QoUA706YqmNl+&#xA;Rn1X8uvN/k39N8/8Vajc6j9f+q0+r/WfR/d+l6x9Tj6H2ua1r0xVHab+T/1LzF5E1n9L+p/gnSDp&#xA;HofV+P1qtt9W9Xl6p9L+bjRvCuKsP1f/AJxWsrvWr39HebdT0ryhqlx9a1TytblvRldm5OFf1QgF&#xA;QOPOFyPHFWf6B+V9ron5jX/m+0uwtpdaXb6Rb6QsPFYI7bgEYTeoeQ4x048B88VYH5g/5xbtb/Xt&#xA;Rn0nzbqWh+W9bnNzrXly25GGd3PJ+LCVEAJ6B4np22oMVZvp/wCVFlpv5kWHm+xuxBZadoSaBa6M&#xA;sOyxRSc0cTc+y/Dx4fTirHLT/nHPST5O8z+WdT1aS6j8w6q+sW95DCIJLSc0KcQZJQ/GlCdqgnp1&#xA;xVvyf/zjppem2WvJ5r128826l5gtBp1zqN2XSSO0Uh1ji5yXDgh1VqlyPhFB4qoTyP8A842LoHmX&#xA;TtW1rzZqHmSw0Fi/l3SLoMsFo1KIfilmU8BSnBUHIA+2Ksz/ADh/LT/lY3k8+XP0l+i63EVz9a9H&#xA;6x/dcvh4epD15deWKqf5o/lg/nmTy7NHqn6Mm8vajHqUZMH1hZTGQfTIEsJXdetcVYd5z/5xpj1r&#xA;zNqWr6F5s1Dy1Za85k8xaVa8miu3Y/vD8MsIHOrEh1cVJ7bYqxr8wvyx0+8/NfyP5M0a+udCj0/y&#xA;9cLpOpWjkXFvJbMxjl5KYyxJ+38QJqdwcVZx5c/5x28tad+XuueUtUvp9XufMcn1jVtakHpzvOhD&#xA;QyIC0tPSccxyZqkmtQaYqh/y5/5x6/wv5qt/Muveab3zVe6bA1toiXisqWkTjjRecs5+FCVXjxUV&#xA;O2Ksn/L38r4/KPlLVvLkuom/j1W7vLp7hYRAyLeKFKBS81StPtfhiql+Tn5XXv5c6Dc6LNr82uWj&#xA;zmWxWaNoltYyN4o0MsygFiWPHjuemKs/xVjUGkW+teUdX0e5/uNRl1a1lPcLNdXCEj5csVYfB+XP&#xA;max0uy8y+WpjoXnQ2Ua6ro0rrPpk8shWW7j9MFljZpQzI8TKORJI+NjiqRa55q82ardw+XNR80Ta&#xA;FcStTWms9MOmmzi4q5RrmSbVFeaVT+69CUDqxeg4sqy63Nhc+WR5N8k6RMNJmge1m1K8gngsooZ6&#xA;iaTlOI5ruV+bN+7qGavN13xVV8tQW9t+S/1WFAj22l3UF4AS1byFZI7xmZizFmuVkZiTUnrirBPy&#xA;7/L/AMx6MUuvNflnVNW1OKJbaEwXWmi3htoIkgt40rewPJWFWEvNeJPRe5VZtbaUg06aB/IMyzep&#xA;K1o5XRyVUyF4gzC7J+HZduwxVMJ7G5Kqtro2t259SI738DxqiuCQI5L6RFoBtxXFUwsrf6pdG7Gj&#xA;alcXhUqLi5uLeZlVqchGHuisYag5BAK0FcVVdUudVvEtoItGuU/0u1eSaSS0CxxxTpJI54zux+FS&#xA;KAVxVP8AFXYq89/MfWfza0/WLBPJmjR6rpksa/XXZoVeKRbhHaglki5B7dJE6ijMprtirE9N84f8&#xA;5K/4hik1HylaR6E8RN0I3jcxPHVmMYWYTMZAgCjiaFv2qYqjrnz/APnbe+XdKvdE8no1xfwXf1tp&#xA;/wBw9vLHcSR27i3mlRqPFGshRj+2KMaHFXXPm7/nImG61b0PKFjdW8NzGumc5ViMsLRN6lCJ3pwk&#xA;jHxMBy5dBiqa+X/M35x6ho+oyax5bi0rUYo1NlFGY5BJvEJGDG4ccwrSMiMtCaBmUg8lWPXfmD/n&#xA;JBLy5gttFilsollks71ktklmWQRfVopI/rDCJ42WQSsAwPLZVHxKqyHzLq35uQeYYE03Tmm0j61w&#xA;ufq4t1pZm0VkkSaUzP6v1vmrr6JHELuv22VSjRfMH/OQNv5igOu6JFL5cX03vWt/RkuQrW0kj+kq&#xA;snMiVAnDjUEqAz7nFU71nUfzhXWpxpVlC9ik7p6cqRembfkPRkgm9UOzlK+orpTkfhNBuqp65qv5&#xA;0Lqyx6dp9tFazAlKIlzFC3oKeMkpmgkf97yApGtdqkBaSKt6rq35y2+gyzWmlw3eqrdMIYI/STlD&#xA;9UjeJTzkZQDcl0katdtuAPJVWPr5g/5yJ+q6fIuhoWa1H6VWSS29RLz0JWPocVRfSMiItCHKlh8T&#xA;iuKpwda/PEa1aLDo0EmjJLbS3TSvEJpLaRF+sx1rFSeF+XE8FVxvRegVRPlTXvzWbzRw8xaay6BM&#xA;JI4mS3jSSOX1EWMsY55vhI5t0oqcRVmqcVYyb389ZNVt7qTyZpc+phWgtfMU6wfWLRGQNKOKyFvT&#xA;L8gsavv0Ln+8KqMufNn/ADkRJa3Udj5XshIltIbe5uP3UjTqhCgRC4kj+2oI5SAEMOhVlKqpJ5y/&#xA;5yBmt6ReTLa3kZHDu0sbmN/UYoyr9Yo49PgjDs1X3UcSq9fxV2KuxVKNKW9sbeWCSzkkJuruZXja&#xA;LiUnuZJk+06n7Liu2KqWvXnmVtPMWiWBS/mZY1uLhoTHAjfbm4CSshQfZSo5HqQN8Va8v6bDoemp&#xA;Y2dhdP8AEZbm5leB57id95J5n9T45HO5P0CgAGKpl9duf+WCf/goP+quKsXtdH1uDRvM+lCzf0dR&#xA;ub2XSqvDRUv4hLJ6n7z4f9Llm6V2oe9MVRH/ACFP/tR/9PmKu/5Cn/2o/wDp8xV3/IU/+1H/ANPm&#xA;Ku/5Cn/2o/8Ap8xV3/IU/wDtR/8AT5irv+Qp/wDaj/6fMVd/yFP/ALUf/T5irv8AkKf/AGo/+nzF&#xA;Xf8AIU/+1H/0+Yq7/kKf/aj/AOnzFXf8hT/7Uf8A0+Yq7/kKf/aj/wCnzFXf8hT/AO1H/wBPmKu/&#xA;5Cn/ANqP/p8xV3/IU/8AtR/9PmKu/wCQp/8Aaj/6fMVd/wAhT/7Uf/T5irv+Qp/9qP8A6fMVd/yF&#xA;P/tR/wDT5irv+Qp/9qP/AKfMVd/yFP8A7Uf/AE+Yq7/kKf8A2o/+nzFXf8hT/wC1H/0+Yq7/AJCn&#xA;/wBqP/p8xV3/ACFP/tR/9PmKu/5Cn/2o/wDp8xV3/IU/+1H/ANPmKu/5Cn/2o/8Ap8xV3/IU/wDt&#xA;R/8AT5irv+Qp/wDaj/6fMVd/yFP/ALUf/T5irv8AkKf/AGo/+nzFX//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -90.6998 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 90.6998 li446 90.6998 li446 0 liclp[1 0 0 1 0 0 ] concat420.782 44.8345 mo420.615 44.5845 420.364 44.3335 420.03 43.9986 cv413.932 37.9009 li413.764 37.9009 li413.764 44.8345 li413.681 44.7515 413.514 44.7515 413.43 44.7515 cv413.264 44.7515 413.096 44.7515 413.012 44.8345 cv413.012 36.0621 li413.514 36.0621 li420.281 42.6626 li420.364 42.6626 li420.364 36.0621 li420.532 36.0621 420.615 36.1456 420.782 36.1456 cv420.949 36.1456 421.032 36.0621 421.2 36.0621 cv421.2 44.8345 li420.782 44.8345 licp408.083 39.9888 mo409.169 39.8218 409.922 39.1529 409.922 38.1509 cv409.922 37.3155 409.42 36.7305 408.334 36.5635 cv407.832 36.48 406.245 36.5635 405.66 36.5635 cv405.66 40.0728 li405.911 40.0728 407.415 40.1558 408.083 39.9888 cvcp408.083 36.0621 mo410.256 36.0621 411.258 36.7305 411.258 37.9839 cv411.258 39.4878 409.754 40.2398 408.334 40.4068 cv411.258 43.7486 li411.926 44.5005 li412.177 44.8345 li411.926 44.7515 411.676 44.7515 411.425 44.7515 cv411.091 44.7515 410.84 44.7515 410.59 44.8345 cv410.256 44.4175 410.005 44.0826 409.67 43.6646 cv407.999 41.7437 li406.914 40.5738 li405.744 40.5738 li405.744 44.8345 li405.576 44.7515 405.326 44.7515 405.159 44.7515 cv404.908 44.7515 404.741 44.7515 404.49 44.8345 cv404.49 36.0621 li408.083 36.0621 licp401.482 39.9058 mo401.9 39.9058 402.318 39.8218 402.736 39.8218 cv402.736 39.9058 402.652 40.0728 402.652 40.1558 cv402.652 40.2398 402.736 40.4068 402.736 40.4898 cv402.318 40.4898 401.9 40.4068 401.482 40.4068 cv398.643 40.4068 li398.643 44.1666 li399.478 44.1666 400.981 44.1666 401.817 44.0826 cv402.234 44.0826 402.736 44.0826 403.153 43.9986 cv403.153 44.1666 403.07 44.2496 403.07 44.4175 cv403.07 44.5005 403.153 44.6675 403.153 44.7515 cv397.389 44.7515 li397.389 36.0621 li403.07 36.0621 li403.07 36.2295 402.986 36.313 402.986 36.48 cv402.986 36.5635 403.07 36.7305 403.07 36.814 cv402.652 36.814 402.234 36.7305 401.817 36.7305 cv400.397 36.647 li398.643 36.647 li398.643 39.9058 li401.482 39.9058 licp392.878 44.9185 mo389.786 44.9185 387.865 43.1636 387.865 40.4068 cv387.865 37.566 390.204 35.8951 393.212 35.8951 cv394.215 35.8951 395.301 36.1456 396.22 36.48 cv396.136 36.814 396.053 37.1485 395.969 37.4825 cv395.886 37.4825 li395.635 37.232 394.632 36.3965 393.128 36.3965 cv390.539 36.3965 389.285 38.3179 389.285 40.4068 cv389.285 42.9136 390.873 44.4175 393.045 44.4175 cv394.632 44.4175 395.802 43.6646 396.053 43.4146 cv395.969 44.2496 li395.134 44.7515 393.964 44.9185 392.878 44.9185 cvcp395.217 47.1734 mo395.217 46.9234 395.217 46.6724 395.217 46.4224 cv394.298 46.4224 li394.298 46.6724 394.215 46.9234 394.215 47.1734 cv394.215 51.6021 395.301 55.1109 397.64 58.5357 cv399.228 59.2886 li396.47 55.7798 395.217 52.0191 395.217 47.1734 cvcp415.687 25.7027 mo408.584 25.7027 402.486 29.0445 398.643 34.1407 cv399.312 34.8926 li403.07 29.8799 409.002 26.7051 415.687 26.7051 cv417.774 26.7051 419.194 26.7886 421.116 27.4571 cv424.04 28.543 li431.309 31.2168 436.154 38.9029 436.154 47.1734 cv436.154 51.4351 435.236 54.6099 433.064 57.9517 cv433.314 59.2886 li435.486 56.4478 436.488 53.69 436.99 49.9312 cv440.249 24.7837 li439.33 24.7837 li436.907 43.9156 li435.653 35.9786 430.891 29.546 423.455 27.2901 cv419.612 26.1202 li418.109 25.7027 417.356 25.7027 415.687 25.7027 cvcp406.496 20.606 mo395.301 20.606 386.277 29.7129 386.277 40.9078 cv386.277 49.0123 390.789 56.5308 397.891 59.2046 cv399.645 59.8726 li401.817 60.7085 404.073 61.1265 406.496 61.1265 cv417.69 61.1265 426.714 52.1031 426.714 40.9078 cv426.714 35.8116 425.127 31.6343 422.036 28.1255 cv424.374 29.2115 li426.129 31.6343 426.965 33.8067 427.633 36.814 cv432.562 58.2027 li432.896 59.9566 li437.24 78.8384 li436.071 78.8384 li432.312 61.7945 li431.727 59.8726 li427.884 43.1636 li427.382 48.4273 424.625 52.855 421.283 56.5308 cv411.341 67.2252 li410.59 68.0601 li400.564 78.9214 li399.312 78.9214 li409.253 68.1441 li410.422 66.9742 li417.44 59.3716 li414.182 61.2935 410.506 62.3794 406.579 62.3794 cv404.741 62.3794 403.488 62.2955 401.817 61.7945 cv399.144 60.9595 li394.632 59.5386 391.29 56.6978 388.784 52.939 cv392.293 65.8052 li391.04 65.8052 li386.11 47.4244 li385.525 45.3355 385.107 43.1636 385.107 40.9078 cv385.107 29.128 394.632 19.5201 406.412 19.4366 cv406.496 19.4366 li406.496 19.4366 406.496 19.4366 406.579 19.4366 cv445.095 19.4366 li445.095 20.606 li413.514 20.606 li417.19 21.8594 419.779 23.6138 422.286 26.5381 cv419.947 25.8697 li416.354 22.4444 411.926 20.606 406.496 20.606 cvcp415.687 68.6451 mo422.286 68.6451 427.633 66.3062 431.56 61.7105 cv431.226 60.5416 li427.466 65.2193 422.203 67.6431 415.687 67.6431 cv414.182 67.6431 413.514 67.5591 412.177 67.3091 cv411.258 68.1441 li412.929 68.4781 413.932 68.6451 415.687 68.6451 cvcp409.169 67.4752 mo409.838 66.7232 li406.245 65.8052 403.989 64.5513 401.482 62.0455 cv399.896 61.6275 li402.569 64.7193 405.076 66.3062 409.169 67.4752 cvcp379.344 12.335 mo445.429 12.335 li445.429 79.2554 li379.344 79.2554 li379.678 78.8384 li445.095 78.8384 li445.095 12.6695 li379.678 12.6695 li379.678 78.8384 li379.344 79.1724 li379.344 12.335 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmykf0.2555 lw0 lc0 lj4 ml[] 0 dshtrue sadj0.612794 62.9888 mo0.612794 62.9888 15.523 62.1656 16.939 78.8804 cv16.9678 79.2183 16.9678 79.1929 16.9678 79.1929 cv-1.24952 79.1929 0.612794 79.1929 0.612794 79.1929 cv0.612794 62.9888 licp@0.4088 lw0.608887 79.1929 mo0.608887 79.1929 65.9507 79.191 67.189 79.1929 cv67.189 79.1929 67.1504 79.1529 67.0357 77.772 cv61.5845 12.0372 0.608887 12.7925 0.608887 12.7925 cv0.608887 79.1929 licp@0.612794 40.356 mo0.612794 40.356 36.2881 38.3853 39.6763 78.3775 cv39.7447 79.1851 39.7447 79.1929 39.7447 79.1929 cv-3.8418 79.1929 0.612794 79.1929 0.612794 79.1929 cv0.612794 40.356 licp@0.612794 53.2193 mo0.612794 53.2193 24.4844 51.9009 26.7515 78.6597 cv26.7974 79.2007 26.7974 79.1929 26.7974 79.1929 cv-2.36817 79.1929 0.612794 79.1929 0.612794 79.1929 cv0.612794 53.2193 licp@0.612794 62.1275 mo0.612794 62.1275 16.3082 61.2603 17.7984 78.8541 cv17.8287 79.2105 17.8287 79.1929 17.8287 79.1929 cv-1.34717 79.1929 0.612794 79.1929 0.612794 79.1929 cv0.612794 62.1275 licp@0.608887 71.5044 mo0.608887 71.5044 7.67188 71.2759 8.34278 79.1929 cv8.35645 79.3521 8.35645 79.1929 8.35645 79.1929 cv-0.27295 79.1929 0.608887 79.1929 0.608887 79.1929 cv0.608887 71.5044 licp@0.602051 79.1929 mo0.602051 75.0181 li0.602051 75.0181 4.4795 74.8462 4.84766 79.1929 cv4.85499 79.2808 4.85499 79.1929 4.85499 79.1929 cv0.605958 79.1929 0.602051 79.1929 0.602051 79.1929 cv@0.0238 lw65.92 78.3628 mo65.8858 78.3374 65.8345 78.3326 65.8008 78.3541 cv65.7413 78.3931 65.8047 78.4605 65.8389 78.5035 cv65.8433 78.5123 65.8433 78.5376 65.8389 78.5376 cv65.7794 78.5718 65.6983 78.5503 65.6431 78.5162 cv@66.0308 78.397 mo65.9922 78.3931 65.9498 78.3931 65.9244 78.4312 cv65.9029 78.4605 65.8985 78.4986 65.9156 78.5337 cv65.9415 78.5806 65.9966 78.5757 66.0391 78.5679 cv@66.1582 78.3892 mo66.15 78.4058 66.1412 78.4273 66.1544 78.4439 cv66.1797 78.4654 66.2266 78.4566 66.2437 78.4273 cv66.2437 78.4234 66.2437 78.4146 66.2437 78.4097 cv66.2266 78.397 66.2007 78.3755 66.1753 78.3892 cv@66.2437 78.4273 mo66.2476 78.4605 66.252 78.4908 66.2437 78.5162 cv66.2349 78.5591 66.1714 78.563 66.1412 78.5337 cv@66.3033 78.3931 mo66.3331 78.3931 66.3584 78.3931 66.3882 78.3931 cv66.3926 78.4478 66.3711 78.5035 66.3628 78.5591 cv@66.3545 78.4732 mo66.3711 78.4732 66.3882 78.4732 66.4053 78.4732 cv@17.7925 33.6573 mo16.4834 34.5298 14.7793 34.8418 13.1998 34.8418 cv8.62794 34.8418 5.88477 31.9532 5.88477 27.4019 cv5.88477 22.7256 9.33448 20.066 13.7193 20.066 cv15.2364 20.066 16.795 20.419 18.1876 21.0215 cv17.9795 21.5416 17.855 22.0816 17.751 22.6221 cv17.6055 22.6426 li17.3145 22.2686 15.7769 20.8555 13.6363 20.8555 cv9.8125 20.8555 7.92139 23.9517 7.92139 27.4849 cv7.92139 31.4751 10.2076 34.0313 13.4908 34.0313 cv15.7354 34.0313 17.481 32.7012 17.8965 32.3477 cv17.7925 33.6573 lif0.1703 lw17.7925 33.6573 mo16.4834 34.5298 14.7793 34.8418 13.1998 34.8418 cv8.62794 34.8418 5.88477 31.9532 5.88477 27.4019 cv5.88477 22.7256 9.33448 20.066 13.7193 20.066 cv15.2364 20.066 16.795 20.419 18.1876 21.0215 cv17.9795 21.5416 17.855 22.0816 17.751 22.6221 cv17.6055 22.6426 li17.3145 22.2686 15.7769 20.8555 13.6363 20.8555 cv9.8125 20.8555 7.92139 23.9517 7.92139 27.4849 cv7.92139 31.4751 10.2076 34.0313 13.4908 34.0313 cv15.7354 34.0313 17.481 32.7012 17.8965 32.3477 cv17.7925 33.6573 licp0 0 0 0 cmyk@34.7095 20.3775 mo35.25 25.5108 35.8316 30.6231 36.3926 34.5923 cv36.0186 34.5713 35.7281 34.5298 35.4161 34.5298 cv35.0835 34.5298 34.751 34.5713 34.4395 34.5923 cv34.086 30.4151 33.6705 25.9263 33.3794 23.8687 cv30.9688 28.1705 29.1817 31.4957 27.9346 34.3638 cv27.7061 34.3638 li26.563 32.0152 li25.233 29.272 23.7784 26.5704 22.3653 23.8687 cv21.9078 27.9214 21.3467 32.0362 21.3467 34.5923 cv21.0767 34.5713 20.8482 34.5298 20.6197 34.5298 cv20.3492 34.5298 20.1207 34.5713 19.8711 34.5923 cv20.4117 31.2461 21.6587 22.5596 21.8663 20.3775 cv22.4068 20.3775 li24.0694 23.6817 26.0645 27.5889 28.2881 31.2671 cv30.2623 27.7134 32.1744 24.0972 34.273 20.3775 cv34.7095 20.3775 li0 0 0 1 cmykf34.7095 20.3775 mo35.25 25.5108 35.8316 30.6231 36.3926 34.5923 cv36.0186 34.5713 35.7281 34.5298 35.4161 34.5298 cv35.0835 34.5298 34.751 34.5713 34.4395 34.5923 cv34.086 30.4151 33.6705 25.9263 33.3794 23.8687 cv30.9688 28.1705 29.1817 31.4957 27.9346 34.3638 cv27.7061 34.3638 li26.563 32.0152 li25.233 29.272 23.7784 26.5704 22.3653 23.8687 cv21.9078 27.9214 21.3467 32.0362 21.3467 34.5923 cv21.0767 34.5713 20.8482 34.5298 20.6197 34.5298 cv20.3492 34.5298 20.1207 34.5713 19.8711 34.5923 cv20.4117 31.2461 21.6587 22.5596 21.8663 20.3775 cv22.4068 20.3775 li24.0694 23.6817 26.0645 27.5889 28.2881 31.2671 cv30.2623 27.7134 32.1744 24.0972 34.273 20.3775 cv34.7095 20.3775 licp0 0 0 0 cmyk@38.9688 31.7867 mo39.7793 33.1168 40.7144 33.9478 42.3355 33.9478 cv44.0191 33.9478 45.2242 32.5557 45.2242 30.9141 cv45.2242 27.0484 38.7198 28.7525 38.7198 24.0562 cv38.7198 21.375 40.8394 20.066 43.3331 20.066 cv44.3306 20.066 45.5362 20.3775 46.3047 21.0635 cv46.0557 21.6036 45.9102 22.1856 45.7437 22.7676 cv45.5362 22.7676 li45.0997 21.6451 44.1851 20.9595 42.959 20.9595 cv41.525 20.9595 40.3404 21.9156 40.3404 23.3912 cv40.3404 27.2149 46.8868 25.6768 46.8868 30.1036 cv46.8868 33.0752 44.5801 34.8418 41.754 34.8418 cv40.7354 34.8418 39.0728 34.4053 38.3663 33.6363 cv38.5743 33.0337 38.6783 32.4102 38.7613 31.7867 cv38.9688 31.7867 li0 0 0 1 cmykf38.9688 31.7867 mo39.7793 33.1168 40.7144 33.9478 42.3355 33.9478 cv44.0191 33.9478 45.2242 32.5557 45.2242 30.9141 cv45.2242 27.0484 38.7198 28.7525 38.7198 24.0562 cv38.7198 21.375 40.8394 20.066 43.3331 20.066 cv44.3306 20.066 45.5362 20.3775 46.3047 21.0635 cv46.0557 21.6036 45.9102 22.1856 45.7437 22.7676 cv45.5362 22.7676 li45.0997 21.6451 44.1851 20.9595 42.959 20.9595 cv41.525 20.9595 40.3404 21.9156 40.3404 23.3912 cv40.3404 27.2149 46.8868 25.6768 46.8868 30.1036 cv46.8868 33.0752 44.5801 34.8418 41.754 34.8418 cv40.7354 34.8418 39.0728 34.4053 38.3663 33.6363 cv38.5743 33.0337 38.6783 32.4102 38.7613 31.7867 cv38.9688 31.7867 licp0 0 0 0 cmyk@1.5331 lw1 lc1 lj1.0752 78.7281 mo1.0752 78.7281 9.0044 61.563 30.6509 56.523 cv43.1192 53.6197 55.0435 46.9185 60.4952 40.5591 cv@59.5049 24.5337 mo59.5049 24.5337 46.2173 40.0923 25.5293 52.0259 cv4.59766 64.0982 1.0752 78.7281 1.0752 78.7281 cv@1.0752 78.7281 mo1.0752 78.7281 9.77393 63.9507 27.4156 64.9458 cv41.3213 65.7291 53.8521 60.3062 57.772 52.2027 cv@1.0752 78.7281 mo1.0752 78.7281 7.97461 66.8091 29.4649 71.648 cv48.9136 76.0279 50.1446 70.2984 53.211 67.0054 cv@0.8177 lw1.0752 78.7281 mo1.0752 78.7281 9.0044 61.563 30.6509 56.523 cv43.1192 53.6197 55.0435 46.9185 60.4952 40.5591 cv0 0 0 1 cmyk@59.5049 24.5337 mo59.5049 24.5337 46.2173 40.0923 25.5293 52.0259 cv4.59766 64.0982 1.0752 78.7281 1.0752 78.7281 cv@1.0752 78.7281 mo1.0752 78.7281 9.77393 63.9507 27.4156 64.9458 cv41.3213 65.7291 53.8521 60.3062 57.772 52.2027 cv@1.0752 78.7281 mo1.0752 78.7281 7.97461 66.8091 29.4649 71.648 cv48.9136 76.0279 50.1446 70.2984 53.211 67.0054 cv@0.511001 lw0 lc0 lj67.189 12.5865 mo67.189 79.1929 li0.603516 79.1929 li0.603516 12.5865 li67.189 12.5865 licp@0.7 lw0 0.350098 mo446 0.350098 li@0 90.3502 mo446 90.3502 li@/1 [/DeviceGray] add_csa0 gry%ADOBeginSubsetFont: Times-Bold Initial%ADOt1write: (1.0.21)%%Copyright: Copyright 2007 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Bold def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 67 /C putdup 69 /E putdup 77 /M putdup 83 /S putdup 84 /T putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 116 /t putdup 117 /u putdup 120 /x putdef/FontBBox {-228 -408 1779 1295} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings22 dict dup begin/.notdef <1C60D8A8C9B6FF86FBBBA1CBC846D6875CB85192F5DD7C77104B04E63A1804586BB1AD> |-/space <1C60D8A8C9B8707C25> |-/C <1C60D8A8C9B6079F6D9E7D2984CB9E45AD7AD973F3A23ED340C5F97AA79933572BD8BDBBA41F8F5A7452CE8A17E51707E1EC6E4E31E611A6F74104676233A232D3FC1B2247E5ED09546EC68BFF79CA7A4CBB1814CFD40E1464AB9F7411B5B2AEB2C62FDC5A6A4D871A1925E362C687DBEEDD33788150D629F9F783B3562E97E19F79F6080DA502E28611CF109CFB9B621ADE1737D2F6A3E8C2> |-/E <1C60D8A8C9B64EDFFB9634030713458B32B53B9E46C8E7F91D7496219A9E2825851C44CC2F3E3C9E972FFEB9FC01FEBD27E4ABD1FB7F0002A94932CF5483879F677690D85192405E9C1AD045BECB4CB2C3B0B8770515761158C1CEA38003DEACE1683B355C64D4CFF0AD82FF2989FBDA48AAAEBAB25F43B3216A5986FE68826CA1B8F596BBB444F53EFD2D18D57FACD930203D999AE5B2617A5CC4EE05CBB9> |-/M <1C60D8A8C9B5D6EF2DD0DD677665AD6F93211B52E63425D7EE67BA357C0B235D1ADB33D04B68ABE40805B1D80F684DCE76DD10A26DBF8CB9EF50A982C7F0069956D34761BC81D3F3B1045370B3046F8908527F38BE77669240EE1900888CB8E7DBAD0C0D73BE8322A1D9B4594FE8321098006615E915BE20173878720FBCCA3C1669E7879A0954B2A8D209A2FF626BE901BB1448141C27C6808460C6D7ED> |-/S <1C60D8A8C9B7EF327359836F8FF2578524976B2F2BAC8F5733BE470D981637FB8445157087AE11DA78F437C679F3E324444EB4F3B94D1C392A6A9BC5F3B6805E21589051F9EDC405CC9BFD2BD9FF116F16C0C5FD1FB9F6D3CC5F8E777B7804411957BC162616EBF2E8B026C5F4535A6B36FDF073144FFFE769C7F21ED67159915A66B9EA872ED96228F1E8BD93AFE7ABCC07078333F07739D4E6E26C6A3545A2870B688A16D2BF496382261A833AD3FFAED6D26EA6D9B265B15BE9C900663C2FC26B5BBCA9743986A105B45580BDCE6B83CC2C0487E45368FAA4DC0BD299CE8FF02EBB31616D68CDA4D98E6362F82E2419F146> |-/T <1C60D8A8C9B64EDFA7469B8D044AA27FFD4B2BF05190F49B2BCB53F435DEAF2D2B573D7A93E7A9B5EBCFADDD57556F36ECF1EAEEE36391F0D882226958E927D7395CFE505676CD0D4C1D753DD384E07EAF386B98B87FF35648AAF9F7B3F0> |-/a <1C60D8A8C9B7A73DB94A513D63310D115235E6D4A077A6A21289C2D0C0E34F47338E1E2DB35F1B0B76B5B472D7E0195BEBCD74DF110242E699155FD6066AEB492856AEBEBE5A1325C2FAD314B89C26EBC0EE2C84EF54DF3F8AF7BD7AA6D0658144BACBB9946CD7FDE73BBA0A78F4694C9D232EBC1BEB00B2901F3BC1E276D89F8FFFC04367BA964194855F87BB1D08436F2AAC917013B79137EEFFE7AA144C1C40CD10836639A1B3E41B5F4974776F0E2069E942AA0965412C9FDD7B6406C361CD76DDFBF9959E3CB5F06138EEE4D42C4708785616550353699B10532F0294DEAFA72A4657A0CF689571F1AEF088760C4C06ED694CE818CC6BB117B9512AB19C9E2A638E77143009BDD5E2B3834CE024364A196FF20F3EBE4CE5329BF9> |-/c <1C60D8A8C9B77FE2CE887CBCF1B648EA2EFF7B0769C3E57B14D770927AC307DD8A0662A921C7245081987D784A9651465FAE5A17AB9A72AAD3403C821E75D86997030646C6C5A7C62BC433A843B83EF68FFCCC96F687DB5E84807FCDC7EDC647C7DD7B9BBD03FFBD84A855D3D8B43E5B8CD236DB97ED253B5A1BAB021C2272095F35651939795482DA86A4BB9D6D0BA80F60B89E728E60F1E470078B4FD134454F781AE9056DC534DF927A06> |-/d <1C60D8A8C9B7EF322B9A245BA007CCCE21E347B331EF98DAF90562899B66BB19223B34B93FCC5A217CC8149211D51B78932A402613E91A35393373C192B95F913E51BB0347FADC848701B79289C9103E041CC7D207C3C709B76F9AC342B1CC663A6D80AA6648BCBAE0C1EFC7A203508F49D1DF3B9E27209A5C7C5FCCD03C0A3D04D3EB3402080D2C957C2B75DFBF12D3DD7DCF823916034F92FA02C898D8896057D1A939264B82A173E1CE43D17DC7280B612738C5129DB5DFDD757FDD5C7273> |-/e <1C60D8A8C9B77FE2986490791C5870084E5A199A76A7AA608F5655608CCF2BA636952B5665B68BA1FB6F5D5C5CFEE16033DFEC56AE965732B4F2917932A92FD00CB57E849E83627A0EF030CD8E206EAE3238DC898C1C1A8A1A5921E18C85DC765882FC0D513E264D45119E97BCB082AFDECBC6593BF68E42681D925776CC330E4CD74455690488DDB5D6D07A6E4BE9C2C69ABA2668E8BA> |-/h <1C60D8A8C9B7EF3247BFBC504398F567424F3FC64EF68678CB3BC9F1875C5BC6ED30E9B59839E15633EE7D040D690778246312C545B6790D1D413398B5DBB2A4E2D28E90BB09BB2CE82E8F6619C8F68E7711B51220765B158FC30D865F0CB960989E13B0C72E1657A85AF4CADCD7945750DEB854151ED0FD1BFAFDED35940FD07ED4F4FDB57E99A2F3ED82E5EA7AE1DE24A59BA21B12577891ECEC41916E22A532324121B0FFEBCC86AB> |-/i <1C60D8A8C9B854D0C48723CFC72B20F502063FF7EA73BECC1370B5BC856DDC0DF88F24762736FAEF4EBA5B08481BB495A74B1CDAA4E2682AF7F63DC374499DA6D091794F8498AD142DF75FE5FB35A180FE832E2BE4A3404A38EF01444AD3B7C2E4603085415F8AFF4E3AEC011C581815F3E49D88BB4F4C1AED68AE88216ADB9B718BE1E4DD> |-/l <1C60D8A8C9B854D098120023EFB487075B9F62A593777077CEE32A5E478DCD1AD232753364531A97D5794735725D4FC0DB8DE38B94E628BAE2F9800600995822891F84B12824> |-/m <1C60D8A8C9B6B41CD713DB53C25C1E06503E9F1B716A601BCDF040655A7BB545D791EE8990D2E00083A6C727B0B0657220A7EB69E643130A8FE9D7A369A52C94567CAA2E34D5777E6CCC47B130458C807A49AC2F3366A4C7591E95A442C461B5D303E394F7AE5783DFDE791E0F890DB9CD47A5DB170A16EF7FB1FCBF57EF26750F3B28985181DD3EEA412EFF4ACEF78CE1E25B169DE80CFF549DD2F50A7A1DB1213F500172F5118F7E114ACBAB0A589CC94D997F9ED0449D93C8FC5BC75D5321B50AB3EAABF1ADDF2E927FF09C6B45F8AFC052812795BED3FFB83F37C6DD641D755CDD27BEA3E7032EEB8EED011ACBB024114D81A5D0C07D0704872639D87F57835D4D7CD31DCD5B9EC752C6> |-/n <1C60D8A8C9B7EF3247BFBC504398F567424F3FC64EF68678CB3BC9F1875C5BC6F58C16FAB6C3A80048FD071F39C6824C4C4ECD5A48A70BFC9F3948823390C43CB44EC9B9714F030E274C1D2A276D676BECB03C5E049978BB3188D6AEE26610451A585D8840FE594D2C3A2BF39A1322FA6E1F881B111F3C7339AD65CC9A1E7B81D05ACBD0C84B307DC76AF835EAAC462BAFB13A3B64030A4F142D686DC5045116FB30078A920858949B> |-/o <1C60D8A8C9B7A73DEF47C66B5639FA7CFEF3DE7B502CFBAF488D63515E8ACFC5BF4E18508DE4F901AB88E78BAA8DC4DEA95F26F340D06E0C30979A108C772383D43B88784DDC98D37FAA80B9D902B98B37E66D5E56FF70E212DAC81DD85818E6BA9827B7094AE547C516377D9DFDA0F6AB70F569D66E9C8DA7FA2634DDCAB43E4FAA> |-/p <1C60D8A8C9B7EF322BAF34F5EE07DE08F7B68AA635508EE64E1CA909695374539F4587CCB5122404D21525203F99DF2E2BF92F292BEAE96B714B49DCA6711B877E54198978F5F094E4897BF2E98D95F04B30A2FC7992E9C4509C576C0D41B538CAC49F61F56940D8F608C58ABED1B3C0F0B12FDD0FB3ABF4056A1CE4048C24B9A45EF6253E40DB1EFD72F1501B07080B2D2789FC11BBBF46AC642F50C11B0335A443FBA116E66110062F1FC7F2E25A89A5BC437E6698BD7718980EBEC3029A5BEE8FEB1C70C9DF1503> |-/r <1C60D8A8C9B77FE2A4562A0D98256D5ED40972037B338C91A556E90AF1EA82068E3A84A9B73613EAE2F253B058BD167EE06E513893B78D00FBD5C73703C4852FB43D196808866FCECA47B1894316D8603C8ED224E76F77673AA40748922436AA4B69041CE8EED27D5C3F0491B2A53EE4A3F974984A8FEAC946ED914473E61BDEEC8C92BFC1CEE19A097F6C7B3FC4C991D9> |-/t <1C60D8A8C9B81F2C026CEBECDAB207ECD0D8941D60338278CE0E5E9ACEB5A3D93DD7D1D8E5D47CB7799E624A4F9BD9E95DB8B16D9A926BA43C6779650ECF31C0F72258DAA6C97CB39669DCB599A405F0B2FB2A40F1E6403B44090F17E3FB823B9AB0F540B2BF6D2E6FD87014D8EB8FCA05> |-/u <1C60D8A8C9B7EF324751F9BEDE69430511FC788FDED3513A377F4A4D91EF3D3EA6D1902B57A7D17EA37D45A3296C303EC70D4E089F38253699555850909DB47795F36BCE0402FC10C4215623430238AB3ADE72D46957DD7E4B7EA3F6DAEFAA7BB6F8B0287037C7550340D457B1F91470832DD02AA9F8CC2378F267B0DC8204BB84BA24A1907A558E095AD4DA71C6A80C1550E01662> |-/x <1C60D8A8C9B7A73DD7406A587DCBB171BE46524330C52DDFA12821E8BC2316EB235EFF8245CB27782651C004B9FE478978D124C5F17679E59AA88DCB428ED0666F730A08084D682C318946F39C1B82E6A00DFEADCCA0A3CC87C741C075917CB09A935687CC14997FF0F5470450DCE8A1C7E893DFFF6F1ACBDD7516C16D677594E434E9994C60FAA6C5B6E31853062C17879B5237601F265D49374830201D097A0F25BF437C6C3160407DBD4DD2AB2F68B91F4CB878A0F2167C7E1727579440E2581770BFE4C7A116B9863DE0338C791A8299FC6C903AF3325F80CFD596E208B814E95046AA7B8BDBE4E9991E11FC08F18C68850816F5703A> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/ACCAAN+Times-Bold /Times-Bold findfont def/ACCAAN+Times-Bold*1 [32{/.notdef}repeat /space 34{/.notdef}repeat /C /.notdef /E 7{/.notdef}repeat /M 5{/.notdef}repeat /S /T 12{/.notdef}repeat /a /.notdef /c /d /e 2{/.notdef}repeat /h /i 2{/.notdef}repeat /l /m /n /o /p /.notdef /r /.notdef /t /u 2{/.notdef}repeat /x 135{/.notdef}repeat] ACCAAN+Times-Bold nfntACCAAN+Times-Bold*1  [14 0 -0 -14 0 0 ]mfnt sfnt94.8291 21.9541 mov(The Compact Muon Solenoid Experiment) sh%ADOBeginSubsetFont: Helvetica Initial%ADOt1write: (1.0.21)%%Copyright: Copyright 2007 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 44 /comma putdup 45 /hyphen putdup 49 /one putdup 50 /two putdup 51 /three putdup 58 /colon putdup 65 /A putdup 67 /C putdup 69 /E putdup 71 /G putdup 72 /H putdup 77 /M putdup 78 /N putdup 82 /R putdup 83 /S putdup 86 /V putdup 97 /a putdup 100 /d putdup 101 /e putdup 103 /g putdup 105 /i putdup 108 /l putdup 110 /n putdup 114 /r putdup 115 /s putdup 116 /t putdup 119 /w putdup 122 /z putdef/FontBBox {-195 -444 1446 1206} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings30 dict dup begin/.notdef <1C60D8A8C9B6079F6CA73DFA409AF012C254CC3E9C1FE22D4256651EB98561290D3823> |-/space <1C60D8A8C9B854D00D> |-/comma <1C60D8A8C9B854D0DD5C695FDDCFFC8F3DAB9FA51E8C2F5A9C87AECBE2EE42E99334D68420488E5FD4B5E231DC10B0201F4794994C32707EF4A502BE3D2D0869> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/colon <1C60D8A8C9B854D0F4305E7B4C115DF77DDFD45AC92D3A28706FE8FA19D528> |-/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/E <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29F8D56A4237858E054C3198877A> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/H <1C60D8A8C9B6079F4F4E07EFC7C894BAD912B65087B319FD4C6D4407FA6BDEE59584D043C3070AE38B> |-/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-/N <1C60D8A8C9B6079F42CB3557771D803C706A630DA03929B931F488C01B37E85FE694B3E25EF7F6332F> |-/R <1C60D8A8C9B6079F62E4AB3BE2637412A7FA2BF1A87387986CC045CAB872B149BF5CA8B183616945E928E44276850B6ACD583D0202E4733E2391A44F4BCB738AB089D22707E0F4100F2BC6F35BD460D56FBB8A5713D4AF8760EB8EC1E1AE6F49A9B2B1066A8DA04011CCA29E2BB62A652880D30D80185E3336BD5BF6EB5D116E1FAF0793D4F86835A22CB564EFB5339E311318AE2981A0679F359C9E7A1FF6CE964A> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77BFB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B422A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/w <1C60D8A8C9B6079F005DC3C75B1A77147C8375CCDFD0A24C766DB69E35DE36706983CA4785D8107CB89C2D97982F5548429FD5F71FC913D3> |-/z <1C60D8A8C9B7A73DEABE54629387A84F059D312ADC9A1BC62C3E425E4C57824FE89DFBD64BF53A53> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/KCCAAN+Helvetica /Helvetica findfont def/KCCAAN+Helvetica*1 [32{/.notdef}repeat /space 11{/.notdef}repeat /comma /hyphen 3{/.notdef}repeat /one /two /three 6{/.notdef}repeat /colon 6{/.notdef}repeat /A /.notdef /C /.notdef /E /.notdef /G /H 4{/.notdef}repeat /M /N 3{/.notdef}repeat /R /S 2{/.notdef}repeat /V 10{/.notdef}repeat /a 2{/.notdef}repeat /d /e /.notdef /g /.notdef /i 2{/.notdef}repeat /l /.notdef /n 3{/.notdef}repeat /r /s /t 2{/.notdef}repeat /w 2{/.notdef}repeat /z 133{/.notdef}repeat] KCCAAN+Helvetica nfntKCCAAN+Helvetica*1  [8 0 -0 -8 0 0 ]mfnt sfnt103.624 79.2876 mov(Mailing address: CMS CERN, CH-121) sh238.187 79.2876 mov-0.589844 0 86 (1 GENEVA) wsh277.175 79.2876 mov( 23, Switzerland) sh%ADOBeginSubsetFont: Helvetica-Bold Initial%ADOt1write: (1.0.21)%%Copyright: Copyright 2007 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica-Bold def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 67 /C putdup 82 /R putdup 99 /c putdup 101 /e putdup 102 /f putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 116 /t putdef/FontBBox {-204 -443 1437 1254} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/.notdef <1C60D8A8C9B6079F6C9C5B6880C89408E8AD9743F80D45518E28653C59C8B376144C36> |-/space <1C60D8A8C9B854D00D> |-/C <1C60D8A8C9B6079F2D195D2F475FB0496F57CAED376D8723354DEC9F1B1DE5681520D221B2480D1D8BDCDE504128C39D7EB2E84513BAC1DE0FB32782218FDC6E9C50EDB3243AB03AB27341C2AB66BCC7BEF1938A37561E60AF9AC58E646150BF50A2A4F9C83CE1E9DB03C86EEE00383C4EF0503E9E481C5C2D47FEADCC38BAEC2FF5C5F148176C> |-/R <1C60D8A8C9B6079F6D948C96378A395831CDA2139BE9588FD427243646A74CA03840F9949147C23ABC917C373B1C3FA085ACC10D1EED330B0D766649A299B2544EB909295412D418FE76D00B16F4BC532CFA6BCDAA3E1A61D2555CB15FC302A562089847E09921623EEBB5DB82D30048BD165A1DDE685F24B1A54D6F77BBD785DBF41B3FD9DBD25240631AECE1C07C0C586B60AE8DE9FF5B645009A5D8BE85102CF410B024E2C6C454FB86BE60622EC48789> |-/c <1C60D8A8C9B7EF3224D14587A8B37D54D8F0D79949CF14C9CC9890F2A6EDAA42FBA7117A612E13E7903C5A9C5F0200507E43E4C5E8B577504A53EA8A3E180CB569C8E885144F7728A2CCF0AEA32AD779FCECF91E377BD59B10FB864AC6580EFC92CA06227EB092EEEA6F0A41DE0D0DA52550ED7973070D2B3954AFC87D3BB2A46D25> |-/e <1C60D8A8C9B7EF322BA45AA2EF7BD5EAECAF85AF93C215781DFD7DA13F94BB4115BE9214BE159174D684F62C2005A0180C6808F64A08B396F763189FED746BF18ED4EE6E66DDE691142C37E3D614F8DB7B75C14A9F846CCAD13261BA0F086A233499153D3DE84AE55E921B6458DA81ABE3A274371E0DC1724FB71E09D7A2DF5E64CCD5B0577B8A6829193E633FA6CD7C2838A9AF9E8E0D8892F0FE> |-/f <1C60D8A8C9B81F2C3A233ED2584A5D503772ABBF6B2808B3D90393B4492FAD585A6BBF0DD8708D41EF54D499B58E7A4707819D1962C784050E571012168CB14C65EDB734DC21589D28A0280112A3100C30A89B7F4072B8FB10EB042628FCB195E8> |-/n <1C60D8A8C9B7D8BE16D8563F2A820135798DB83DD6B1FB4BEEDD6BE48B5FE588992ED2D6619960E60863C9F44AA1F533124F0383142FF7EEADB4AF1E517ED95B69DCD15F12872381FB9701963D2E25CAEBA64306BF64AB37AA8CAB3DCB77> |-/o <1C60D8A8C9B7D8BE16E0CC961AEF519BE656EC753A8172FD3365F902B7C752134E0D6062F2934F0088DB7D58C66CCBA57D3D7D362C8679BD71F98F68353DF00A6FE4BC9DC38D8621ADC978F735588AE608451BBF7B1F36DE1ABDB4D743E861A8CEED1A56243288AD7237419D7149DAF8582921DC7F71072F99464BF4B424500A0E0A81AC> |-/p <1C60D8A8C9B7D8BE19C9920B65BF569755CBC7004398C5F3E07B367F0E7B21E557936DCBD9EF9335D9341C63852CE0C6CD4F49B90122A57276DE63D17D21D54F902070BE3CE79ECEAFFF0AA566ECBAB31BF348C6D8C56B9E07D665CEA291F28872C6AD93B413125AA4075F806569703377C307FA20494A67837D4FC26FAB7DC94721A0B384A23590E20FBFB60312165FBB83> |-/r <1C60D8A8C9B7361F024500926F06869CAF414F7868F5156DB8CC460EA9477D01645E9A011D9746CB6993BDF7B2650628B9E15EAC73BA376BEC45E761AF9B7A77C8C55B8EEDEF93F167A7A94770404E8E1F0D41C5ED2E00F6> |-/t <1C60D8A8C9B81F2C1282009E5D95CE7F7F46B3356102279C4BC0F18BE99679A2FBE0B24A5C5CDAE5CD8FAEB44771EF6D329849A78B1C197090EDEDC41A5628E7A0D30EBF1C775B98D05B427C008446AE8ADA9F57D4B8> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/FCCAAN+Helvetica-Bold /Helvetica-Bold findfont def/FCCAAN+Helvetica-Bold*1 [32{/.notdef}repeat /space 34{/.notdef}repeat /C 14{/.notdef}repeat /R 16{/.notdef}repeat /c /.notdef /e /f 7{/.notdef}repeat /n /o /p /.notdef /r /.notdef /t 139{/.notdef}repeat] FCCAAN+Helvetica-Bold nfntFCCAAN+Helvetica-Bold*1  [30.02 0 -0 -38 0 0 ]mfnt sfnt84.5551 63.2856 mov(Conference Report) sh%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGState/ACCAAN+Times-Bold*1 ufnt/KCCAAN+Helvetica*1 ufnt/FCCAAN+Helvetica-Bold*1 ufntAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (CMS) (CERN)%%Title: (cms_cr.eps)%%CreationDate: 10/12/07 3:54 PM%AI9_DataStream%Gb"-6M-BJmZ2f2XJ9MQi=Wdg";'@*>$7_\s3$L^dPY$V;pHDB&X#gUo)'C&nZg[YEjgY/AFLnNRC[S3?O,"Z-7c"(-K,ahPI?6u@%cnXf.:;m`QFNik:>kDs2RA!3*@@0#h(PsLQ.;0\ghnTVAKM!R.G`*Yf(.2dmY=utWBf7K##NP&"ID?:qST!=oEBK]-f,)ln+)0U#%[,=ePq\824K.d/'efRL?oqVBSh-r,WoVLt.SZnINVUut]icmM#bmtF!!e!Qt0qe9Ieq]JR^jjO7?]I1"79?Jhpepj,#`iW^6)'59%^6@]#5RtRp_E`h@a-(o*n?)9AJ%h13qQp")2=HSrY5u3&RP^NC>&t#1Q6qt$3lS&t.P1Wsr0/B8_B]ki'.H1mMMr*<JilR:nHbO.%.(QI7Gj1j7oWRo'FfWt5c,[.dH#Amr8"Mk*S_s,?#H#V)e3P9Iaktr-#1E-me=XpJ@4tRMCY.UL1]RNAmtu`5RP9;B8EF4ROW2eR%dgp.&KJOZ#cs5$"V=Nh^0t_9"8"+/pPUFnX2L`Hgd]!M/BT"$DOX*ZA&',%S:GC9!P=ut7P8K@;"/&J9>S<)lb$Cd&:cE.h$!</o%XA=,qs6,Nl$?V-eq6]&0egs*-,irBX)Ngi`s-3Ap$n4kr5*nb03X_^#@6?rf#$UM8Yd,KUp;-MkI^].n5Cqc/'A'RK:.9XJj1."!%Ym8]CMMZdU>Q75!,aF=oh7b_"-aP3_Ku_RBcrtoQBLRVUB/,aI2tR$A.n.Wr1KX3tq*n"pd_`[d@EGE4#/,T[mq>@0,JW-QSTiT/%-2aVj.`nkd\lY`iX*qPU^>,ThCXZY!)<(!hdBVJM/@QYcg5_M:a"f%N\`lFu]$QnWU5NU;DX6=MRRXmhTHlrfJFD]</klRa(,MqB%a=GtN$jP-B3b_;#"t#s>G[oAEFk[#6dM+JXo[]"F`fpE&0mq9A^k?!-fU@7ZAJg`N77Q<_=6`4W+^1HH>-h#VnuKl?0cTgV$a#Qf%msh-1FLX#Rm4u(JruFnI4UJ^bO!OAlYVk_t#3^]nTEX4'U]2m@)4G)[r3&ssqKHT!)WEu4\j3n;i.^8s4lFiha:-)/!g[".NopMD%2qL78R#hN)rWLJn2?E%XA`^m='k1,@&Y`c',GQlA'U=FJ+&'b+@bdsZ61,D9d_;'_m.UJD,6D!lD2Il)j^5]893tJ(0caap0rHS]%`h.3oY%Y!L'3<0V7ZL5OS8f>W#[V;+ce>LhZigqiJ>VqanR;\Jiek$&&f#M<ZSH(t9Afpj24*n.Q[3\c>W00X)jTMSAR0fN]ZY>R%Hb%,/^70KF;&?@aCt=[4hNesef]l-B]n:FIbuu.3&2Ho%*:8W4/k-qbl!cVc/`sj(j,rsSmBke7=&$Jn11"eJAtUL!#<2-K<ZG48%$)>c_l1ss;F/_EIMY0!0I3$iVaJ-HC,^0Bs:[R;;2I/k]s%K6U8&]f.W5\Gij):ZHp3VH\ZPN1f"$iN-MX&nT)#9S184AIXO9mrT%j<4CP=p+Q87/N`#LkGMQF@$1o!,_ct6>@[<7NYlGP!lS[ADOoU)Kbki?52NW`&:&+1*(QT*KYr&k])Vn3cpuf7E\'_UNPK=;t27A%4sW&saAaA;R_T=2<hMu0UV&FN[gjfAVD'M+RK&C=+4:0),>dD$Y]'.$5K!2>d#?-IY09!\UTk,=XT2'>%I:TnTI7inA[$\TkL8s1%E]NEE?%04DDG(3LUf++cnd,6i4Q*)pg#kY<4<=V8<Z<HJjBg3Nl!3+lm244$^438[SbatG5^m1=e*gC]Dt/38Nnq<_#6Z8^.VX=h%O3<%)^3S>HW3h.sp!L'dM`94JJ4ZJ")epDZ^<ur:6kQY""&Ln^AN00M%Buo45O+U$46*.YR/"7h`SV#tJ#'o*U-mu3)c-hGp""4o%f.DRa=LAN=\Qe^hP.&`ti<6\_#BufB$2WB*;W\OP%=8!ZLY"3iIDChaO3\F,K"Ol$pou2hi'"#gigpUOJK^up%`FV_lOlW`&:(N'%E[!$2`2&b3))3b`6s?BS;BuBB&-Q;f#b8[;.3U,c"@e1T0nC)gJJ8Arj9;.<$TuJ9I#:_2p]Sq4EB_Ck4N3LH;%O+%JM.]E>_+K&%$HYW/^_Gd^=Fi)$"gUC4+t%=l=5Z&uj\f?H95k:Uk@,FU;&m[i/llKdQ=gRVa0KN=9sP(k@H20_V-/[%=X#/hKG:%.Upq,.8u7]M%7#FRT;m@%-U/GNZ8;]t^aX7Hf0$,G=aeUGT82A;317"`"<"aSRKU<;`I%l_\&o8bW81"rU-4s%l&p/^tO9pLN)1gb7!lH`DP@B\K%!]dbaN1h,H+W8-3(ZRiPNu-e\S;jH+a`o#T`8gAiS-DKON"[p#-H,[]+i_LR==TVq-"9P!*fGRW9uY0j6&W*8o5oQGBU2E@8Jdqj%)*1NFa%TDg8J@=Z#o$/M.#qc9'U>I,'LRFY:!jYDOVC*=Ud4K]J`K@f9S!OAJ22tF0p3k4OsC>M!=MK7=qDYS#Qr*YAjl]-"S>EM%i-_*+L]^G:RfZ;,Go[-nM88$(\NEUB2r)VG/D[lsqFB.,pFWc4pa&A0P\Ejn[o+#5o+<Oun\9TT=$CAp8cZ+/"9;'qcnPNlJOq+q%1+Z,!!0\'%OX+>C'[/TBZY'7G8\bN<==F5n"B)$$^_R)UMZNMg.cCG.V?!G4TU#fsM_kIuV?$!<5X,@oOG*:7@9j5E4p!=U#Zr_e%eh%*la1s__@6Iaqf)i%W&//>h!Z%;XKoZ680L,n8+:&_gUAtE@`'oC\MP5Q@@R*3f:f7oSM?V-P!/1`<Qlpq=.%n3i:`trm\:>Pt%5aECO-P'`;-4(et$:m)[,Re!t1'oe^!c8a(`eC4U,(Sf)T`#_s!!Blq"J0"P2[[>F6:u@)">C8gbS((*@Xsl0^f2j=<rn[^?q$(U%Y+pOE@_d[+E+9NjOp18)!1+%_=<N-0.H'&"E%t9^\:CDS^tKd43"N)CncZ0["md<50u/<!8:k)S5s>uJ:'eK\&0Nn[O<63=,7MYW%,fg]9j@]O7N$*p/&Jc"4%q$=Z&YK8[;@8'j$k7e\&4I^B/@U`%6F)NindA#C%SJN%a&6$*+_d7X&e2si30n>NZI)dc+o-kA&9EX[%e<_:c@E2l/LI<2=`?#Y>.4kCYpe,!,LkK.U$UQ*GBe0aV5X[hmf0gDZ9Yf)=`tB$,8.Ng7,Uq+O//d@nJOLmuRW0l<Om&UGpd>/t%r?0Z+?"f6(X9.gj:r"iO_f?J`eeFFQ8A6FTN($W&N[69?[5=2Y8E-?c,RHjT7[S_F098OU'#GV(`(1T?YW,)R3Iul>'$G8GRZVQd%Z%,:f)Z:ep+sKmDKJaCo4;QU@BQI9p,LN(!iYr3n";]ufN5r1O8&Ce9!Zd,>oRl4hke[]V@/8)X)./KA_L97M88bt/9lc@$7"eF6%d#%r^4]*IBBdq0Fh'AC>Zp8qWK8"Dd$fAG/,dRCfqHk`2s'Mr-s)LhrCN`?e?=[W,m8k1/ZccgOm?\_E[`)G9<nh1fDOUeg0DTY-%%;YB80"V"egFYNoHK3/[nC$&C^A[UA#[k4BSBI3$m"iHK%"JmW_IZ"=Al;aRc(lO:j,2M_.oMO,`$;IQ^TmkkS%u<A/=XJ]+\]JO%/M(,DZ99aC`*a5\ianle2N).a=>l.Mj&e4#AHQ'nOhjS3_8=?<Z>:u5[^'^$bP&5X1!;J]C,O1X1U`gi"r4B]jftiF>Z`)D0YnnO%>.1/:3uV>OMCgDae$;+g>L]rQ/R-c2?&^FOQXX4Ck-]#5@hTf1&su+LPqCbDf[<f:D;!X/m;:P9Q>LNZL!=Mcn<Qdeg%^lXDqP,W%9lSbkQd'L&&-l.(&/ADS[`1<D2TTHn>W0`9ZWoE4("6EkieRkkp)]U>;OPLGR`j\6-nnQPK/'Ape+`0mh):k((,JnK1R`?sRnrnp%8^iR>kC[:j(/(J6@\BQ]K`$%GM(eqk6<2t=Vstl,Ym>i._3b0_L`K_B4MML6?2T-2(B2_S2:OgamLHDHB>WehR/2+$is>C,X'doA%5q0Vt)P6s:2^a1B%[;HtEefVA/(D\3erZV*^m&I+$UZ."&OC$F8iu]-6dn"4ToC:th\hk<nOR\s*WEq&Ll@i#;nk+`-"Z9NIpm")%MjZ;pIV50CdXW86KqV@q2PWb?:2P=G&sg@7Ka)`Fj/lZZa\U7flMNjKC$(;=7cSuXn:uY'bKl3gUVK1fVDXSJ:0c2YrbsWSe>L5N%)?0YTXcU.PZ"$[%m2B83[*f!m%Pk2>-nk8O?c/8Wn82qqR(mMU=T8,>+_"O/q3#5q8/kqj;?2Un8iG\:dMbZ\Af-=rgL[i_N^0&D%9]&l3nA^7,?TKM&#=ACi!`&QicI6,[,n@*:s$uj6ffG:Pb:c\3bL[u'niU@VS85_b@g$Ze*)YfLp+4QOF.=[?ViII'&jD`">\OeZ%R>A";_V>HsIuY4n\ISh!$B55tr%\9dM&X6e>J['9V1Fke)djkL0VRD#-8LI<JYG"=?>V1@^riGYM`IobaD+%rfb!;f&GjLN9go4R%L1V/9pgjFP&iY@T2o?jB[0feU^&es^L'dh0+^!h=mM"R5g4`gjF6cn,r\Mcb0MU.Y=n>lm'.&V/,Za)BS>AgZ3`q],V?]R;!tCd1%'g)gLkWi>BRgpcC&!P"PHDldWOWML4ca+,=Y6P`i)]IUs-H7?G$c]$%S82SP9NJNWFm5]!SEO*FStAR]O=$(k5Zs%;).X)/hp`T^%&h3mGR1E/hOC=:fXLM:a*3:9*PuV5s7TQA0]P:hf*E#t,'kXZo5ZTm2L>0N<UkKArCMao0M:>Q#%DC.)@K`lW_C1R<dj/!SCm1kF%9cSt'_8LnhJH_Bf)E6'\$K.9eN,erC6QR)TfhsYg(:$6@fF]A+E@Z%+$4#9O3p7?K>b.Z;+,kei*D/1-2$&aE_?dhPrPU;\O,d=:%ZbVg13fR-NV%WuO9A@;dWJRV(%ZQ"-pe'"c-9.!t7BZ3IhU^<`iM>Ql1mtd-%E^dD9s1VBK=7;+-J\5[6=rW<L,.(C&#pA?-C.kA%7L`0Mf,5#.%8I#gOTs)e)]oP%DNoBj)CCTEUG3,`Z^?MFo\kXoA=nGjdS,R2.:Rm.j$f`.@/r-%.A%iNE,(oQC2W7/eFB4RbR1iO%aAg2q)]/5UHnW0oBl`ufK3`k=P)pd-W?J40s$ul'3\l(se%#O\ReY+9jt2pt)-&nRl\dt"EEZddqB,NSj8/%Qgm.@6s%uj3$dLQ6%YXT]>rdPF`,A7WX^II-X#Jd,.1p*DMdfTDJDNHo8?G`'[O6?P2-r6W)FP=$P?ms9(>lafs!0Fen0^J]'s).0h^E_#&(Pg=MD*"<f%6$Ff<PVr_$d5>ab@IWu"NW;5YO%uc(E]7;u3ta05pog4:.`hYC#\'/r;6bc;Xje9A6:q.E@NIgP`r<_3:F/Jls(t^1\(+IWeaLdJ%2bkaB`/+H!fdMB?BCmXHSF->0:.^/p4K%mt4s(<=Uu#?/0\JEI?tO:=rpQ8DGlf@_hDs8$F9@$04.@Ojh`I8a5oXBO>5hm7W]U;P%3*MmL5HSY7eK1AMZ2[Oh?jjpQ3=PqQRW7(N:![!VK*<-_s2tfIpDhggbWn#_G;Gr3jO4&fRi]r8m([[`BF]M@LLKU9Xu@1@RrHpG%j0E%_^CO?@=dY%S0^a<]h9GO1NCS.opck:<$N5I22Z@W,Q@1"BJ#OfDa8p]V.(Eb?8b-7,\\LYO#?S%Ta.i5M*E:%B`Pc.UiYO(C%BdQRSOUc-S^ZPhg[m+f=qh+lQEKcc7S;o6-80,(7oCf[Om2g@GAbQ4N0NEsH@nTe52KIHY]qc($:mJD+8ne9ACoIMEA)"F`Z'q/a%OtM&ET=.4q8IO+Wo,egPh`[A"s$p6FPD](`_5&rNVXSQ7(uVb(\Htt]*>m;)]U2J1o7Pd5.R<G%%rQWbe\s&s`E1p,Q=ca.hB5kM%?_sTO5.#(L-()5rjn@EJh]i[g@fYp!'fRT>rd6;?qhq.c^fMQ>>EPg]'+_%WA2lg#a^bKHW8n#I<tM!#1#JPo,6hgcKDs*aeZ^q.%<m]'h(n7nDR]'aM&(njK]YpDQre-<JLkFOsj=+s_r^Z7tJRmK:6#4t)YP$$gJ2($&I4tn4F4P@iT8pZdhC!.YG6\!PO<cS0s*]DI%f#ONpDbO-5+9*Q[-R^7O'JG!*c?S'.]&mQ`Lu+*RgH=%f5H;i1kd3FB7:[XjB\]&F[76q]HoW!geP(tPH-Ks%'%,KR1$WRg!X]>q%T^.E0oe6>l'%'[N<U\:B4R"IV1mi.FTeg!i983Y,'\52[O'p)m10q"&951BQ.MamB/O?VDMAVedBfS&Z9Z4%PY-=,Ob"q)@?bbmQ%#fOl#4.VTn2Z7H7;'l4qrWXY-[+9VA,J`+TRtke6$kXH(oRbbrh+7AB62o4,cG8':*aI5d7_kjMUk*qA^!Sqt>I8$Y-AIt2#Erk?%]Ta45<$jOCK(YjOHV8I1%)4%N%#rrMf8I_t,fe0->$0$8lhPeb\1K`m@Yk)S`ZQA!Xq>CRc#liEBYB)Q6/*-Qc"iBo@Z.&lf(auC%;dH]iL8GV</Gl4!Ggj`4h+Xo>i/&k!cmG[HKY(+mBgl='fNK-P`a@d"]K[L*![qX\Yq#&3#O>J#24UB-api2goS6GIcEnOYpBO>!%bDLpKRouXF>/uSBS&q>p+.\s3`gbbb239$^3,J?"L?qa;nao39CMb#e+"IAQRS:`-rd#bUX^JgiTB#29XD]tfU-aMB1trmA,>3*U%NKS&.[oG<IA3=5:1oR5tlE$rn-ujlZJ6K>Wo3lED<02:*nLRj"q'?8?a6Vu:frhGn5-A\RQ"KuUd3`s2-IW6DLt9r\C@hfVCaQ9J%N4@QUS2Jda\ZG$h'-Vf_An0;`L:[=0<4n="PYKN-Nt-58d0T7fNTtB3[b%J]F>b)G^@bAMO;f*QqB-Z^D5p**4Cp*d=#"88oUncW%cL"`kBX>N>Rh(`aP=aA4321$-Ls'u8*C:FXScc#i\u@8j!,9$Ml*bb[\\78YkfP<T7K<l[OH1C1]\L^d$A43[=LIZ"EiUbh@'bW"%a.d7OepIS;UP#5:1C<_4[@]-f3W&5?5\,nh2i0P*'*-@.=O+*0DPM8LFL0GJ/'phcg`;UgrocsF6tp^r*+O*7%Q\J2LTT,37?k:2%E]*c\*%%r^7@*D`Tn)?Zm,E)00"qCuij./mLWR!LSXit<2_-#+^7[IX[sEhd8WX,KYU6YBl2snYYndC#k`9Zs!@_W].#]tIl]8ab%ZZu]QTi;bA:PJYb(l!2*V)9SE81SK4]O*ZToACP.DmYZ7A_4bU4uQ%tIFHbT%U)')<GQo]f$ma&8LO9Y,Q1bXp`G2ua^cYda&3lR%7gD[:Dko9XdmJnJThqY%\L/pK/H%))Bf'&6Q8_M<N/*7u$"2lF)I%-AA1Pok*H)!h$R-q,+_&<KL^X5sNAaZgiLGLVXXKRhMLp\e%.%&YAJr(3L:6:St'=Wo'Xn9@3"VYJTAi:.'"U,PD$=6MkKTUjFG4(HDM/=Z.cr4o-^1di-"G_(ogX/#/qd:@MG>.5m<eO4d7HjAE%KMHGQkk#4Ua"/h4Q*)t_VlW#^I;8qEPEEe\2msiKg-FY5-t_.98)j0<jpjtQ?7#.7N(._1Ua\Cb<NAPI^@.G8WNE+cg5:3UXf.T?%L3fg6lJ:7%Nd.ZN;>Sij!DRGc0rSrfQSMD+H?,g?e@XQ]Tleeb\j;[XmfQOPT_![hAuf+9M-mAX5[DJ($HU1_T=L][Hi5nE;J5G*%Q^>fR&,gZK6,+dh`e9EEZU!Q40,6Q30i4_!r"&PaO6+OQB8JZDF>HhK1Vt4iQa:[-I(rk[7!Ij_0RO\Z4g^se242G;gR;6fV^JYs%k(ss>\NJR7]/[g$_0D@cHagNZZ_R679R5gfB?6D(_U3IoF"b&tlbt`._0!iI$T=C2T>\?GQ;#luE%dokF14(dUQ;ILguk3Y?uUDB%6fB#>ZeIYPIrccnTDZ0-lM.TLn'rcK[F[4$7gNBh0(@M5G9KeBc)B;Q4KA8nguUS+/6bj+MZPn%k"f/F&+DE#`(O$H+b[#%l?qjE%I@%TP'WskgSi^P"m-#M(;9<HceO:`EMdNtVafq6u0"_rA*W_L3"`R?mjJ+rs:CQW_p^=9lM[>.$2pe5.3.iUO?9:@dlC;scO3Tqp%YV&]t=I4fTHur,BQ[kT1!<VSm5K(JFD;b^hNaK",n[+(tKg)->pD`DCj[k^-\J+b4'=NWCG&iN?i_fl`o9*S."!&MBX,H>d@lTh$%18PMi<qFhgGVupQh2M`Cl*DbUNFt3(GCZsLoZ;lF/km\K2ke])jtf>2V6]IDpTQ#elF@C>/egK5$_c)%eG[T#'"7nD+8j.NV=bfq%Y>GWebK,!#_Bb?./e>@7HuHn=JH4*j54T&7^5qm7BkGq`^'=@JJdd.*FY(>a(*n,`oFsB_dQs`["[ct7A_j#_pC+57lLGdHNE>B5%WSO69e(:5f^!34(2KRU[;c\O^4O[H=:>3tc,*qf(hq!El&%sdVnT\M#k]H>93VKqCDdW",/rsGn:mS]PD$FR3NZOd0imrb%*hN_#%A'.i)\id;dnLJlIU,*Ob\IrATF(%//Q\mp5G(XspoCM2k*Y`.j&]*JQ4]SGg4YURE`3cPY@9OPUiq"&=Pb(',5OkCWODPBZTWg&Q%WmB-qrh4puc'VQip)9Djm_dV.:+hF4K/,ARjp2L_ned*MK6F,18[;bfk`$-9qI(/k<eJ\X-Cea,W69fb.7]B=-`acZJch(-bi&K?%C/?%Ldm,To&%8PD-,c$eL'L/YdPt=jkkORSR^!b&nWaYm05`@SH77&oT'tm\SRG>3"V5s/ZFI/*0QZ<=54W:N6*p"CF>g*<UHu45%oN&q=/s1?b]+?D'@H1Ur'&96;k[W7`(mMSCqL4M2'jeVnQ'jhtM5t84DA^mb;<E2p1J<*;<>itGYCk<<m@a:DAq@?-oJo1lV9uh=%Q?,2?KjRGXl""ZlkZp!2YoWK!jeBg6#),q(@11#+YE?15o]g+0pX/CU/I-^6,0.-EhOd<a#M:*(S83t+R*^,J6$%U4\,&1%3G:S-%%N5PjUF=#<S*[e*1[%JjGV.MKeq;hD5JA%`2J>,7lTA&KY-a\aYS-Lblin2]B([Ne4_QhtQp.j_Ji5#j0l:%O/'QWSR_3UkDhooh%d+71RI$JDddma3qL'Bdu0hqHL/FUC/@b??BRAb,.n%magA^KmFE+RDkVjFno1_&P.o3\R/)O\l7MFV@,*$,gVU)+AB&bjH\,Jp*&%_C0nH0B89ZB[/9$(sqS\`Ni8\oQ?`XXpW$m=T-I_Bb:ftRRQ0u),=F^^L5D.AK5gGcNTP!e()P)9J>foO#Mt%V/uB4=%J86k'HY^%Mmo=`VW#`c5NP%Ebc@($VjaFQP\lKL6QS:(ob;*p0'R_q^Nq>4^:e3jZc(ruBQ!FkG=K#QPp<?-YQEg@gVY''=BYpRe9K@^0a[B;%6r-NfF*R48@7EG8[Wsp&-H`M.EUE#Ul<hcu8b23s@K#nrf:=SHKrWDHH)>[d4ITD975dhrGeFH<iX>(]92+q(J%"k"4>$4Ul,5sA%nnI[WM%'0#c`]+DcHMH/3*rb!cMWpshRB)11Rk:Fs$Ir6cYH<X0m:M>lc7I<BCki98[H4^?EBc*Zf9SNJ.>[E72WYIrVW*AKoku^%2iY!a4c<2r:PV0pn@+XhIerhC_7$\/1%Y"gi:E,Cbtjfn&#qb!GhQn/VhZW+d10Yaj$oO\Q6kk+Hc56Jn*BPknu8Nnm6:=$2`YZ4%9rFo6.\3d>rTJO``7(UuG?M(h6hJkRKViR,3-2k2GjXbK,`nQJSN5d,T$3:'q)J&>c^U,\Qkd6/0cY1V3q6=_IG#1J<7kq>qPK(I%%dW5'P5r_UMXuP\4-t^S2$.h9Z+/^:jj3:89$NFQ+R9F'E&%%L55G,VTjJE(S`i8rD[Yc1h9%2-V4d>!\*hPE`5)!HBu"5NaFAsU%@4oh#9+9,h)\,b`[W56G#b`.'eKQThku[a[BSZ1';2iPI"A(_)i.qR+?1(b2U2;ubjCBQ/3+rVa@_1Ql*HK'7L3DK">IR:i:.@D]%hi'_PbiM[f7\05Ij`'8em:\,Y_fL%W;30o!Pcij$A*dBDlMU:KrR5oi7j"$\E]Q$]WnRS:rj`PmcAkeXPjbu"L<)i-EFOpRX,O''%O+q,;=%l)eMc'UH;V8q:J4>!o+,I+ePpr,g;$.M(&]'&V/I<;7!+%(C);]66%_QOqgg7@dJfT*@a(Hplbc<IoCk2\&\HIs)a0h?<%n@ViNB6Q.NOp2n6bSIkP9srp[GD'r,I(gX]`Ht$NL$!":W]Jpt^A&Z)X78#](IL>t[/n>^0]c>KC_8e[N)uUa48D'p\PsZGrM0#,%b"P1U'man5S.5o*rp$^q*N.Rr#)rd9nt:\Un.sAke]=XW:J4t01)9i31S`&t522\gE*,sC"hPAT9]kX0h;V7^p;8[omuL3oco5sc%h@87=;+TP5'e+X]q$EUKM^]R@^s)bQiYE)h[t<mJE8qf`6S$'!-MSurNjqJq>6Pl69M>:ppCpS'`B-b(WoXSF2H.dAi%=e`7mS="%qdLr1@Nh)P_^J]Wbqh2@BDF'6@8+H9<78p63!?BYUZ.g]Va2AJGr;UPVsu5+T&m.[(qIL3*ge^BZ6$[!nG-,#\NFZD1LYP8Se3s?%Tt2gpnm$G#D-_#`&(^%</r6Is)>C)JhCPN3N`8U9:L8J($%(1P\5(^NfB7<2?'k05!13"t7oDW.fsDZ-ihFu]AO`Ec:WTF(q@tN^%7Wa464Wa8t/9j)CG@ue7]s@<oI\4p>A<>&h>TUrOl\,&Y+3&!@O*pY;E[2#qVT;c&fYq"Yr4YL&]R)g:f9.:1brZIO"r]_t7*kVV%E/HoIB/@#Vak!`ci\q-BXRRSDU\eI2'nP`i7\Iq75bW6%>"Q*APED+uPIXT,12RcLKq0ODj,$WD+H6f(f`EO-RAd2gs%SU<VdHJL%T6[OQna>sM$i&6n?Pcs]@unbcAbC$gf5gP<QcDGq\]6)F<5lLN!AA%i)iTK3p4Y4fC,PH#XlOcL/+^rdV/-]Lpop$4h&[i/Mj]Fh%JQ`GEM:\%9)0P$f4S@/%VmRXmOnOX1-A3QMO;r&b!B]el9c+h):,V^Q,hJcAHZf3p.fZrVZ(4<-m`<*4-t[41;[Xr\YLurKO2[np%Iko"R*KlRlaiJfS-5hZ;gRK1l%d%6Y4)'-c[4qQ:2AFOOM-_@r]Ug<X4#pcAqHZQLFiF!lI:rLpilrK0p3+1>RCJXRV:#luQF]'T%;Fg/H'4"s<ct!d?Pu]q[XVn1/9D=qbEaRfe*>cl0[^*6b*L`85rdab1HYh.Iqlp98hEQ3t>6\1(^m]"8=%8WIrl_<RGN)r1XG^6Y%r-DXhAEdjDlf--!h.g6@.mkhfd%D^Ck#)ns3FrIh=r@&YU+MD:B45@p3>>Aqgr\f,VK$miB1%HoWt(D^pXc_0q9.*f;5q$5&2G[^%(@3rXUq!=%;>'\8=P6n?k4>o$K,Tt;5)c$?$UqS;@m3+]3284Q['uobNshj<LJ)bNoO7?sIX_05Sl[VSl9>6nH(O1]qna2@H`16=%"_5hGO600ifeE$(R6aVenf7$_g=f'*UX0l-]["g3!_LL41'?W/XuHCf5BXd=Wue^/;,)%iAo*D#R-%i#aTBYfVe*?ZRb)b3?@/+4%#a0Q1i$5`*-e`0l4Qu+tA$-tBOd;K-E/TBE9[7"3%[P4J`lX+q\H:WKdHbl]gsY=l!RL+Es2P!7K%8alk\P:Gp!]K/]fX/slrV*(%E5?>Kg'HR%F-d0ZWct5%ad9F;@`R_J<f"r*KjM-Kni8p!?a%d\*buNuK0Xc![mf418'rU+0!uhUc3RBd%s_FplQ\n8B6I$pnM_UJ%F/0VRHD`Ceg-E]_W:@=>iuj/dOh7=-[37BEl>P["qD_4G[L]'7@a)S/N+jFl*P^qPYG.(V5:4S-![O*WTRIhH6b>Gf:aU)7&Pj/c%1gU*J*R1e+9(_FN>[Y%W6#bCdD`T:YQ[TUQ@D@X)Y-)KRa#9[U+F[\'#a9(,VBmOldSB5%oJg4dV_5=!"$ItN1)g"C2OW-0Pt?fr%cBPI?CUMAb>#h=q-/u<gLJ&EAL0ZOrfbf0\6J.J7+jIae`Z<oA"9<tZJ_,!*M49%\Ob\uZJu&/8&Q"GHBWR1V]gD6i4'&eSAK15!%\bb6o=]ssG*(*%RYer;6(q0L\7E-[DJ!\D"JD9=seM>^b60C/o/GsTolb_k`>O3R:N)okg2>8<%jVLZnIhUNUls7/ln/\A8F#;5=%r,gLLRUI>G&%Mb"\E[W)NlEtq@!Qi2gSB8Z*]IqdfP>Pn`[pgI#jG"QgR6:iU?as"DW]S$3g[m<W^GeY^Y*MQmCk/\U`qnmBHo9P%Io1:D`O7p5"?#&5#$Y_SO3*=X0K-tUD"k\'V2l`V)-/MKI`i])(84H<hKQOe;Leqa>&8-Hki-)!(sRCZ4'2XlD7&?RhhX13HrHN1%bHlmn!STe^ch?tZ=$A6L(c$lZG0qrk^F$6N)Dc:O)r^qW=fcEZDjHlC2RD0q6s#>H"O!1\-J,'qp<)'Vc,Ob`@=?A9jfss$Fupc.%O-As4bqbkq!4^5D^%sD'!I!Hs43Sls=QSt<ZNqOjcJuh_;-\`3[/+t,0"g]N0fC*"lC6gi43l/1qB4Bk3gY9Ac\XZ.\20-7-:RAG%nnP(g>oq0'So&h];Tj,U/\=-B9P1L9pSjIp;06\]XJ_fhHF9i<0[A3hl`fV-B22=ILrSd+&HLite2!1@jC*FCBX:RZ<dPVJR1Et@%CUIt!+[P]-mn#+?%^1`fdF^LfXP,@4Wb"HM2JRNLLgjq$5$+LfX-P?5V%^8lS8MRhIr`Y\"u")1@hlP8gLVmM]T)$D[7l=@D>0Xp%IbO6I@-pAN",,RP:A)>,]Lku7%Ase3Vk/-Sl9'o)l-C^-LN"'_(^SO<NWV.q&r+KP]^IE#eK"6tca9VmkfVGHH,S2*.DX\.r@"hr%?+;crg:'a%D*2!t2O\eY]M;?rojlIA3=%.H[b8e*5^*Sdg1:`rN/kf5Rr^e*mh[1)rPbeaE]8u/*;`G,[4+^]OZ/c]9?M7sq`t*!%j8>4"kno>)]e?E<9fALr<LUTAk?H^a;&X%6"TN(BUFjg=17a`mp>6o=:rW'tbCaQ,YMA)I\EOKh1*eKBG+Un0h76=Mh4!*u**AlK%.S@BsW>R'3k&?K5nD,*8RM8b4<p@4A5&`#oFuoV7NYAC`>XaWE\$;e%RR@>1XaF_I*qI:s;-_YYhB=uChi=grD3+*4K4f>/f!IdL%DPa_Of/5/+dY6l)NU>_tk[:H0X*1EsAYitbPBDpFp;e46RgX:ZS@B$@3g^;^eCUb(C$-r>Y?MM!_AmjC@^G*f8)Il>o!,G*g)\!%%UT1].0BB7RmH]_=6IqPXiLMU#gK;P_nn:[J%_rot/E@8Q3\,f"kpj&G*rA!.Z';BCJu;h4fF@kp*]S7f6gV)B#e]b=`W>L`oBO_e%!BA#_Ad2B](Af<>>:734Db:Q:LuOjAD;ef+K""`gFF&Y\[].<=0'EAAeY"OU3rbPI*K.^#l1&$*643q(aF=sh@ndAaLpR]fa?le&%@h_?dpfIfm8#[Y]Vf'#C-C2.YfP\_hnb7HXF4&!Z[r@e9p1YAB/CS#ks(ORYW/S%A'A*)0*g_Rl@p_+ij![:O%%O/\`&fMu#s*);%/)H]#)ICGjr"ZE7!"AP0;H^bgbJcQE;$f:ciUrU:j0g9Lh$u+,1e2rDP?Chi/:C)#+fG.%N_5TX<i1BiF]S0PWpJN"5TCfP/R!=^%4RN3#380"b^.k*O^L<5/+gK8"_JTea/L9';)N"0413"'OF!f9;gVgBL,Odd4bi%:[lOXNtpu!FYiukT8YPt#qQdc_c2Cu0t`cg%!%Z-'FDjk2_4Z!)[bVd3/!$,&'ubYcrNj`\j+;'?m;D(a#>onTZZ(KI=\r-Po-J(p2Zj_r&M`Z,W=6%6^0gF+8+gc3MTFATOPe$Y/f%U%;Zo,)$tGb\3>Nj-Hf>&MB,EP^2)fg/ln?K#`(]Dn2]Pg4.eMk-VCeVSKF*i1s1irYrJo,-UGsBkb-FC^GQgg^\2E'g>_u^,jRT%Xn92"-9H3#<n?C(B]&-=3o9VBV"SStIj_-HO0b%#[]!55g9')g=Q]3nEG0m/8g`.jV;I=,r%1`Z(UZ`/hi8%c*MF,#0W=WuOTi?+%.ePYnCMFKkG0KDleY#h7qJ1"b3K4EI@jEU>9Jc&fN=Cb\HlA!ioe)$UlHaOs]ZEcu";483Rnl,6k8]<hB?p+&Q1MX-`Z>XBb:'j?%f\+K:kZN41p6F!K,Lc)8HD#(?g=f'*#O6<7,=nlg[Kn9OElA&Mq?2X4]YA'bFeua"F)Jp:\(Z#[b3G@`f3+TL8W3ATZmq]WWYeo^%_X4Bn7udb'b>F8mG&+MbA2""%^;2ARcMW'\bE\=;c@t"T^\)_`G-[[WPjE1m6cS,kc1G_BCCS3k:4_%;!ODE:cmYi+H./0P>7obj%dBPEu%V2CPf9@gJ$DG"h.'uM&/g3(+MBRX<F*6W2#W10T/e>6OlLmt4.LH&r#Yc-"/T+pdBiD>(GEtPUPe3X0Lf$*8p#gA:h8A5j%6>.kdgU]GpXqKH%[I8@W+Y(gp,)!DeKL5kV]q7o13HoSslHE7iln_HYT6=,`;nVoSK_;lnEjkA44KVl"1:Q"+/3,Zs_90?nM;JC=%)GeCq\kH9sKMk4MeTml.?"W:2*JIl\lXn?36rtjZe,FdFnc6\"QH!g\fN.0lY-!B.n_,b1A%2#FLIWMt*!#[/HuHYM#Uj?IQql)F%d&@.K4'#QtdTIkK"6CM6lk5ZRjBWf3VjKHuGWW);XV-tE3$eQ)iPpiMd<^eaXKf&_'5]UtViod0l%Vgh;^Ydb%Z5TBogJ+HIhUN;%N_`)`GrCsAn"H<YdhjPmhT(boEi$664jf9H(3"T\Z)i;;di.T]IA'0oKu8*,7/C_uAOY"mR_>cn]@$>0:=f<NWPZ(#S3Wa0J38\t%j#/+1ZU&-ErM`)Bc0+fQok7LC55PiBT:M!7<7=Up_HH^@W`!,B;Ig*?A"BkL!Op%n#RGt<*2%1P.I=F?F&R)IdSottWD0mIfc8nV%cEqdn^3oL@q'cqG/RLD)-?mlkW+:1m?254pKf7'lA_VI?bHip!+/*Q3/rr^V_.lZcZGbgD@_6W=$WJ,tR*4`S#HC\8FE50NeZ'K^%Dg7f=f7.KsloBt(<C5FD*jdI"B,-0<bDS**]$n3/Ge*S.`5op@.#R64j4cCTIY2@moP>q'%Y-!S\20-3e!#pk"1>f?I7YC.15N/r%rE7LG7.n\/:)p:q\u(dCWF#XC-g-`)[R^XRe_a4UgK+aNjcD`,S.04Y%qhm#ioTiJH0+,/NTJ>YmIC\u&mW/`+17&"Q;t?jHQ!8R%:s6G?.n=@-.\CL_>':ZY`-&9WC,t[*-nQI>AH;1EPI#.(pLu@KeQQ@=b0P4`MUlpB#+=8:mTK!;p9"(Ydk14kk/pK,gtSAs\B,CS%Gsg?^p9q4i>i5"_o$a"q"PS(8qqG\nlAdCQ)NUsClDO5)*qpWHC[4`l[lneWb>_AM7+aSYbFOc<#8UF)"kWNmEYun6Vp>C::4p^7%:7hV*k>%%hFa.0-j#.h/@EGgGH#8&fKoOe97&&EX=0Rh]\OP%f)R=2aND$mJ>-fZfFT:a(_;:_>`pE)k?/i`C7Fd'hj[I^s/#d/'%mdR1/7((Kq43Z,k/e>Ob>-PN83q!Q$,/kQUW]"*\mIL1s7Fd-.Wa22\\Z"6/%c-dU#8^AZY,P_dQX<usD*=56?W:mPVA_r"Mi4SE%^nI6Us59Vd")oBHs5Kbf__ot*RCpk(WXZb;W59W]<,K.B>2Dp+qaK%iCT;s*ro0Yee*Ye;E`'7'RVFj_YkO'UFkT>-J[`,HGIja,%&9c`g3P=ZHeHWY*V718iGu:t4E3!<._i(N8(Qb]Z=rV4$GJ0s/d%Bj0c95H4]gWC6ZWmI"O:%G7j,9oXQRj(K0Q$A4%;,:a(KH7A%k?Ir^U2!=(>2Stc91&1f"Bq<%q'uZS\RWZZ@HSV]=0WR>#W1Z9D-rmJcWqUho'@rHB@ush\QX!]UY?YEAsR<ac?:1[[4fk_*b5(-%1=oKq^%8D*K=r;'=Z;A`ZQ4QAT5FJ+nn`+"<pE4,0t(T=b.]hSh^JH8o'B@[Zn0N%<TU">1g@u]9\Za$cZTjsZejfsW]]$%EON`L%^F@KP+Q]]fZ;l1YK0;*!0#&s`G#4]G=#7-NH+!e\9j2B1nn\QMfs^5+]KFs5])8]ngHfiQYLb'\F^Y/cF]PD_H+!ee[IsfJB1B*-%@mdelkr7_W[]%^B?u7j]Q^-uSCSQ&4e_F8um/WF&q8lj+B0.NehJQEEZ93K9'4Z(caS+`KeuQP`SA"W$3+q@+%Z7T8=Z<sYBCCS[%D9K8&k,0lX?I(9bb-SSLO_o['ZMMuXP.\j0X7C'O8/D3tg3R:Bjk1,/>+\7AW'&fS9/(50/T\&AV;.+!A%%olL:acdB65)1cZWJ"%CkE/XmVE.&M*%ip?#t4u^;e;EGh_,H]fsmdHJH^"fr@NM]01M]eZc&Iq,JHCPIn0GEL8V+e;d3@X6EgFNP8=rDp@+ki/.L-TRg)G%>2Gfe5-*-m!Z`.6cHfMC.^!D!eQ_<e`?>#HMK-h'>5)>X^*sDuT8IVUXlpj,N8%`VcP>KT52jjc`OMZV%Y%b=Y2ro^gU$p[@XR3q%#(*<dGAVVtmqrm#`XJTVW>N*-LLdS'j%?0;D[NG%X)Cii^=+*G>??ce_:TeZ`qOPle>A,ne\0SLWYdZrf)J1X\C7biITJ8,b8n:n%]8CU_gsNf9N&s7Nn2D*Bf!f5X]4--uF\*&m`Z<YWrMj>^O9>MQ($!'+0h2u=/uRFt<u'aV)RI#-E_dG1Npj(L<Q2IJ*T-iH`oS/:%SDJP*CW3e'\^FchnL#(3ql$dR>VWsgAB1N\]2XaL$mKJNB9*efLgTl7X/rKAhmVrq[u,1+fZ!h?`qMl2()>l,ZNmtPP]6MWEL1au%jVJZl.qa&(=iIo<I=-CD(mh:q*qjXdLi(-+c=bsL<ACYHSo"kbI[h8Nf(,#a,qZm4(q7/EBC?SqCM:rN;3Oa;)14K,;D\<Q*nOGO%U[3*oh,jKV(e8Z#8+^bK`V?Hdq5]Bmf7li7IO`?K#uf`F>.1IKhrS[Qm461n,:%W<(uNreP;X09MH[I#!G&q[j2P?i^Sr(-\21FW%MK,DXoJ[NF[PE-3(#s&Zo3V+(WFC7A'+S*1gI]AoF&2]m($!:i,6"HKg^3HL^1,mZYrF1QmhOk25C&/;mWY`L\(DSoK8OY[B>edl%EOUgF^mOL(p\V!.Q[/VY\OPGT@XN$irSB$DSY&.?Ru24/o>fE^N2M\R9mEtI(nVo1g2OStr,8UQ[G#SJDU6%t_mOY?ceh`XCUN+O%G7*fL3dfagp/`9;eV6/Ub>-UH>-Y3gVXM3!LMO<Vl>7kt;&ue?Vqo5&s6=P438;UP4]I4&/*m5<3]sd`Z@5U"iEDYXHHOoJ</57s%iNdq.S*FtBZWnFZX8ch_iL6mOMd,V_3o"aOI.,VE.lPVD<JRctPl@[DHqu]_D5[s%\mB3Nl>ZXT9D;R0Y188FS^Y2>Fgs>8o;ro-%Wt%(#FT5'X\4&m]+&n"WXL%\5Fh#Odg0\uIE(unBT2^S]aA>[*qMXWXrGKL0<JNZW+59/*\3?M^GLbXVN;ZUr\:'Cs5-)TQn*obG%3aA]p?^kp0bNa%>N:";>>cS=kQoY)&l>TBhC%'U2R]]02*.Ls/DKDttSu]c:A0dN)n#F:-kHaRAE32$GKuWgk*H#B)m(#14UrE>/%3o"map0&K>eV<O4?.N9:^#Q[`WXdqQna3)4>[)$>c+hTiE32%Ri>G$F<JRc]inRUX\;!W3l.LEe%X2lp_LlFYQYkNn=:;a0+G&N^%kQ5+LK7[+AHsBcZi4G8tZ,6BCUV#/OM7?F*D7k_UHJq(@S<\,l=bP*7#@%QurjJ'?J2,N]c>FKjmL*N/h9rpt/l&e4ihR.8!D(;<%0H'/9$P$6(11f:o8H-kY17RO?Su^3p<M2AAdqq"S/sO'$XUAamQ*/m:krP<kdSmW]oH3EOI8itR/L><`IWZEJFD9KmCTDl;_]@=N%p*B-#X0CV;JrZ1`[fG(Cfkh'W6>&cuZB8MFYK#-Za)t]$,*lMpUg-i$5Pqf(&3Elula+IXIBd//l8t(g<ql*d6(g"CBgSJP%0Hkm%,sM5.JN.jQg2Q\;Jia>LBot,B+/cg\[^C%kU=gZpMKV";_:$Bg_aDo<mo%;"Q:r[]r9i-#kg@?$^U_abBQ7Y0DFO4Qs*cY&>WB7_%cUlot\@4Ot&PsEFU7A$^(2[!`9dd>0^lu+36@Hut5-<3n710j6Dg0HaD00Lbm(lctVepM^eaOJehG1DiX^\MudU&6=A9m1A'jEXt%n"o\S`beMA#%d/r-K4VplUf3;Ls4-]40K'`So)*5qVCP37`3?-T;>oXG,ot;(at<3NH`7'l$TKg]0%$lHrR]FXD60k-Z?/WCc-Wa%#n*[gej"7%`uGk.ghjGN\&Nb`E'$Z,hAk.qmRODgpNTL;Jl#MiVsa'B<&]*cFDoIdU_MR_ijC(PjVDIH:Vj`oL#,t;n4olraAqP1%Cs[$lZ,$(ef1PcereoPV3](=77n.U6-WueV-B?`WXkut09$sW=ht7a)*i._%)]M)Q+u7d)QF\,Sb<0MLNn&,p2YC`d"S4=U07lL/%[a%VQEa"qNAFn)AeSn>`r9G79A"CU;IVVn(`]0Mt+1M1QffNhH"&;InIo2]8O!eH&fMcX%ONiIQUgNP\ettL&Z-Aau)_qsUn#R%f%jea14ihTCgU6j!FF#moK;B&GHln;fXk.1,35J(6TCT8f>Zi<q-b"hfX)0`$$IG;Pih>PF/TDdQ+r.'b0;ZqOs@fo`5Y<1snq)MMs%ebX0$Xm,gWP[*;AfVHd5;Ui#/j0K)T3kPmm@K"KQM8m!&9muh?;k$B#3g>q*eT1!Ff!0A&WM]GLC>&.tP59XX19,ZWrj59:Zq8;5%--XBP]6@2s(,?c+@o$jMFa+pLQ4(0aq<AI>Z?$r]NEWd*ZTc#l[;<@tjDD.s/N9RhWb&fQV#B'(e[)u1<Ul6FjdS!d_SMf+S*JW"%XnSs'_LA?U)p\-Ub"grbg2"_@9Lk[63ig&9+Cs;2oXJYlW,+Cm4ZchX-bSo@K&-!"Q9lj5)tfu9`nS_"-gi\RpUE6KkLH12BfL.L%L*G=e[g?ln^g3P2ZDN60d;d'>_hs1i'\aC)!ULk.":,mcqSgj]$Pq?%XPnRTf:=R=$(MdKgRbErlIInb,jckLI?jP("oEJMZdG7A%PudJfa2VuHQ8IKt[M4^4+a#?LfB1JlnNIc()/lpK#Q>pGlH9d/Gg/nZjY5<-V^JZNK3\sS?2k0Xa]Tlh.9?==iDO0$fA2h@RQgOT%i@F1;G$*[NV=MA"HG(S!?#sRa>A^N$mZ]T!&Cg7/9FOnsl&:l#N9'e?cGi$;rG(</c@D@W])5Unna'm:f1/W_DYs7n4Bl@<AGo9D%>Z=I7M$8p:EK.$rq"j>46MO(=B]jXRUSj_QnSI]`Wnn!Z@IPcL5441N/j=1*URq_1\6iEF)ZG'/HfE/kL%i1VEuY/TIXFo/,I(#7%>&6T!Of:EkFWPnmDSPX]h7II"r`PG&i]ds&WHVT["#9f@Y]a7I:(OXiZ'=j@>b7R"il<k"O-gl1r?g\hVZ#\:VtYRa)-D8-4ibPq%;ArTI'M2grouBUF(;Di@YMD@O,GDTZS,2o*#\@^WSe/FF7u4iROZ7!d\'sSgb!2FCl^+rQ2l?!5bi8$Q$:,\\pOqSr?"CNkG:u]<%Z(#t$4#uG]_<5;\S?.'LLZ2mt4mg!R4lu\9Xm*WTjLB#8E-3JS%ID(Z(M5IF_SVR"bWWsH8@K;ToEOJ#@TGIa:dM]@aQB[`<]J*$%">%g2dj]_3G'Q!@kgSG[8X6'+VqThoBGqW!<:"+72!DN_BBd9S0bnIfhoZ,nRBmtYFIKjf-HOg):G*\rVX!R$K('MGc<eMhKK>A3%g<n3-*Hf5/2Ek5J)oOe'Ok`32Lj\p.r#u?Yjf"TmT<8SriUY&pKWR8B>e2Np5;,]"WkI;Im%?3mp/<Ke(T+o@7pUAqJa?+T*KKt;%>TS"R"n+Y;P>V'G+J20](>Y\Li=.jDiW_Qe\\fuSFe;nt0&4:8UFAKpY$XWVqB7<!K6LbfS+cEL96X\;X4[<`3.7K=aj>7K#E;mE%Qh*]7[*94r`F5ItMN[bho>dN9;ttb&4R@$72$5,R#NC*:r57CB6LT<L+(0cIpJ6[>:4>6?nmjK[bRPi\i9W86=0#s/*q9pqoM.V$%L!NkbQd6d8cF0.bM#6o'p+helW??c`N8>ujXnR_c2b6n8k[QB?A_^5Z=F/pU]`1MW<11Nt5't`FU0@LK^=O#(DNGseZK<KGmmrJH%`Q'p/]6\jTBme7G4Ai`r9LPJ:O$:;'hK=2R]W1OHm.kjan%I9cEb@*(V'o.@MQK%sL\Ta$23dMFpeR$55>e,\dkTMQg%3&5UX1&h%K\8sVe)^cY?Piuq\0pLUk_QA2pW*3ni;T;gJ!P^:n:I!b`CBs&9k4kj^i^:Se=#Mr0co+o4r^Xth"T@N<.)IS-:%.n-_?%U^UUpe%SsZ\sHgf4NjYOl2ZIY)F3/.>J'BLl#lO+:#iM&X?-[q]#VUS%CP3EE3a)(#1DPXH,*1[6r?&1\YPl$=!1KWun!-LZ&"mm-&DbWk&%mO862&e(`!21dMp,)GHuY;Q\.n\q],+$>lXS^+[NiR&/(@%IOJR`2dThmj"C=<d@iS6n4soM+<2<='Zti?h3Y++OjI!&GE\5KL:m%#\\%s!0+N";r=YVBFE0p>;!a5k;0<<kn6(!:`f&Br3Y>fW6j+Zq$%FeW#r^$d9e([Y\LFY&/d('9FP4q8P'=gB9]u`:LK5h*(;u<%n_I8mjh@ooO2-@N`BZf1Go3o6PY]WB@mic]HtM.NK"MXeg>XA!_M?`V67I<%4FH>k@]MGU([g=_qOf"LjZ3!h:YqM[X8<UjK.A(_%knu\@@.cf3T,F48!4!YB`9m%hI&2MtO8sLN*#6Uj`;B!oE'48Jq6%6m1Gd;5'hYrO2&Nhkqj"Eu!EiJq,f6/'7befLlo[0#BVV!r%;1JF7d$ZsKL(T`.n)Z>YCs`<[K_YQ9Gfl'#X`p1?EdiHEr8O2;++jO^iI_q0]cq40@^KS#BBmCMQlSsLD(`9TWbdhi6q%$ZFoim9%Srn^%'Q^UILX=^Op'A?O!I,+q1Ii]fO'^^ldkL[S0j*IogYfD3,1QMO)+^d_Ce4[mgqZjho$T'*;hXXJ*eu(O%@L%lN:[nL'g<M?%bRK_*8TaICR."$f9n^-6Mkf%U$sMX0i0VZQDiX3&*/?<E%YiUM*efsWj764q,C@Wsp3%[E^1*GDCjfA]0DD2+:6547edkA)%ht5X%<:\i+!I6*D;"3&<]Mj+r'Y;cg'c5/+dUG$%>QUVX=VS$Yo.ko@U@J]"."!XbCI74K<)ePhrbhMMedD.74;Ws(A6m\(!GI]hZBaV4%MpRu9^ORpIj(`4Y(\j$O_8?#L'3*UKB.Mq,9bs]&A+f!P60&.(10,TuDs8!_\KY85i;<'TJ*6CD1dC_)Y1(uGqO+J94=.Q6nc<h(%j1[UI*+p/9qpHY)lkS.opU=7UV9,P1#,Bd`o4'd$Gb"Ur=3d;!OdHlqUsYJk4.UV^@<!pu1#f2Q8G5F=`d;pUf'^<0J=Ksj8G)\r%5a>gM5MV`8bn=--Qg9IuaXt<\[H^(:*#VO\_*<cSK0SWRKYm'ND'T!_*rCXPG?s82K4tM5B'+[YLe',hF>Z*@+$;AdfF,^T7dC+Z%1Y7F+"69LUI"dt&ejX(I`&*=+lEDS?iBim5*-\Psrkt$)"FD\A>(\Kt4!'a2QoJ\fDbjFbm62<]TDTnVNqp0EANgOo'[*Cm^(\Y_%2=fL1+5^RV'd;oR,EbHmEddUbq/jO38(QrU(9!+q&X\N2crK.3D>+CG?iT-lB'&VmikqOeW9(MGVh'/m&"HYq6oP/G+EKLMbC(E4%U3ZhYX56:`r7gh-.kc:!1fO[$8NiT9"btuWO%B"b=0gdMf@)QsFsP%]8Z'MT*d]i</D)^:'Y2&aHcQZ>\`8e@d'u?HAgS%2H.b1>%HVnY\LA9:9nDsRJ'$ltP6>1^u]mRD=prS6=r%T>`1lPQSBA4coYXYYPc1Z[[hEFtD)M8c3KeI<Uch&ia2/GUQ(dM(-8?5U%=<%n1%EBa:%Wfqi3hD[u?KVr?)="*#[<ij$X0iS+dklBM/S#qhI&f5m=(2SsN#?;Q5q1Vl8BF^?Ma!;UQ(WVE0P_qt0D-m&gI`$hC*rKl4%3DY)>Y-,?#>bs\L'r^0iB)nrpd*t"1%l[Y$\SkLD@WkEV'Z1u4T/Us7Y$\iU7S8T&+-6ZP%p7lJo[setOBXp&&eZ^V]mB:X#V.&b%CB=*XPS$!<@Ao6@a=a&'Vu?iGE>Q$u-XL(j?CILDbs>k`>9$1C0Cpf>E>qkGYdb1$q5a-$+/q0`[\<b#Z<eC+>ls^`l150Vh;S`'%Xb,)m4D$.-cu"9g.cPm<gsO_0Q)V"c]l.oJ):B&^'D';>(YOQDXa#iLi>`>-X`fU]:VoNgI`BgmCp"Vt;("*hS1KF-Jek#u5!lG_%;;_N_Q0j2oL&S.h9?a-j+*7qA,t>HsH8OZp9SP41pd92<1g_jB+!39tZH%3-&GP,7BOnEud&q&B\60$IY-hiH$>%;jSYtA3FYs"Z%Nl(<a,=oq6eY#k63UfMP6TS[&.OM32A>!n_12@0_>0mYCB.D!s_U"&+BJ;Yd\(:V!fmd=TUZ2PIY%688hB5mWp)b5%[/D#ChQs0_%-+JXS7dI7?MG?+dLt5oX'h6l8emBX:;t;9B=s0(RH<5#9bsc!CZ)#X/Nn^3CS'<doRHF[3QNEAQ)X#)+:V=m".jjB'^dsoO6/R#p%ob^$IRNI&7Oa%^JSYK-/#%4GFHh]JK._'`Oi`c27%,QE]Rr>:gLY/-3L.1e[s2*Xd5*^)Tm_PPR"PI&kWigg9OA44;T8>"FdH@[(%`XPql*6hH<b6Je6ee[2;&RBL;`q\%JaRimm5MZ&V(;(F5_j9k]$$ce/Spr5N9P6PMiP>uSjsdH<RIn=@9RE%tSF@:!-_-f\qti3;%)!cWMQ^oG-+[\eUnYdA,mXZ>s:;T=GaRkk?d\m:0Y4*`"FX1EWc'IXqE#4MoGrs-20(7e^X73TR@&6lcCq1*@'3ajkLPQjO'[6uX%=:h1:@A`QihfW/O#)jZ2US#QhfmPY)BQLSM.HO>gd`uGC`Wm&aN7lMLM(1QTC$`+1I\n_.bdHK=SZ?0;NCJUbB9(E"4/$_Y%9m66%DY;5h>>XCa5+o1;g%d@I2<@@%mV%?-3]qjjkT*]1^dl-=";?]<?Tu.;hp^U&MM;7enB'&h7B*<7rn0FqYO<ndKZZJ.5OG8[,$Q)5%E5]_Loi-]/J,93R@<h"DI61f>H4IJO1&@^SoG$>J$n8iZ?1F$_1Lh?*T,<r8B5po=IR;CIIj!3%RD-SMYg9*aE,qLI4e3s&VXT9b%^/JE"8nma%).UEaN<';Ok[n'%8,4LQ<ebf?@\IjI5Y!E?TOji)rDP<ODC]!_SiCfEja4[5*7J"D?OsTn2oM?qB'dX/iMjS?I/CcC%:7g@YO3bH]]C#\eUI7TWpGY`kd=DGs"[p%;#Lo4D-mM:/;n?fR;S\oOI`3F\B<_nBaS\62!U9-r(*o5o`ous[OEshCNM#a[;"0:!%eL;7;Z3^/A2S'RZHI509aS"?"F)8Z#?2u\o)]"(k:.n$<WtT3_1&:YV]\TV"e4"Z!M_*c-5P4BE](oq5fc>>+Q*KPfCc)WRio>8@%Y"P$%50Dm>bBSuko)O+GUX^.Enk,7P/tPah;BJmhUnU4.8d;(8$0-!$4^%O3!i^c';W[]tUnZLq-!CDSB[AO<<!QCumG[?ZL'Ee]%GmuTl?ka>(E?.l$HJM3:Gd%A9&SPu"TU$^kDZpdCb;MWQ##Yr'SSlVa-@rP!380Pi;:9#pHeJ_*:LcE/OQZ4gA2U=&OMt1W0*XME%Q%`$E@l?%e9%?8!!f^@R3O%:"5!Pm.eXqaQk!:6Njm%?ReMXN/U[I2M^$'`Y4((6VerqP.:X#^KPsNVr;Y'8kMLhSQe[Hp+qfHpm%JZ><S/P"dlHKlb5hgnh[bA!2`;t,Hh%BTrfHSV[FC9T<UCF3p$2n%NT@OYNdmWMJNCghI3*'jC:G#bgRoF+rl*nmW*ie"p\gTp/3%n@V`)OokD"X-^)>[pk?'QNGl<l8UmR[%k;p$ELjK"-_^c8X)C5$N+rDqUGEmOS?Y\Q7ndILt17sqfgqU)kF`-H686J4[e&@/DBF'%Eh>2#=(qX.g)YM1kKq6<NB<X=^Uei(d-LC\hd>/irc\kN<HEH@JTkhdp:LN`k_m%,,EY:$pTto_HXdjj\,Z0#i=9D%S*hEXmm+@=%RG07KLQi81(SQk4R3d.-)2@>%n<`R\!Xj7VqWHM$GBpus%hEpQg?ZfVCV8lU]^$%3V`I&<5,Ubr;=anN,V'R`a#HQ*")X:8q!_Uf%RWUDHTk<(=n,$'O<A/L6-hdlBi/SW=.q._@,dPs-q9*Z!MDg^qb/RZKoO5-JG&*<:]QCf!naqK<-IApi:^uX>(V9RfSV,'R*tA;R%`XG.@*4A,InFeu=SM=?L*s[LDB%"g$oKGaAW*_30e#c)i^lN,7&fNqNSj$"7'qZT0.[VHe)e6,F0jl1i.eNW2G.r-h]L2QL<Jh;O%LR&l!pF)&$e)eAdWJWWj>MdcJksELZ)c:qX5*Ye9i3.aZWRMb:4%XhoeaAcDT6jj%KbD?Q,)n/:8]:Bf-D9HI@b*dl8pE^.%.IWp%<^;[MKM?e&l:+i1ftV6-S980GBTK@l?--_OV7F5a2"_[sq07:_,rE^-$muFs?F\9F].m3O;t9%FnG1jB!8N5'P1hT!9i.pA6N1$n%B/d=_.%YS+%A#Wp,m',/7QRf/p1,qLEWO,Fo7O]d>ApDAo#CHF5;ptp<!oS)U:OQeOelk!K?_0d&6;^^St7@fRK#V0Z+I)iJj)iN%ld?_u^@Rc)H%cVRqigffE\)ctC4@[ZPL6...fSuq!!3)_"h;X8P',gY:%#^iAeqK=Fh=3O4-l&9/SOEa/iHKHdd$gbGND.`lDf[6%BPTRQ.FYIa^[Xq1_(am1/o&db/h7G!8dLtaBC8akXJJksFJZEMO!AAje+o?5TB.EZP*/7^S.kt2";=;uBWA[(:N;/c/oE\U:XI"A%aiiB7"40e\W#)%p!'.qImd`&-M-q99,5ng(5B4]$QD1al7ucPp)(F*]aA;!(=2$URltS7)GrHn/cb+tJ!3NqFA3#*;Lq]RUnpIjh%"ck%*gjt8uC`#aN*`q<!,F%QB!jkWrOC'G,d0"&8+2qH^%hgI,'D:\5*S?<(hq[s%b,al=PWsEu@(Ldt-j$`d*__YLGjE+dgqM^C%Bl5K/CKZlj$EiE'38IUk9:q[V[?r'+,u07%mD\-$;+VK@'1Y0/'+('OkIs=Rh>`KKb4Tu0Y9$Yr+j3%TSbRnC$nT&MOt]>o;W0E0%S`@H/o&)%>ItXh"Tm%hYA^"&CAdm'(du>e&?m)e;:i)'h>)qTjjOAquMR`-@n9e5[WI%OWg*+,`UJ)C4b;';*(U@Gdq'Ic*o7s&i%>U=CH$1iC1?F-Ur_S,$(eP$4\ZdnnKdC[Wnq>(\fg]1-FJ2]T)2FtkbeMCD;Z$5Be04:7>&!Gf6A>01#WERF$7Ji>S8$ehOR)07[%F\;:th-rM]]fCr2WFe)I]VMGjiA2'NTMT,=a<ER]=a8?nfbJbkeGJnar]<5"Vnm'HYq$r1ii&CipPjLei$CkhAX>i?fuLkA&[Zb]%YGqC:@n5D6d6brnj`V.lGskYH8<=s"Js&FrRTPZ.pbC,I070d;ikV=j(RZ+#1@.T/1r@6F7Sh`O_M?KY<[<"9+@D_:b$"+#Zj"P`%-$%#XnRogu5NOFR]cb/Ns2K7B;TO91?ISsE2]*a#:C>ENU6M6SPHDa7'.Rte]2/k4C43i.qT>HnrRP3:CdA*8A@`X>GFpi(jXC.\%H4Mjlnq1OE6q'Q-nPCjr=jZ#\i@4Q_D4D4.GVXulnRTFNQnM"hV$QOsgCl&ubL>ZC-t_.cOfLK;I%MSG/04rVH5OI;f*$PTlo[EY%JJI0$]J2`YSV%q_H't>9TW0S#!6o+n'BlsWCabX,+&U;!'h[Eab[NhODkNVN^(V/3@=^EQRoM0[8<Wb`%%5,>N`2>@UTDsJ+Ph2c%CXq]q"upmIEi``\m`,W-m-X#tI#7;3+ar7>'#j=F8A3;Ta<dl@7'FtYP3j>50^3(19EgGh-"W<WqrqN!VI-Y$RsonS?_>.?'L$'.%DRC;=rRHA<'E;d$B!W9g6U+sFeunh0P;(-<oYrcCGm-X[g08)=/o=o/:G,%B!3Or<196[/#&$fh:/qso$hfrf^"4lDr8J?HY9b,i%4d$!)'it%H<ssU-3g3'7U+6biTrpe'!\e\[:)*N`qogR&cUg@0C6pZ11:jCLB??DeG60.^:NPq--VuZaP_ulDr0-npa"LVaMgY!-%Fq[Ke6Rf:+4+674rpE_Il)L.$]G?P\pg!$c`k>_DU";KMo4mEua^-[i2t5Y_)ZH`;=,P*ggPsW3%Y`L2rGb"W*]Cr\DmlK'-`%;4%;Xr6l@gfB^r4&Wd`TpiWjN@)FbY[(KF2.QrQUf=#oHogYg^+o#3lrE*-aV!YC-'GA'IQ0'Xu`_P\-rFs<\.)/Sc2<\&_>[pMU\Co%H+Qqe.8S4q@#bo"Sh>Rc9*Rjs--Cl)_`:IJ&VIg^!rK()Z@-2rhV$Z?GCUWe]T4HO(AY\@guO17e`IAjY=M!4I`ZrV\E$`j<N5g7%jtijqFsta&Hh,+M4=0u[#q])VL>r*\R*MUBn92R2T?3Z.FaP52&KUi^rOq820>0$m>h(V:l8#<'[%=3XT,'0s9YVi(jI,#@Y'?.q%JjQLc580&KoEb"3/EX>#4unb:l@/YMC5q74E,7X^M_Yt3Wu6@N1'+e>0WCl-)5m]"WT.Mk3FdIk3^aS=QF<ZZ+TiQ[I/fEQZr92I%Uk!A@h>RaL_=.RuNi\m\D.T,sDGHPs&mE'AQ)*Wp1\].$&9aK8^;,Me@rfOfJOD]!Wfkm9MpH@f+MLcLbnmOjQRQ9M@t&Hd,g%N.%/Wf+[NG9c[3%r!;a,^M)#MDO9AQ*hZ&eEOU)R;i)e6JuNUsP,c9sZ!pJ&C,Y2KYRZJii#)#COPinTjq)6?u13ru;7`P3)9+'ahCW%:lMI;5&%t\<lr,oMcL.pq@nsTCg*3!1[t=<V0gjX="<nbIbc2KJlCBV6U8"3JG&okXV85@1kjU-!&%(eM`!RM[1a(RT"+5_M,Ie8%aR?DcF&D5F<qS>8=[m`h!C?T93XI<L$/]3LO;6Dgf#B]p1CiJ3qUie>W#ghDW7Jg$3lpArs5luDNA?jDe:rm04#+g_^m;IGM*Y"6%9hpWe-Ff7FFHjoX@.pI"d2Tm>G4H]eXnBDo>ZktGW8bK7IpuZm)Ek=)KBmEt<R4:6cdrIq&3`sijPn"6lF0*+O>+[.1GEH+mM;:L%Ia=!DAh;9QO<KNhB%m&&Y,PE=Up8kh;Y>]@M/#I#B\r'CMVEkmG&aA>FU]AW<o-V__tEng!Hq#p0]!GU>.d_U[2'7=3Rgs6hjC#]%P"`<<$RS-]^BRb&>&[$mQf-7TF=BkDpA/YJUYafp$#T<c+4m+V>]R4b1VXRagi(@8n\NX[[u^<lK*6@<qM[PO)A\\&p3_'Tn<-uN%hlZN9SD_O6G]5h_:0qk5>WA!k]*q,>cUpce,#($CKp$+U/!?TfIn#Z-kKi=b-`+jX+cdU,-/^[SHaBOupg&Z;A^o1&h;A9'qj#nu%btd*Q!*;qA:s.cXm@=GWiP?g9'[&0(<\YSa%HYCAn'@88EKuEi&p6a*R3E4k_6T.-[l0a!:TiM9,m6jUn14GOeU45_V>aW\eokE9%?&`;8&\4-a6eY2hUP^I!BEd6:GY-/X49Mb7aA$iXpDN1R9OZfpSBhP%&rk_sHej*>#2'?[HitN/H^J@@bnEH>0s*FSf,kmkR&W>j%TU`q`]0+jFU*b?r87fI^]"7aG;+*e&$<`It%TtV77Du[e5ZO!pdHfLpAk<DNNE(M2lOe6:YU,iNrTBasqNt!QDS_&6^L.uOOmT1b%:VGZXE[r]t,QTm05kM4-$&u&aZ&G/&=%)O/cHl@];:(e.SYZoAS%1$+W<Z\$4W1t(4J'Z/E2HTJ*4,\9TG7$VV6@E01LSSH\NRY,%Si*f6hH!6gNY["^<Y$\AATD,Bf)ipuDj9U"mECQ45,k8`dPiH/7n2tc#h&:;bgWTHcqnd)0#DGaoiANAYR)cAAbs<H!4!82o%#5'%N]pE*bb:$F1\C4[j[#@[%<n29Y&QT[Ou8jS9dWBbm"X?]?<c4u_]*&5WtT?,R>QK8i5>do,08^a@;1S,--s*;9.GpDM8>==9=sd;%q%m=:&';4DPrn@)/MEhU[[`fJnBKIOA&,QL,"&^>g(t-f]+_RZUIqlST0R&"21!+5h@@;C];K%Hs+p[6QQPO[0qnB:M^hGB8NJ::%oN52)SG8<UQ]ijjdk#t6S^8*m5rh!dkSpmr&9qu=YdK8?9R,i.$@!)Cak^RpU>Pk%(YX)0Kj#S7O[-[L3N25K4#IR20,a"<d-!GS%LJt$A29!;mZPS<$W#I)$I8d%]O::.Tp;AJ8(%6%7e</sRfCR>-WpuN0Hnncde,?@ZFfh*LCU&q\k\`.SI7VNonV>I`M0P$RFG=48%:!:d#n6U+&pThl^U<L4LU8Jt1c$$'+]<L'Eh;`[X]_?0O@CjMH;PYg[2GEkT?0_"5DO@I$O@PqXhC_7iQ-.Zdfs"nr\*_V=:\/9J%b72qngSOHA,n@CWeT4842GEMH9?Z(.Qb#;f)l@u;/p4:?.Xn^0.V`@c^":$Qf@>6j]OS>Rd/@dI]%6a$HeL*+\_(bdmW#j\p%7T&%>kkG093mi&VIYH"U(C#*Z1KBDZH=;R3DOQR.t\+QIfIWe980CuI?^;Cj5]\VdQ(<PHCG.4r`-,^ZJ7=N8,Hm"c12>'[sOu9Q\Put%?h-&N?<,.YHA)Q!L-7_HX1^hu&V$hS.,.Epr-OBCiF]Gu$/Q<mX6Ml<*oufjmll/sLi>&eF;q8T1@iB?+*Ur#*po[K5\!FAjJkP<%:V(2s'/V>n1M$-h(J0.,<j/67`sC)a5GQg;Vs)'&Zn6F(hKZ$J&?=d>W!IM57Ohl-;3^T`),gi&#l1tml^VE:&FH)K8n9;s8qL^N%F[hr:^<f;tSJ0^MQfJT3=o0URRHd[n]f`-:JN*lUq2>7J9Q<82J*)!V''B3".[Z)8e)'4<V<dY$9^q>((&*qrKSM$kg%J+e@d);n%Uh$^H^j?jA/5k6KbCt1k[u^FM1nrue:Zj`tIZF@ug=niPC!6QUHQnadP"Q"("8$cPVC0DmQUd+7UT>OW[ehW'HO)!#(AU"k4]j$(%!FL/d#]S[3@uPg<'-RD5O^G(qStH/D2i_V_ZW@@Tn%;X,1'q/f.,XTX3^f67_XaYX_TmLq?r("o@H'mfdk9dspFp0nEh\DfI&?[:%(HP(1Z+P!SIUg[33ha[\Hm\@$pO#;kebMlu%sG-(1g-Bq"T5Rg':Q#JB6&:kI6s.Jq+NblFK[&K=e3kaqdTFbTulSI-Hn,i4e^!_%HmVNsHTe(El?jqhqIuQL1g-BqKP[%ST$V"j4qm/Y4eL)3FZpJa[f(^1]@*i?Ei&^Br#_G>?q::H;Kln""L,_D-4(!3-1&W[8D'8s%4(%Do^\*i@h.k[UP0*U[4_IMb&pULD8lDWhFnqA)B^/ZkWMnMCX"#t!9?NR#2uJgG9u!D\eFtIMorHD,rr+RRd+#6_'?BruBn`F5%opL1rSY*%2e47I^FdH:dX*#2`XC(gZ6TIj=PMslk?mp#8=#e]r6b8ZkMauFKB?f<e#$6X,n[XIYGm-@G4;?lGjO`+n;hK@+Q-Ogo%>9.qQ?0p*34k@/.j@_K3/YgRm<qE85gaTDq5Y^+$DY^qs\(l3tL;W(o(82c.)r5U0-O2krT5l'<XbPg](q_E7`"IFUc/,?H^Mo?;%?m7+:IV\eYIPLN^Ed$uZHJo4d`Y1^24[#BDkBC(7mmfRt]W8S`18cAW_bYUE`B!);dHH)C.'k*0LN+s`IQhWj%3-I4YlN>]H=?9D%UattuaL@<-2]H+9VHs/N+C<j6)t_;ApFi<fe$#[rQ(u+_k''2X^4Oa%o:iC3O,"PsXWlfin\`pHj,\hXS]5AlkFd+-\s;Tk#+`?F%5s2Vr0Y,aoH[[]id:THA?a^PLG4sSN/:XHC2Ujq5Oe((\bqrIj,AUZ+!m9U&oH2#df=-e7I8,k'@;='oB<V36h73lJ\lAFcp:le+%D+n,+X!T]mrYt`RJ(D/UGB8(NH;P]^]WR4D(PPu+351opl#bK;s1+W4Cu:k/0(,b"eZntkRDhT^K!p)QgnEk8!pmD\gR"DUalI;g%.EWbJYO=SU8@X-eiKDD3MsPi'1;GP*H"TLX^4ceN7(Vi_qf^i@c/dj&r7S!O7u`.deTuZ)6L;FX&t]RK>aq9ef\+O+S\"+cp&\^-%n!!;EKTN<#EqOTiHJ..MRY?TXg>(e5nu4Ck]\1tuB"-s3f&ki=hmE:.PDM_@"+B9XLd/8(80ntG9^1HT#;9Z:gh9rBRNB(fjfVlI%RW;i*9@*.99>3tXCst=AF8!'Ra*cofo(oieeq:Ha&/YrHZ0f/-N9bh3LEuUY^FbBq`m!.3A#&R2d+j>1ZhFp3+>u)tE\cm:_YkS4%J]i[,F<oIM5'Mn>AoK+.pUH*)clb0s$L]pd]THX_b@5:(DWpXVAAMJT@p#4F_'+NgFDcT6ITZ;sfVs>>rB0'BD-sHm2!1oA9VXu<%=\6DUld^es\OJ=+G)Zss4"dM`a,RW[gK9s&h&.-'l$RlnT(b%2D,*p7k@6_hWA60AEk"0lgkB482cd'sRJ;q@o][61kgXa2SIbZ_%2q6^+L#t"UU@5S3)Pc>`.kd0_X_S%kcegk*>ddIR`YLqHQdn(]1rT%^];nq]3UY(Jc)mZ?<4a#inXb?L:TLTlniWXb/0;(kF*&nd%l(r+&an?k%342Kgic_-Y`mep=([&6!B>71Qh929p_?mWR#KYuZ)pM>ScXf`Cl4`0=]4Ps\DPno+kS&YkK.g<tH>0!tY?dl)p8a2=%\Y7!e&,G@hpfAe4V\f/@-=0=@cJ?]Wqo':4R(Vl[+1t`qp>MdM-M"-`6EVnYZ=1MlSd[7op@2]@RdJ5Q(Gu#Obq>1;,&L\XG,tJq%gS7d>AXYJs7;O?aoASP#g"Ce[o609@>ePR6DQL"THTMnU=dpu1q2g7ifdscS=0-=nIA3-p2]"9ql5,f=$iDWZX*Slt['W$qHKtL4%A=5ZL7f5=&33/U_WkWJ%C%5CemYY1sV:Cju_\0A4Akm7l7%_>D5nH/jYfn`:[s&>mMW@EEfRH#^RTrYFet\*!gYt70C#nhb>h95s%;K7?@Pu%!sk0,W,\$t-$O1;f+40jk"M[NjE!UEu;D*!qF2.h\qG"PI!p>ko2q!"CG;FKlA#D63OIZr^s>V7mXMdNe7OY?F4V_]aa%28UYPVbgl?jufhC[t5aHB)Q2teTH=R^\D1c^Z9C&/aD:TfuIm[:g7.LHLnH?Fe:nhSISf8H*-t`aJ1'GU%b0[PWg`l5CoGmnB[?"%90[HFp$V@5o`$s]s#OWh3b&-5&aQDfrPXTCHm<01[e&j#"D=YrrFp-=E3<nU40HrT>lN+Wp:Nlg_i*#mZ&Xt4F7kT<cTbm&O82\G%bO,LU!DcbjR_sXAD0*F7\5146=;RLc>eAa5ajEe84^P[=qR`"3_eOoSS,ZSR_h$n9m-:A=$pOpWQQ@W$kmJ%cHZh>iqfj""BQ7[\%p67=opIF\U]4OZ]^Ls^9YF\q.nbMduWQ-MJY4G>nYKD0u\7a<]Gk[b\Q]IL,b]_l<UG924r12i=$\Jgq_JO%:(f_K`91;,XH1i=r%YdQouPMh0@5!ONlcH5G)!V2tN[4_eLfmFMF^A]ZiT0+(fg2([Ja9P@*cL$$oG!B1KE)2[;qmEIKAQY#aD!qR?hI?*<qVnV5D9;_R%JDs%hU3\*\!?^HO(jG''^mCMV2"pDW=7K9g5ohYlme1#p_B1@(7Paeeiabh99t'V;<CD<3j[#WN*o;PBdR<K%,^#Ae4F$`onYV%e%pK6s_PGitB\?1mO#>6rRHr7#`kOXVH]N!q8nFoQe5$Y+-kCK0fqs`Y=03M@?<WNjOW.tbRdJOKG:f<87d^Q/Wqq]Cje,Z!O9=Ojj%ihE4*YKHPLb7]P:NuJ]hrr2>`$cVe%KU44hH*,"\&(a?^EV0%Zs1qlq:HeTe#>a:W+0Q!nfBe!u!,'&fhQQi(J!%uO(Z9[Uq+YO5%Y*Ct12"H\<hh+EPhu+X,Wh\;j&i3fslrPX#1.ucFbEY<6<4`Z_HdL$:rT<Zi[h$UFK>Y`DFYCK-348,Y]Br["\Z6]`=BE&gm?`=.%ZJR*JqNJsB)Dqu\5$6N\lhiKFXBn.3?hZ'DrE*(hXdu]SE5-;L^E!$!d/(OhrT!UX]7rFMq9$;%^X0pnZh;i@\3(Zk74Gi9\<4Bl%KfjhchP[-SjFap\k;V$`Sfn(*bO030k%:F!T`ON4h:28sU425Egof!q(:QYC`8<s%>*Smla!6`!HSNl,J%'4UB'T,GV6!=:">TOM%h1bTBSU:4q`UQZ4e==2]@cOMmbbt=!-!mfr$(&M/3Z(#jbJ2#lh</pD2fN19VdEe6Oh[c:OPa\tR:GCn0;i"r9:*])(X!%%X7b@L%,Incm>Y<Tf,R?/uf&uVT_g.]Bn#,`c_%7^3g];PA[J-89CMEurW7]9XlHQ^ZC:(XHl00"l^:25dT<0pGRI`Ee3uMRN2GmUmnX(O1%`D3b?8Aq-YnG65Hr\M*^dt9q=j[=!7CFlPo>\DHEX\kPJnal1P0Dt1[6B(lOhe^(&2AP(2\_\2o/8."^=2RVDPr*17JmZ_1D@:ks%q(Tf720Nm4Q5%)F2Z'>U@GGG-f1T=">SDK"k#u*XJ")H;@paZ6kX8bj[50If#q^)A?O!;N98DM:Zu<;tT3'ik4MJTJ5C7:XY+1P9%Ajo#&>G8Qoe`FK$bH3Qu_4,ZD7[B+'6[cAbfBm7$?),D:#F]SKB3;V)UMMrrbfJ'rX+Q5W<gNA,IrH#Pn_*?1Ro/-_/:$Qe.Gj[b%:=nk-UP\H>Ec9oI9b7OoR%Ll,3pb)l^&$;"52Es595X)s_%KW1po[lck*&HJln16;:k.N(k>p9llT-Cu?8"1i)fnreoC'k0*8&%A%[F*l4K%,]p[r.><=`:Z#me>MgF^:O(`6G(-9h=:*R[R-Do/"W%a^(9)fGN;_Dfh7_@Vt/lNu^t((.CT:hprtV\F80UV:RKn.,9R'%BZr<i(PBT^0+If:#G%@[6SDg.?]8=*Ts4N.I&=VAq"fL[+[WQ`[iT1R7WBlG0K"`p%:5?mR/];;8t@Lhg-=QUn(`>_+.1s]g,rPS%VF>.c2V@0NeYbNTno;+Eq(g6F4lD,FC`''4(4JanlF:h7q_1,pH*mH(]<RYYkCu#r]3UbNr<LAM5Pp$WMt5:JlH6uADppZ:k@_+o%0DAL[CEM7C?b]@.5G22@QLh+PXf`#<]lf5./%,6*.B`SbV;f-_YqPkDHn/@A^VOTRp?KLF3mrB%0B!*)TnTc#kO/ZICD6Sjd(H:?%ER-SuD;<`C]Q77PO6)4Z$Y0F:E%7J\67OW2ooU/"NoM^d"g0O!k#.48QC>_#c,#f4G2eX11jQ9m\LI\M)(R,gG*@+1&g\[gI3/4/%q[Yh9W@"+0Guiq$B^Xa&5Q95Q:_)!i%J"]3gK'mQRE<2ID(nV:d(tFZ_=&oKZG7R@pJhGW,5AkXDW+4^Q:&3MF0>-VWda'EGo[6<%"1u=uY9Fa&ih`)Gq02F)7-W+i'FrRTN;W(f_//N<G*B;Zg3rZ\1f@[r%\ENdcG)$NF$n.D_M!.k4l./'$/.A-Ejd:/fX^KZ"mI33%ibuISj&it+HMQI?b%kI]73VAo(WYK?ZHBr_+WidipK)$imPd0SV\cJQ^H4@h;0@@4qLa:*XU8dB1/.d;J6PO/+`:O"0<;45b/"!Y%rT8"k[!d.EH#\*#GBFnPk"9E;EOIo7F`$lPmHa$KOV@+\C\m6@DQrLAM>NR:>,T-)IoTh2e,Sn#mn"hr6kK>VrN\gUHmS![C/S?:%Ibp'aa*?Z4,tUf_MQEd(190#,Wp4jUPt<R5M(Z#5J]0):&5,SsrbNAd-aCRP`(GJ:Y%\X8^)4jd_N^YZLBZ"i`YB[L@6)SFPqTKb%Z^&JmRYfL.XO<OL18P:(`miEb[Y1V`Wfe&:R&">J&;9:O@UrB5IqgH-@mWj`a!rD]WX3EBNO>_,KI5KW,b"R-,%XHI8CG;1ToY$i%IPOn-IF30,!(O=b!9k].:%TbjWPth>Rab<rFsGuQM#p<p<Kl"$U9dfe2(;JC7&3uol7J!3bub!?db%0"e`fX;$c@Wd+:Pq&AHgPV%&mC0C#*7+VXfRpYl`cYU$#L]WV#`nG-.4JV[Gg;-X]ZN'9I)?9-*]i^EtZa<6rn;7WR\SI@IH6bFX#[:l:B<;,_C3[#cpjsj-iuj%'Nd\_fd*FpNac0&Y]>K:1g$i]"a)gpHS78D=/'L_8Q/e%X_KmcQh3Y6.]aia\;C0Ea!/B\a0e;pk)"n,ckEO(WbFK04?Bo*,=2\Z%T(3l;\gj/H8d[,/;Fb%e4=!Up!i2JO^kc.$_K3Y'1gCY*(T)2r)lk27<92*=@rX*;U<llHiaYMDC7ElF3SNFO6J&R[7KhL9`6qOn%02b(EN_PRW8umOi!0ett<[Eb0Z^W(4M!3cM#@Gi6e>A0:Meh_*:h&GnUD^+?PsJ!1i7o!H#s+aiM@scO$]U#V?3gjd`g4Qe9>lH"%-f7k(HUQ:K\J#[.l5&t@a_Ar2.Z#0rBu4=q2%`Ju=jh!NM%)."bZ5Qbn@@j<1>3&&=N&u:/YRuF^PQM*2p76tc/%(VN+2$b$$oFs%Z:#rB_)a>[[e'ic(+i1TA_;lb-r"0+==L9O>P`JZ1\lF`^iH\:Ju=8Z"0!2Jb47Qs,h7.a;?O02WL/ij_n*jE;;;m3P:\%,ogB>U%8;T)k40C;PRYF\X@h'/Q!7O]S-&RH.HpHNM#!d-:4U)Z;,VuG\l%spWd>A_jdRGp";KpCnWSt*_+"Ud]*;MD;;oOq$k2hTW7[AfU%N96&IS^?%4a[d@[%Inh'@qodOP@2V2HU=5r9CJ[Y+nZYH'eLV$lSIrYP/N05J<\#cZqMq=>TiZb6t8;WJXJJdLT,8C:tGaK)N,;D%bR5rcgf2*;ECB[43?UkE[KFf&!b:O+NUWr&@Wp8&f2rgKYSnDCP8nR_01f7[jfPmO^Hh#(o!-^L9M>N0`"@ou836/?Pr_Lh0VOc=%UtuB@[-nSY.7k@$,<?&Hfd%_Mkkrj(A.b,;Jp)uA883ir,]S9HrADh'1/1F-`*=:[er)_-]_&[$W"WmXGW7:0(8hMUkDu?[WXXbV%+U[JhZH,O;L4fOB`g\4:MO)oc$j/%,SJ'uH=ZQgdp`X,JojY1#(1PuY7>7;ZM4c#+6%fqI"'DUhB.^*B@kFBf0@+l!1i'jb)$l%/%a;s+7_mTosh\bSSCf/O%)!UIu>!`p>[1ZqJl@b<G%1\"A_cgWq5=qTt6oOBp5lAV+(o]>ZQ?R3g?t4oa>+NUCB!&5b>V=`4jnhXX%6b?*6)m*f-,Z@%`8HC;%*PJM8>:M>G&uM9r$VW*T+#:G@[cK7qJH\["+V8u\i9(-GQX__X"O%`^1HH.ds.LboSC-%+8@T@&X)'3j%&IF*oXai-n,ji1"*1$Y`7%j+%B]4pN6!Z4>8.dOMF<76-Ni],YCG?SpOaAiUdm.I8L_^Ck[$1"m+Do[T,k+4K8jQG_alhA-aP$\%%ege^2;/'[lV6P/Yc>1G;M9$H'4&CJs/$_s82LOj*6t<q8";i0V$+iWVZ6uMWY(7l'.g96KN3c44TVN#VTpI_57-3ij,oL-)*R>Uu%;]T72X@XCpW78'@:0;IH8@qd:r,[HXL@8Er3+[d!!r#r[Z"4[Bj;5@[BIm?!&l@\pJF`WKI"'%X'l(`uXT3u",b;B`d=l"oA$F3W%!c=/H\[c34ms)F<.)62T6c?2_"_+S&l]>VjGH^<&]ag-UO$ZMZ?0\!1MN#+Xjq+Tr:'\G+$u6"`*EI@P!epL_(8[TX`>XRCO40+4%Ora-*dkV5BAE!7G0#Uuo!KUdN+^a?j\SNoSUs7IIGloL*MA1JQYPVe#G?]L@`YkBc2O]NBE5'#N,/=O5Zlgtk8?YOg0"J"5T3q5T%#^3NEUS(8mRm1ApLhTk0ZRk!`LH3Zt4d$rVDWdeujAjWf6oHeH5,"\&M()V:n0k\U`-F,kGjSmAEqoo_e1:dpF'tN'P=`DF0<e@,%0e]c$h4,Ba4`o,+a%06g8G:)U=i8YL0M"KFm!P'265H7Gc^N\bY#`jH#n`<rPF'TV_nsmN`A9rU./P-1%e"ZT4"<WMNQ+^6ko^Qc%,m;eNdXJHBb\Hji%/aWTnt7V\SQfdjgA9i4`1r4-8X`U.=ahpB]MLh&N+5,(TI3$7KI?tOcWkOl"^XDRDT+)s1IdD!QYB;JfJnrO%a<<GFEU[,4.a-1$Y(L4rBPF!/PXtZO(7l%WqFLR>V]gsXKh,`Q?/cQ-<%H.o8:i;<Ks5tIE_;>qS<ApM@Pm%34+#3W%e@U&#6dnd%,-b8'>VP:*RN#c4l=WYWT4@K%e4TE+A<[E4pRK.<<UJXK0`S1rgA2?PGJ4\UE2;%!.L:E8lXC2"0S&2CF[6ohM%86*72DGPjPVTg%=TK3a0";QDHG0M)lM#Kk_l;/iOq/9akoTf)E_C&PIROBk3ftPJi$6`^$,ZGXZ+Q]plc5BA;#Y"+:N*AX"et9`_7G^qB!QPFA2ifd%"-X<F+Gq!\T&gG\^G=U0:H+)+eci0!3Il(%/l#!4P*k60fE']88cAlbokHB+85%%,bn_ZP!K3/F)"F\e3@meZ#gT;fp+e0?+V7>6%DETO]1Q<fUjWGL-=%)CZ6F%&OZ^a-tdkVP.FHQRbJ2>Rf5q%'bNCA@?#F..gFf))ta9'<:*sOF+DIp`sae?iOBk1chPfNnZ,A>Ei%c'B"%@Z_o_J8q=sT6Z6&C_%Y)!d>.e>68j=G+SMnptH=Oe&4f[&m-Ib:%346(d3ai&p.eX+%9&Zf:NdC;IWd"P7fBG$_S=InJW7j%-(7.AqR^tHN$c'F!P9/0TcYg0#gfl66]sh_<G601a:aa@8`<GJ,-N:8TKoAc.SHQ:?27U5Vo'@flM?E7?E0[<kQJ/EG"rJ`29JY=%b/F'2R\nMqA.cjm,SD/k/He<Ga/uJ'g!XF?;(Z1q-E1dWL$QfN/UU';/N)4,rjal/:iU<JN20`TV:esBl<B(oE18hNBH/g@KS-bh%YJ>3s_CW,8Q''4B;JNck=$k"aP-TKB`5SP-P'RTgk3!Kto<TJmdZY_Vs-S\ND\QnERYlfk%2ka&FHh+*L"/3N\R[GG#maqUDkMZ`%cNpTr7M$ngcXjI.60O+Y8N&pbh0Kt)WA$k8!+F!9pZ.nRYU&XOV0`35c+3$XbKbq7R_Y*<k`AKFnas+YQ\d]r=<blq:EG*L&)&L;%VS[79A!-8>KU`I3)/":>'3/@&^LNiBKMccEn5NMZL.m3?Zet``8X&)CR>Smu[a<T>2tF%LE@b?jT!aq`7g2`hT^Y>PO"s`W1.QGp%YTe(XX]K=]k[emXK;:ma)=IJTPNWQg^lmo3i(dR@9?"OE0]*Q;p;k<L[Ah%*kO[nhp&p2qaRVS8_H0p$H?dMM"O,udig@e:JCMQk%kb/CtLlf\-I"TLO*@-5`0R_>(#MKp9TkP1IJMKV3=cb_Fka]P/8DW`4Ypmm,[Gp6LVgmZN5iMj,OTWZ9F#aDEnl#2jM-u*X=r\"\%k>DF3+Bu78;6_&eM.$K!Xe[NVJ>Ph0_$M!?)!.82j?2)./-&'E,qhh"$'u*60/__eO`95dMPiF:):4,T:*O,!2@>9J7&_E/!&.p.%9gg8RBkq@-[f*:J"S7t)7F92/k<LqtZ#bZ$:bM+:2%Cas<:J=tCJ\,<+YpcEs!ItUBV\>e0J-8JO2X(,3H"qTOS?hY2@l]YD.9t=%5sI*PLZQ>t!n[gCA@)J2ZmDu_9Jn9jR#q['`XX7b;po_X5fK__9*+?Y:ih8B0D7Y8!5q-bE:`!I#9Hf76)Xj#Z)K(4-,G58^ftX8%)/FZ')7D+K.BuY-&johfVG_JU-?Y`Xa>s)>Mj(2,,(YC]H7(MZ5_<Q4Z7,5S0,4L:gEcT/L9IFA\DV>S5[)RTLMViSi%\us23Q-8%,2JK.Eals;E+heD0p'ES9J@u*?8PaEE,lA&KI[*0.UXp&5*4<P?+u'k43]k&(-E+^oH/Cr_Agb%Gc:hD"=)NZYY^>s":;Ye[$b8"%%U!.O]HGiR3d4mr_R-Sh"RFP$2?$oIbS$LpPUM[u5f?7Y;D(81f]bkI7$Fr#K"Q!FP:A7!5e&]QR`IFLbWom4aq-j:?EiS;0kBAK%F2*cjjcU6eZ:YMC.Hn->Mm-2J6;[sQ"2r()A!-&n/\n`XDERJ9"Lh"2dYnG[1*@S2@du)L;nd0>>!-.$.F%hLIL@PJRGl0KZomPQ%\2]d!kUCOdo:cuEQgJMZ`6#gsi<qo.f=/O0nKF9!')/2LXD%3^WBqlMbnE$BNfd\+oFr]$P<p!&%lBDmRY5Dfj*B=J[A'44pL+=^%7_0V#E(j@NVtkea"IXCk#=F2h3(Y)VL0)5_,*?U5gcEp-^n/#&F$Pg'0<.ZFJU;@S;0:+9S(Cdo,#'WtB;D^k.Z,J`)c':7!kJ[3%7j.HG4-f;tpqE$TCq#476\S<0_F0D9mdmrq7UbW$a?O/2,3/$oF(PnlI,%ji`]ssZ%p>&mGkXcZGZ;hs+A<=-E/j]ga1+N!*b;AQ%R=a0;\,jV.k!+.#8DG&r[#pO6,k<7<:ZIsR^0r?td[W%N;'IL\oBA1TN"3QjLXZ=*;4=NCga2c]jM&7fdlrGTiYDTR$/u;@%--=E%a22[P3g,6$g6M%e(R?e-38rbSr;XBk/un(fW02B>,)bn5J;1:pNeGX9H_mC(&*ENdq,=CZ4gccK0"-Od7ME:,Lpk95RW=-(E]X*2%<>g,[ZMM^&j7&:2=f^o@XHADU\spJ(1mfp*RaC7Q1pTmTm92W<6YG$Oh_%ZMg>rn"EIgbf7]qd#=CWb#M/ns5&bk&=H"Z[,\FUg=%>u\j.hHf"9Sc/Q!_@u&N_8d;P=9%O`7D8ZuFC4UNIDHZF*6"_G7d97cq(f:]lTW4IjUYQ)G9skHEQn0S7n5'3"7Har3bp[0Ve;Qi%b/s&0T:P9+`PprpiEbW(5,k./FDcr(:A+=AbJ/SS,?aVhJ`aSTb5VHGEMs6~>%AI9_PrivateDataEnd