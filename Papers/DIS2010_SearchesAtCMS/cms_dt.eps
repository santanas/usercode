%!PS-Adobe-3.1 EPSF-3.0
%%Title: cms_dt.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: CMS
%%CreationDate: 5/24/07
%%BoundingBox: 0 0 636 91
%%HiResBoundingBox: 0 0 635.1666 90.6998
%%CropBox: 0 0 635.1666 90.6998
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: cms_dt.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2007-04-19T08:22:11Z</xap:CreateDate>
  <xap:ModifyDate>2007-05-24T07:02:47Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>40</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAKAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9C2l5Y3VlBeJ5anW3njS&#xA;ZGMdkx4OoYVVJmboewxVEwHS5yRHo1XX7cbR2yutenJGcMK9qjFVX6rZ/wDVk/4S1/6qYqvt7TS5&#xA;pZIm0yOGSNVcrJHCahywBHAv/IcVUdbTStK0m61H9FJdC1T1Gghji5lQfiI58Voo+I79BirCtM/N&#xA;z8tZ547XVbT9CXs4ha1try3RjMtwiSIY2gEymiSqzVI4g1O2KpvN518kWrvLf2S2WmC9m0yLVJoo&#xA;fRe8t5DFJCFUtMKGOQ8mQLxRmJApVVBL+a/5NsJD9et1ETrHJzsp0ozxPOCeUI+ERRM7N0UUqRUV&#xA;VRFl+Y35WahJpsWnSRX0mqyLFaCG0kO7StD+8LRqI6NG2zkNQVAIxVKpPzh/LW31abTL6xayltLu&#xA;6sb6SS2Rkhe2ljhjZvS9RmW4aZfT4g9+VKYqm9h+Y35S6hd2dpZXtpPcahO9taIttJ8csZjVhX0q&#xA;KOU6KGagJ2BqDRVJ1/OT8r/q920tt6N7au6jTZIIhcyCMciyrXitUqy8yvIKStQK4qmC/mp+TZja&#xA;X9IWixrAbvm1rKqmASLEXUtEOQ5uOnb4vs74qhB+bH5ey2urT2mmtcnRbG4v76NIIQVW2dVeLkxC&#xA;mTjIr0B6Hcg7YqiofzO/LEWhnv0GnvHHFLcRT2MpESXCPJCzSRxPHR44XYfFsFPKhVgFVk35r/lI&#xA;lqLuGWK6tBR57mGzkMcUTCYiVmMagqRayFQtWYCqgjFWv+Vu/kv6bSfX7eiOI3T6jceorExgBo/Q&#xA;5ipmWlRv9Boqyby1qXlLzJZzXuk28U1pDO9t6zQBA7IFJKclBK/F1piqbfonSv8Alig/5FJ/TFUk&#xA;tZvrcIuLby7C8DlhGzPApIVitaUNK0xVbLdwQyGOXRbOORftI89spFRXcEYqs/SNn/1aLH/pItf6&#xA;YqmGgalaXF3d2sVnFaSwRwyyGB4pFZZWkVfij7gxNsfHFU7xV2KuxV2KuxV2KuxV2KuxVgvlrS5i&#xA;0c+oacdRtLqw04WE/wC6dYVigHqRcZGUp+8+OoHxV9sVQT+U/NpgtLeblPaafOlzbiKVY7gi6Qi5&#xA;jLlgP3DO/DehDL3WuKpr5Ii1Gx019Hnh+rCOZorS5aOGOVoI41VTKsBeH6wQh+z+yORUfZKrJfUE&#xA;eo3cjdEtoWNOtA0xxV5DD/zk75Q1XRJtRHlDzRP5dKvHean+jY5LJI/sy+rKk7pxUH4sVZ5oGh/l&#xA;l5j0vT/MOkaZp99ZTwx/ULwQISI4giIo5LyUx/V0Qqdxx4npiqI806d5A0rTr7zF5h0+zW0taXd9&#xA;eSWwmYGMikhVEdy3ToKnFUBZfl/+WGvWGla1p+kWjWM5g1SzljgWJZ0e2aOH1Y3RWZDDN9hx4bbY&#xA;qnFj5C8kWDwyWOgadayW/AwPDawxshjcyoVKqCOLsWHuTirrvyF5JvCxutCsJy7SO5kt425NK4kc&#xA;tVdyzgNv3xVJfJtt+U3ma0TWfK+nWE8Gn3kqx3Edl9XMV2hjaUoskcTBqxxnkB2Hhiqdv5E8lOSW&#xA;0GwJIYH/AEaLo4Ct+z3VQPlt0xVRP5cfl+QAfLmm8QhiC/VYeIjLiTgF40C81BpirEfzM8x/lR+W&#xA;mmxXGt+XUe0195LK4+o2lu5dWAkk9fm0RZDQVpWtBtsMVUPOn/Kn9IvfKIutDW4/xVqNvBplxYwQ&#xA;NFK8tEj+tGRk5wMLjkwAavWmKs6fyF5KeCW3bQrEwT0E0X1ePiwHq0qKU2+sy0/1j44qx/zDpH5N&#xA;eXZ9LstZ0jTrWXXr1LPTU+o+p613K0fFeUcb8KtHH8TEDYb4qzLS9G0nSbc22l2cNjbs3NobdFjQ&#xA;txCcuKgCvFAMVRmKvN5NXiuG0vy1JeTWdoYHvdTFoJTdzRNPJHFDGYA0qRs0bmaRaFQAKjnXFUku&#xA;rP8AL7VdN46kNL8teXbpVaxgNhai4milYrHcSXF5DLAPWoXQIhbj8ZfrxVdodpp3ljVH0e7trHzD&#xA;5XgjD2+rz28R1GFI7l7S5+suFCTpazKiyPxRlRuR58WxVmH5fw2wlku4YIoBqGnWN4VhiSEcZ5ry&#xA;SMFUCj4Y2VfHbFWZ4q7FXYq7FXYq7FXYq7FXYqxDyg2lJ5O0KWa1a0D6faMlwi8SxaBD9uAlgT4N&#xA;Tl2riqZrqMryi3kkkeJyVjMK1mZgP7qV4/3cbGhOxG3XjTdVXvI3lt/q7D6pExAghi4mZnBqtKfC&#xA;vE/Fsfeo3xVZDKJPrbcQhWzjR416KyNOjKPYMpGKvGv+cbtR0vTf+cdbm+1aRItNgfUHu2lICen0&#xA;INf5ugHfFXjHlo+aZvJ/5d+VJdLm1fQ9auNUvRoAvl0ldQ4PwSNrpyBxVgzBerV26qcVT+78t6lD&#xA;5P8AzG0HVdHTR/L+mWcWq6V5cbW7fVZtNv4yEqBBL66JIkrNSVOPzOKquraXLFp/5V+S9L0OTWNB&#xA;1fQ49bvfLqan+jE1HUbiBWlL3MzH7B+MRoR1+GmKqN7q3n3yj5H8/aRaRjy1o3r6fHb6WmsW+sXW&#xA;kLcS+ncxh7eRpoklHT1EG2wJarFV6dpH5Xfld5e8+6boOia7LDa+ZdFuYdU8rf6XdR6raywurXj3&#xA;SScLdiNw21aUSlcVeS+WLaLy7+RGr6vo7yaXeaz5kTQ9Z1eGWQPFpaNXarFUoWKlgKkNucVek3Hl&#xA;Py1+Wv5ufl7a/l/NLAnmP14da0xbmS5jurVYwy3bh2eh+0wZaL8O3RqqoH/nHX8v7bV/M2u+bbvU&#xA;rsHy/wCZdSXTdLjZFtfWniEc00qsrMzNHIqjiVpx74qyL/nJ2ztb3UPy3s7uJZrW58yW8NxC+6vH&#xA;IyK6n2KmmKvMddm1Py9598gfljqrSTP5X81Wc2iX0g/v9Ju7iJrff+aJlZD9w+zirJtF8p+V/wAw&#xA;m/MjzL59vZk8waDql7a2FbuSAaVa2iA28kUauqj4wRVgQStetcVYzrenRec/J35K6x5rt3vNU1bV&#xA;otE1C5kklV7jTlvWjVW4stC6GpkHxnryxVvU9L1nzX5z88Ld+UZvM0Xlq8l0/SJ/0/HpA0e0tKpD&#xA;LHDM2/JI1kMjVUkfPFX0L+Rl/wCY738rtFl8xXEV5qkaSwyXkFzBepKkMzxxv9Yt5Jo5G4KAx5k8&#xA;ga74qxXzReWuhS2GtTCWKS60q8gtdRheSP0ZrKdplglZGQCO6WdhVjQOi9OoVZZp35Zflulnp+q2&#xA;cQNrawWklnfLMyobS1f61ArMCqvCXIkYNsxCs1SoOKsL1O30W0WPXNEt/wDnTPQv9AsbZKmK8/Sw&#xA;nupnh5VLRS3yQW8AGxqePwcaqvTfLunrpupNpy0K2Wk6ZbgjpSJrpNunhirIsVdirsVdirsVdirs&#xA;VdirsVeF+SfPPl9fK2jR3Ou2NuLO0srS4sLrUomlL8EglkCSNNx4sG5KVpw/Z3BxVmh84aEun3MR&#xA;160nitaiEQX1mw/dqssYJIhei1AqrV2xVP7LzF5cEnNL60hUj45J7uGWVh2AYSyfD33b6O+KrtEv&#xA;tOv9W1lbS5iuoF9BG9GRXVeaMzD4CaVLE/TXFXjEn5ef84u6Z5w/w5feWp7TWIruG2t0ml1CeGaW&#xA;ZPWioY7idOLJvSUDatRiqe+a/Pv/ADjvr+h22hazbjUNHtnigtYbexuituzB0RYWtkV4z+6MZWI1&#xA;B2IxVdpF5+QOg+Xb3y1pekmLTNVhuZNQsxBcPLNBb2r3UhmmmJlosaMFDPVW2FMVSZNQ/wCcXp/J&#xA;I0G40500DT7qotLiHUDNb3FzK8JKzVadQ8sBRiknGuxxVNNA8zf847aJ5Ov9K0ywFt5euzcxapbT&#xA;WtyzSPbW7XEsczThpXZY1PH4jQ7Ag4ql/kXzp/zjL5Mv78+Vbd9P1Fg0V0zW9/LKVSRUaMS3PqcB&#xA;6xVOPIfFT54qqafrn/ONOjLrDWenMtn5jijbV+VvezQzK4knRPq8vModmYcIxvSnbFXafqv/ADjz&#xA;+VnmGddK0WSy1xzJbxmMvd3DhGaNxGs88kkKtJCyfEE5UqKqQSqmHl782vyC8mXN/pmlzzaY2o30&#xA;11egw306PdtKbaRw5Ewo0kJUcDw2xVF+Z/zD/I/zDcwy+YGnml8qz22o2jtBfRelcuvqoVEQX1DG&#xA;q8nDAqo3O1cVQ3nTzr/zj/qWseXfMPmASXWq2EQ1TQLpIb6N1RLsRRsyxiNTW6iCqswpXwUk4qkv&#xA;nnU/+cYtY80PfeZtKNzrSXDW0twkd1GJZreNHYSLC8ay8VZVq6n/AIEE4qjdf8+/844ec9G0rQtW&#xA;t3u9Khj9bTLeO2vIEheFxbGBGtxGyupYAop40IPQjFUP5ql/5xc17W7JdZsFu9Siitoo5oor+ImO&#xA;SHnbCZofT9cmOHivLm1B4VxV7lpum6fplhBp+nW8dpY2qCK3toVCRoi7BVUbAYqx3SU0O70zSZLq&#xA;6jSfTJ5Z4V9RFPNlmt2V1PVSkzVH9MVYFffl/wCStc1nUIdBbTrLRDLy1P6xBBcWk12rj1IrWMNB&#xA;IgoGEzpIFDfCnxepRVkfmfTo10KbVb/W4r670ONb/S9PswlpZpNZETJwgDyu7MI+A9SRgAfhAxVl&#xA;Wm3lpd+ZdQltZknjNjY0eNgw3luz1GKp3irsVdirsVdirsVdirsVdiqE9TVf+WeD/ke//VHFXepq&#xA;v/LPB/yPf/qjirvU1X/lng/5Hv8A9UcVd6mq/wDLPB/yPf8A6o4qtP6RJ5G0tidjUzNWo6f7pxVa&#xA;Y700rZWu1KfvW7Cg/wB04q2RfkkmztiTWv75t67H/dPfFXcL7f8A0K2+Kgb9624FaV/c++Ktene1&#xA;B+pWtQSwPqt1I4k/3PXjtirvTvak/UrWrbMfVbcDx/c4q2EvgKCytgDSo9Vu3T/dPtirTR3r8+Vl&#xA;at6n95WVjy24/F+532FMVbZL5mDNZWxYbhjKxIJ/544qtaG7YsWsbUlqciZWNaAqK/ufA0xVsx3p&#xA;rWytTUFT+9b7JNSP7noTirjHel/UNlalxWjmVq70rv6PemKuWO9WvGytRXrSVvCn++cVWz21xOnC&#xA;fT7SVOSPxeQsOUbBkahh6qygjwIxVW9TVf8Alng/5Hv/ANUcVd6mq/8ALPB/yPf/AKo4q71NV/5Z&#xA;4P8Ake//AFRxV3qar/yzwf8AI9/+qOKqsDXTcvrEccfTj6bl6+NaolMVVsVdirsVdirsVdirsVdi&#xA;rsVf/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -90.6998 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 90.6998 li
635.167 90.6998 li
635.167 0 li
clp
[1 0 0 1 0 0 ] concat
420.782 44.8345 mo
420.615 44.5845 420.364 44.3335 420.03 43.9986 cv
413.932 37.9009 li
413.764 37.9009 li
413.764 44.8345 li
413.681 44.7515 413.514 44.7515 413.43 44.7515 cv
413.264 44.7515 413.096 44.7515 413.012 44.8345 cv
413.012 36.0621 li
413.514 36.0621 li
420.281 42.6626 li
420.364 42.6626 li
420.364 36.0621 li
420.532 36.0621 420.615 36.1456 420.782 36.1456 cv
420.949 36.1456 421.032 36.0621 421.2 36.0621 cv
421.2 44.8345 li
420.782 44.8345 li
cp
408.083 39.9888 mo
409.169 39.8218 409.922 39.1529 409.922 38.1509 cv
409.922 37.3155 409.42 36.7305 408.334 36.5635 cv
407.832 36.48 406.245 36.5635 405.66 36.5635 cv
405.66 40.0728 li
405.911 40.0728 407.415 40.1558 408.083 39.9888 cv
cp
408.083 36.0621 mo
410.256 36.0621 411.258 36.7305 411.258 37.9839 cv
411.258 39.4878 409.754 40.2398 408.334 40.4068 cv
411.258 43.7486 li
411.926 44.5005 li
412.177 44.8345 li
411.926 44.7515 411.676 44.7515 411.425 44.7515 cv
411.091 44.7515 410.84 44.7515 410.59 44.8345 cv
410.256 44.4175 410.005 44.0826 409.67 43.6646 cv
407.999 41.7437 li
406.914 40.5738 li
405.744 40.5738 li
405.744 44.8345 li
405.576 44.7515 405.326 44.7515 405.159 44.7515 cv
404.908 44.7515 404.741 44.7515 404.49 44.8345 cv
404.49 36.0621 li
408.083 36.0621 li
cp
401.482 39.9058 mo
401.9 39.9058 402.318 39.8218 402.736 39.8218 cv
402.736 39.9058 402.652 40.0728 402.652 40.1558 cv
402.652 40.2398 402.736 40.4068 402.736 40.4898 cv
402.318 40.4898 401.9 40.4068 401.482 40.4068 cv
398.643 40.4068 li
398.643 44.1666 li
399.478 44.1666 400.981 44.1666 401.817 44.0826 cv
402.234 44.0826 402.736 44.0826 403.153 43.9986 cv
403.153 44.1666 403.07 44.2496 403.07 44.4175 cv
403.07 44.5005 403.153 44.6675 403.153 44.7515 cv
397.389 44.7515 li
397.389 36.0621 li
403.07 36.0621 li
403.07 36.2295 402.986 36.313 402.986 36.48 cv
402.986 36.5635 403.07 36.7305 403.07 36.814 cv
402.652 36.814 402.234 36.7305 401.817 36.7305 cv
400.397 36.647 li
398.643 36.647 li
398.643 39.9058 li
401.482 39.9058 li
cp
392.878 44.9185 mo
389.786 44.9185 387.865 43.1636 387.865 40.4068 cv
387.865 37.566 390.204 35.8951 393.212 35.8951 cv
394.215 35.8951 395.301 36.1456 396.22 36.48 cv
396.136 36.814 396.053 37.1485 395.969 37.4825 cv
395.886 37.4825 li
395.635 37.232 394.632 36.3965 393.128 36.3965 cv
390.539 36.3965 389.285 38.3179 389.285 40.4068 cv
389.285 42.9136 390.873 44.4175 393.045 44.4175 cv
394.632 44.4175 395.802 43.6646 396.053 43.4146 cv
395.969 44.2496 li
395.134 44.7515 393.964 44.9185 392.878 44.9185 cv
cp
395.217 47.1734 mo
395.217 46.9234 395.217 46.6724 395.217 46.4224 cv
394.298 46.4224 li
394.298 46.6724 394.215 46.9234 394.215 47.1734 cv
394.215 51.6021 395.301 55.1109 397.64 58.5357 cv
399.228 59.2886 li
396.47 55.7798 395.217 52.0191 395.217 47.1734 cv
cp
415.687 25.7027 mo
408.584 25.7027 402.486 29.0445 398.643 34.1407 cv
399.312 34.8926 li
403.07 29.8799 409.002 26.7051 415.687 26.7051 cv
417.774 26.7051 419.194 26.7886 421.116 27.4571 cv
424.04 28.543 li
431.309 31.2168 436.154 38.9029 436.154 47.1734 cv
436.154 51.4351 435.236 54.6099 433.064 57.9517 cv
433.314 59.2886 li
435.486 56.4478 436.488 53.69 436.99 49.9312 cv
440.249 24.7837 li
439.33 24.7837 li
436.907 43.9156 li
435.653 35.9786 430.891 29.546 423.455 27.2901 cv
419.612 26.1202 li
418.109 25.7027 417.356 25.7027 415.687 25.7027 cv
cp
406.496 20.606 mo
395.301 20.606 386.277 29.7129 386.277 40.9078 cv
386.277 49.0123 390.789 56.5308 397.891 59.2046 cv
399.645 59.8726 li
401.817 60.7085 404.073 61.1265 406.496 61.1265 cv
417.69 61.1265 426.714 52.1031 426.714 40.9078 cv
426.714 35.8116 425.127 31.6343 422.036 28.1255 cv
424.374 29.2115 li
426.129 31.6343 426.965 33.8067 427.633 36.814 cv
432.562 58.2027 li
432.896 59.9566 li
437.24 78.8384 li
436.071 78.8384 li
432.312 61.7945 li
431.727 59.8726 li
427.884 43.1636 li
427.382 48.4273 424.625 52.855 421.283 56.5308 cv
411.341 67.2252 li
410.59 68.0601 li
400.564 78.9214 li
399.312 78.9214 li
409.253 68.1441 li
410.422 66.9742 li
417.44 59.3716 li
414.182 61.2935 410.506 62.3794 406.579 62.3794 cv
404.741 62.3794 403.488 62.2955 401.817 61.7945 cv
399.144 60.9595 li
394.632 59.5386 391.29 56.6978 388.784 52.939 cv
392.293 65.8052 li
391.04 65.8052 li
386.11 47.4244 li
385.525 45.3355 385.107 43.1636 385.107 40.9078 cv
385.107 29.128 394.632 19.5201 406.412 19.4366 cv
406.496 19.4366 li
406.496 19.4366 406.496 19.4366 406.579 19.4366 cv
445.095 19.4366 li
445.095 20.606 li
413.514 20.606 li
417.19 21.8594 419.779 23.6138 422.286 26.5381 cv
419.947 25.8697 li
416.354 22.4444 411.926 20.606 406.496 20.606 cv
cp
415.687 68.6451 mo
422.286 68.6451 427.633 66.3062 431.56 61.7105 cv
431.226 60.5416 li
427.466 65.2193 422.203 67.6431 415.687 67.6431 cv
414.182 67.6431 413.514 67.5591 412.177 67.3091 cv
411.258 68.1441 li
412.929 68.4781 413.932 68.6451 415.687 68.6451 cv
cp
409.169 67.4752 mo
409.838 66.7232 li
406.245 65.8052 403.989 64.5513 401.482 62.0455 cv
399.896 61.6275 li
402.569 64.7193 405.076 66.3062 409.169 67.4752 cv
cp
379.344 12.335 mo
445.429 12.335 li
445.429 79.2554 li
379.344 79.2554 li
379.678 78.8384 li
445.095 78.8384 li
445.095 12.6695 li
379.678 12.6695 li
379.678 78.8384 li
379.344 79.1724 li
379.344 12.335 li
false sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
f
0.2555 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
0.612794 62.9888 mo
0.612794 62.9888 15.523 62.1656 16.939 78.8804 cv
16.9678 79.2183 16.9678 79.1929 16.9678 79.1929 cv
-1.24952 79.1929 0.612794 79.1929 0.612794 79.1929 cv
0.612794 62.9888 li
cp
@
0.4088 lw
0.608887 79.1929 mo
0.608887 79.1929 65.9507 79.191 67.189 79.1929 cv
67.189 79.1929 67.1504 79.1529 67.0357 77.772 cv
61.5845 12.0372 0.608887 12.7925 0.608887 12.7925 cv
0.608887 79.1929 li
cp
@
0.612794 40.356 mo
0.612794 40.356 36.2881 38.3853 39.6763 78.3775 cv
39.7447 79.1851 39.7447 79.1929 39.7447 79.1929 cv
-3.8418 79.1929 0.612794 79.1929 0.612794 79.1929 cv
0.612794 40.356 li
cp
@
0.612794 53.2193 mo
0.612794 53.2193 24.4844 51.9009 26.7515 78.6597 cv
26.7974 79.2007 26.7974 79.1929 26.7974 79.1929 cv
-2.36817 79.1929 0.612794 79.1929 0.612794 79.1929 cv
0.612794 53.2193 li
cp
@
0.612794 62.1275 mo
0.612794 62.1275 16.3082 61.2603 17.7984 78.8541 cv
17.8287 79.2105 17.8287 79.1929 17.8287 79.1929 cv
-1.34717 79.1929 0.612794 79.1929 0.612794 79.1929 cv
0.612794 62.1275 li
cp
@
0.608887 71.5044 mo
0.608887 71.5044 7.67188 71.2759 8.34278 79.1929 cv
8.35645 79.3521 8.35645 79.1929 8.35645 79.1929 cv
-0.27295 79.1929 0.608887 79.1929 0.608887 79.1929 cv
0.608887 71.5044 li
cp
@
0.602051 79.1929 mo
0.602051 75.0181 li
0.602051 75.0181 4.4795 74.8462 4.84766 79.1929 cv
4.85499 79.2808 4.85499 79.1929 4.85499 79.1929 cv
0.605958 79.1929 0.602051 79.1929 0.602051 79.1929 cv
@
0.0238 lw
65.92 78.3628 mo
65.8858 78.3374 65.8345 78.3326 65.8008 78.3541 cv
65.7413 78.3931 65.8047 78.4605 65.8389 78.5035 cv
65.8433 78.5123 65.8433 78.5376 65.8389 78.5376 cv
65.7794 78.5718 65.6983 78.5503 65.6431 78.5162 cv
@
66.0308 78.397 mo
65.9922 78.3931 65.9498 78.3931 65.9244 78.4312 cv
65.9029 78.4605 65.8985 78.4986 65.9156 78.5337 cv
65.9415 78.5806 65.9966 78.5757 66.0391 78.5679 cv
@
66.1582 78.3892 mo
66.15 78.4058 66.1412 78.4273 66.1544 78.4439 cv
66.1797 78.4654 66.2266 78.4566 66.2437 78.4273 cv
66.2437 78.4234 66.2437 78.4146 66.2437 78.4097 cv
66.2266 78.397 66.2007 78.3755 66.1753 78.3892 cv
@
66.2437 78.4273 mo
66.2476 78.4605 66.252 78.4908 66.2437 78.5162 cv
66.2349 78.5591 66.1714 78.563 66.1412 78.5337 cv
@
66.3033 78.3931 mo
66.3331 78.3931 66.3584 78.3931 66.3882 78.3931 cv
66.3926 78.4478 66.3711 78.5035 66.3628 78.5591 cv
@
66.3545 78.4732 mo
66.3711 78.4732 66.3882 78.4732 66.4053 78.4732 cv
@
17.7925 33.6573 mo
16.4834 34.5298 14.7793 34.8418 13.1998 34.8418 cv
8.62794 34.8418 5.88477 31.9532 5.88477 27.4019 cv
5.88477 22.7256 9.33448 20.066 13.7193 20.066 cv
15.2364 20.066 16.795 20.419 18.1876 21.0215 cv
17.9795 21.5416 17.855 22.0816 17.751 22.6221 cv
17.6055 22.6426 li
17.3145 22.2686 15.7769 20.8555 13.6363 20.8555 cv
9.8125 20.8555 7.92139 23.9517 7.92139 27.4849 cv
7.92139 31.4751 10.2076 34.0313 13.4908 34.0313 cv
15.7354 34.0313 17.481 32.7012 17.8965 32.3477 cv
17.7925 33.6573 li
f
0.1703 lw
17.7925 33.6573 mo
16.4834 34.5298 14.7793 34.8418 13.1998 34.8418 cv
8.62794 34.8418 5.88477 31.9532 5.88477 27.4019 cv
5.88477 22.7256 9.33448 20.066 13.7193 20.066 cv
15.2364 20.066 16.795 20.419 18.1876 21.0215 cv
17.9795 21.5416 17.855 22.0816 17.751 22.6221 cv
17.6055 22.6426 li
17.3145 22.2686 15.7769 20.8555 13.6363 20.8555 cv
9.8125 20.8555 7.92139 23.9517 7.92139 27.4849 cv
7.92139 31.4751 10.2076 34.0313 13.4908 34.0313 cv
15.7354 34.0313 17.481 32.7012 17.8965 32.3477 cv
17.7925 33.6573 li
cp
0 0 0 0 cmyk
@
34.7095 20.3775 mo
35.25 25.5108 35.8316 30.6231 36.3926 34.5923 cv
36.0186 34.5713 35.7281 34.5298 35.4161 34.5298 cv
35.0835 34.5298 34.751 34.5713 34.4395 34.5923 cv
34.086 30.4151 33.6705 25.9263 33.3794 23.8687 cv
30.9688 28.1705 29.1817 31.4957 27.9346 34.3638 cv
27.7061 34.3638 li
26.563 32.0152 li
25.233 29.272 23.7784 26.5704 22.3653 23.8687 cv
21.9078 27.9214 21.3467 32.0362 21.3467 34.5923 cv
21.0767 34.5713 20.8482 34.5298 20.6197 34.5298 cv
20.3492 34.5298 20.1207 34.5713 19.8711 34.5923 cv
20.4117 31.2461 21.6587 22.5596 21.8663 20.3775 cv
22.4068 20.3775 li
24.0694 23.6817 26.0645 27.5889 28.2881 31.2671 cv
30.2623 27.7134 32.1744 24.0972 34.273 20.3775 cv
34.7095 20.3775 li
0 0 0 1 cmyk
f
34.7095 20.3775 mo
35.25 25.5108 35.8316 30.6231 36.3926 34.5923 cv
36.0186 34.5713 35.7281 34.5298 35.4161 34.5298 cv
35.0835 34.5298 34.751 34.5713 34.4395 34.5923 cv
34.086 30.4151 33.6705 25.9263 33.3794 23.8687 cv
30.9688 28.1705 29.1817 31.4957 27.9346 34.3638 cv
27.7061 34.3638 li
26.563 32.0152 li
25.233 29.272 23.7784 26.5704 22.3653 23.8687 cv
21.9078 27.9214 21.3467 32.0362 21.3467 34.5923 cv
21.0767 34.5713 20.8482 34.5298 20.6197 34.5298 cv
20.3492 34.5298 20.1207 34.5713 19.8711 34.5923 cv
20.4117 31.2461 21.6587 22.5596 21.8663 20.3775 cv
22.4068 20.3775 li
24.0694 23.6817 26.0645 27.5889 28.2881 31.2671 cv
30.2623 27.7134 32.1744 24.0972 34.273 20.3775 cv
34.7095 20.3775 li
cp
0 0 0 0 cmyk
@
38.9688 31.7867 mo
39.7793 33.1168 40.7144 33.9478 42.3355 33.9478 cv
44.0191 33.9478 45.2242 32.5557 45.2242 30.9141 cv
45.2242 27.0484 38.7198 28.7525 38.7198 24.0562 cv
38.7198 21.375 40.8394 20.066 43.3331 20.066 cv
44.3306 20.066 45.5362 20.3775 46.3047 21.0635 cv
46.0557 21.6036 45.9102 22.1856 45.7437 22.7676 cv
45.5362 22.7676 li
45.0997 21.6451 44.1851 20.9595 42.959 20.9595 cv
41.525 20.9595 40.3404 21.9156 40.3404 23.3912 cv
40.3404 27.2149 46.8868 25.6768 46.8868 30.1036 cv
46.8868 33.0752 44.5801 34.8418 41.754 34.8418 cv
40.7354 34.8418 39.0728 34.4053 38.3663 33.6363 cv
38.5743 33.0337 38.6783 32.4102 38.7613 31.7867 cv
38.9688 31.7867 li
0 0 0 1 cmyk
f
38.9688 31.7867 mo
39.7793 33.1168 40.7144 33.9478 42.3355 33.9478 cv
44.0191 33.9478 45.2242 32.5557 45.2242 30.9141 cv
45.2242 27.0484 38.7198 28.7525 38.7198 24.0562 cv
38.7198 21.375 40.8394 20.066 43.3331 20.066 cv
44.3306 20.066 45.5362 20.3775 46.3047 21.0635 cv
46.0557 21.6036 45.9102 22.1856 45.7437 22.7676 cv
45.5362 22.7676 li
45.0997 21.6451 44.1851 20.9595 42.959 20.9595 cv
41.525 20.9595 40.3404 21.9156 40.3404 23.3912 cv
40.3404 27.2149 46.8868 25.6768 46.8868 30.1036 cv
46.8868 33.0752 44.5801 34.8418 41.754 34.8418 cv
40.7354 34.8418 39.0728 34.4053 38.3663 33.6363 cv
38.5743 33.0337 38.6783 32.4102 38.7613 31.7867 cv
38.9688 31.7867 li
cp
0 0 0 0 cmyk
@
1.5331 lw
1 lc
1 lj
1.0752 78.7281 mo
1.0752 78.7281 9.0044 61.563 30.6509 56.523 cv
43.1192 53.6197 55.0435 46.9185 60.4952 40.5591 cv
@
59.5049 24.5337 mo
59.5049 24.5337 46.2173 40.0923 25.5293 52.0259 cv
4.59766 64.0982 1.0752 78.7281 1.0752 78.7281 cv
@
1.0752 78.7281 mo
1.0752 78.7281 9.77393 63.9507 27.4156 64.9458 cv
41.3213 65.7291 53.8521 60.3062 57.772 52.2027 cv
@
1.0752 78.7281 mo
1.0752 78.7281 7.97461 66.8091 29.4649 71.648 cv
48.9136 76.0279 50.1446 70.2984 53.211 67.0054 cv
@
0.8177 lw
1.0752 78.7281 mo
1.0752 78.7281 9.0044 61.563 30.6509 56.523 cv
43.1192 53.6197 55.0435 46.9185 60.4952 40.5591 cv
0 0 0 1 cmyk
@
59.5049 24.5337 mo
59.5049 24.5337 46.2173 40.0923 25.5293 52.0259 cv
4.59766 64.0982 1.0752 78.7281 1.0752 78.7281 cv
@
1.0752 78.7281 mo
1.0752 78.7281 9.77393 63.9507 27.4156 64.9458 cv
41.3213 65.7291 53.8521 60.3062 57.772 52.2027 cv
@
1.0752 78.7281 mo
1.0752 78.7281 7.97461 66.8091 29.4649 71.648 cv
48.9136 76.0279 50.1446 70.2984 53.211 67.0054 cv
@
0.511001 lw
0 lc
0 lj
67.189 12.5865 mo
67.189 79.1929 li
0.603516 79.1929 li
0.603516 12.5865 li
67.189 12.5865 li
cp
@
0.7 lw
0 0.350098 mo
446 0.350098 li
@
0 90.3502 mo
446 90.3502 li
@
/1 
[/DeviceGray] add_csa
0 gry
%ADOBeginSubsetFont: Times-Bold Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2007 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Times-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 69 /E put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 120 /x put
def
/FontBBox {-228 -408 1779 1295} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBBBA1CBC846D6875CB85192F5DD7C77104B04
E63A1804586BB1AD> |-
/space <1C60D8A8C9B8707C25> |-
/C <1C60D8A8C9B6079F6D9E7D2984CB9E45AD7AD973F3A23ED340C5F97AA799
33572BD8BDBBA41F8F5A7452CE8A17E51707E1EC6E4E31E611A6F74104676233
A232D3FC1B2247E5ED09546EC68BFF79CA7A4CBB1814CFD40E1464AB9F7411B5
B2AEB2C62FDC5A6A4D871A1925E362C687DBEEDD33788150D629F9F783B3562E
97E19F79F6080DA502E28611CF109CFB9B621ADE1737D2F6A3E8C2> |-
/E <1C60D8A8C9B64EDFFB9634030713458B32B53B9E46C8E7F91D7496219A9E
2825851C44CC2F3E3C9E972FFEB9FC01FEBD27E4ABD1FB7F0002A94932CF5483
879F677690D85192405E9C1AD045BECB4CB2C3B0B8770515761158C1CEA38003
DEACE1683B355C64D4CFF0AD82FF2989FBDA48AAAEBAB25F43B3216A5986FE68
826CA1B8F596BBB444F53EFD2D18D57FACD930203D999AE5B2617A5CC4EE05CB
B9> |-
/M <1C60D8A8C9B5D6EF2DD0DD677665AD6F93211B52E63425D7EE67BA357C0B
235D1ADB33D04B68ABE40805B1D80F684DCE76DD10A26DBF8CB9EF50A982C7F0
069956D34761BC81D3F3B1045370B3046F8908527F38BE77669240EE1900888C
B8E7DBAD0C0D73BE8322A1D9B4594FE8321098006615E915BE20173878720FBC
CA3C1669E7879A0954B2A8D209A2FF626BE901BB1448141C27C6808460C6D7ED> |-
/S <1C60D8A8C9B7EF327359836F8FF2578524976B2F2BAC8F5733BE470D9816
37FB8445157087AE11DA78F437C679F3E324444EB4F3B94D1C392A6A9BC5F3B6
805E21589051F9EDC405CC9BFD2BD9FF116F16C0C5FD1FB9F6D3CC5F8E777B78
04411957BC162616EBF2E8B026C5F4535A6B36FDF073144FFFE769C7F21ED671
59915A66B9EA872ED96228F1E8BD93AFE7ABCC07078333F07739D4E6E26C6A35
45A2870B688A16D2BF496382261A833AD3FFAED6D26EA6D9B265B15BE9C90066
3C2FC26B5BBCA9743986A105B45580BDCE6B83CC2C0487E45368FAA4DC0BD299
CE8FF02EBB31616D68CDA4D98E6362F82E2419F146> |-
/T <1C60D8A8C9B64EDFA7469B8D044AA27FFD4B2BF05190F49B2BCB53F435DE
AF2D2B573D7A93E7A9B5EBCFADDD57556F36ECF1EAEEE36391F0D882226958E9
27D7395CFE505676CD0D4C1D753DD384E07EAF386B98B87FF35648AAF9F7B3F0> |-
/a <1C60D8A8C9B7A73DB94A513D63310D115235E6D4A077A6A21289C2D0C0E3
4F47338E1E2DB35F1B0B76B5B472D7E0195BEBCD74DF110242E699155FD6066A
EB492856AEBEBE5A1325C2FAD314B89C26EBC0EE2C84EF54DF3F8AF7BD7AA6D0
658144BACBB9946CD7FDE73BBA0A78F4694C9D232EBC1BEB00B2901F3BC1E276
D89F8FFFC04367BA964194855F87BB1D08436F2AAC917013B79137EEFFE7AA14
4C1C40CD10836639A1B3E41B5F4974776F0E2069E942AA0965412C9FDD7B6406
C361CD76DDFBF9959E3CB5F06138EEE4D42C4708785616550353699B10532F02
94DEAFA72A4657A0CF689571F1AEF088760C4C06ED694CE818CC6BB117B9512A
B19C9E2A638E77143009BDD5E2B3834CE024364A196FF20F3EBE4CE5329BF9> |-
/c <1C60D8A8C9B77FE2CE887CBCF1B648EA2EFF7B0769C3E57B14D770927AC3
07DD8A0662A921C7245081987D784A9651465FAE5A17AB9A72AAD3403C821E75
D86997030646C6C5A7C62BC433A843B83EF68FFCCC96F687DB5E84807FCDC7ED
C647C7DD7B9BBD03FFBD84A855D3D8B43E5B8CD236DB97ED253B5A1BAB021C22
72095F35651939795482DA86A4BB9D6D0BA80F60B89E728E60F1E470078B4FD1
34454F781AE9056DC534DF927A06> |-
/d <1C60D8A8C9B7EF322B9A245BA007CCCE21E347B331EF98DAF90562899B66
BB19223B34B93FCC5A217CC8149211D51B78932A402613E91A35393373C192B9
5F913E51BB0347FADC848701B79289C9103E041CC7D207C3C709B76F9AC342B1
CC663A6D80AA6648BCBAE0C1EFC7A203508F49D1DF3B9E27209A5C7C5FCCD03C
0A3D04D3EB3402080D2C957C2B75DFBF12D3DD7DCF823916034F92FA02C898D8
896057D1A939264B82A173E1CE43D17DC7280B612738C5129DB5DFDD757FDD5C
7273> |-
/e <1C60D8A8C9B77FE2986490791C5870084E5A199A76A7AA608F5655608CCF
2BA636952B5665B68BA1FB6F5D5C5CFEE16033DFEC56AE965732B4F2917932A9
2FD00CB57E849E83627A0EF030CD8E206EAE3238DC898C1C1A8A1A5921E18C85
DC765882FC0D513E264D45119E97BCB082AFDECBC6593BF68E42681D925776CC
330E4CD74455690488DDB5D6D07A6E4BE9C2C69ABA2668E8BA> |-
/h <1C60D8A8C9B7EF3247BFBC504398F567424F3FC64EF68678CB3BC9F1875C
5BC6ED30E9B59839E15633EE7D040D690778246312C545B6790D1D413398B5DB
B2A4E2D28E90BB09BB2CE82E8F6619C8F68E7711B51220765B158FC30D865F0C
B960989E13B0C72E1657A85AF4CADCD7945750DEB854151ED0FD1BFAFDED3594
0FD07ED4F4FDB57E99A2F3ED82E5EA7AE1DE24A59BA21B12577891ECEC41916E
22A532324121B0FFEBCC86AB> |-
/i <1C60D8A8C9B854D0C48723CFC72B20F502063FF7EA73BECC1370B5BC856D
DC0DF88F24762736FAEF4EBA5B08481BB495A74B1CDAA4E2682AF7F63DC37449
9DA6D091794F8498AD142DF75FE5FB35A180FE832E2BE4A3404A38EF01444AD3
B7C2E4603085415F8AFF4E3AEC011C581815F3E49D88BB4F4C1AED68AE88216A
DB9B718BE1E4DD> |-
/l <1C60D8A8C9B854D098120023EFB487075B9F62A593777077CEE32A5E478D
CD1AD232753364531A97D5794735725D4FC0DB8DE38B94E628BAE2F980060099
5822891F84B12824> |-
/m <1C60D8A8C9B6B41CD713DB53C25C1E06503E9F1B716A601BCDF040655A7B
B545D791EE8990D2E00083A6C727B0B0657220A7EB69E643130A8FE9D7A369A5
2C94567CAA2E34D5777E6CCC47B130458C807A49AC2F3366A4C7591E95A442C4
61B5D303E394F7AE5783DFDE791E0F890DB9CD47A5DB170A16EF7FB1FCBF57EF
26750F3B28985181DD3EEA412EFF4ACEF78CE1E25B169DE80CFF549DD2F50A7A
1DB1213F500172F5118F7E114ACBAB0A589CC94D997F9ED0449D93C8FC5BC75D
5321B50AB3EAABF1ADDF2E927FF09C6B45F8AFC052812795BED3FFB83F37C6DD
641D755CDD27BEA3E7032EEB8EED011ACBB024114D81A5D0C07D0704872639D8
7F57835D4D7CD31DCD5B9EC752C6> |-
/n <1C60D8A8C9B7EF3247BFBC504398F567424F3FC64EF68678CB3BC9F1875C
5BC6F58C16FAB6C3A80048FD071F39C6824C4C4ECD5A48A70BFC9F3948823390
C43CB44EC9B9714F030E274C1D2A276D676BECB03C5E049978BB3188D6AEE266
10451A585D8840FE594D2C3A2BF39A1322FA6E1F881B111F3C7339AD65CC9A1E
7B81D05ACBD0C84B307DC76AF835EAAC462BAFB13A3B64030A4F142D686DC504
5116FB30078A920858949B> |-
/o <1C60D8A8C9B7A73DEF47C66B5639FA7CFEF3DE7B502CFBAF488D63515E8A
CFC5BF4E18508DE4F901AB88E78BAA8DC4DEA95F26F340D06E0C30979A108C77
2383D43B88784DDC98D37FAA80B9D902B98B37E66D5E56FF70E212DAC81DD858
18E6BA9827B7094AE547C516377D9DFDA0F6AB70F569D66E9C8DA7FA2634DDCA
B43E4FAA> |-
/p <1C60D8A8C9B7EF322BAF34F5EE07DE08F7B68AA635508EE64E1CA9096953
74539F4587CCB5122404D21525203F99DF2E2BF92F292BEAE96B714B49DCA671
1B877E54198978F5F094E4897BF2E98D95F04B30A2FC7992E9C4509C576C0D41
B538CAC49F61F56940D8F608C58ABED1B3C0F0B12FDD0FB3ABF4056A1CE4048C
24B9A45EF6253E40DB1EFD72F1501B07080B2D2789FC11BBBF46AC642F50C11B
0335A443FBA116E66110062F1FC7F2E25A89A5BC437E6698BD7718980EBEC302
9A5BEE8FEB1C70C9DF1503> |-
/r <1C60D8A8C9B77FE2A4562A0D98256D5ED40972037B338C91A556E90AF1EA
82068E3A84A9B73613EAE2F253B058BD167EE06E513893B78D00FBD5C73703C4
852FB43D196808866FCECA47B1894316D8603C8ED224E76F77673AA407489224
36AA4B69041CE8EED27D5C3F0491B2A53EE4A3F974984A8FEAC946ED914473E6
1BDEEC8C92BFC1CEE19A097F6C7B3FC4C991D9> |-
/t <1C60D8A8C9B81F2C026CEBECDAB207ECD0D8941D60338278CE0E5E9ACEB5
A3D93DD7D1D8E5D47CB7799E624A4F9BD9E95DB8B16D9A926BA43C6779650ECF
31C0F72258DAA6C97CB39669DCB599A405F0B2FB2A40F1E6403B44090F17E3FB
823B9AB0F540B2BF6D2E6FD87014D8EB8FCA05> |-
/u <1C60D8A8C9B7EF324751F9BEDE69430511FC788FDED3513A377F4A4D91EF
3D3EA6D1902B57A7D17EA37D45A3296C303EC70D4E089F38253699555850909D
B47795F36BCE0402FC10C4215623430238AB3ADE72D46957DD7E4B7EA3F6DAEF
AA7BB6F8B0287037C7550340D457B1F91470832DD02AA9F8CC2378F267B0DC82
04BB84BA24A1907A558E095AD4DA71C6A80C1550E01662> |-
/x <1C60D8A8C9B7A73DD7406A587DCBB171BE46524330C52DDFA12821E8BC23
16EB235EFF8245CB27782651C004B9FE478978D124C5F17679E59AA88DCB428E
D0666F730A08084D682C318946F39C1B82E6A00DFEADCCA0A3CC87C741C07591
7CB09A935687CC14997FF0F5470450DCE8A1C7E893DFFF6F1ACBDD7516C16D67
7594E434E9994C60FAA6C5B6E31853062C17879B5237601F265D49374830201D
097A0F25BF437C6C3160407DBD4DD2AB2F68B91F4CB878A0F2167C7E17275794
40E2581770BFE4C7A116B9863DE0338C791A8299FC6C903AF3325F80CFD596E2
08B814E95046AA7B8BDBE4E9991E11FC08F18C68850816F5703A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LDGNLL+Times-Bold /Times-Bold findfont def
/LDGNLL+Times-Bold*1 
[
32{/.notdef}repeat /space 34{/.notdef}repeat /C /.notdef /E 7{/.notdef}repeat /M 
5{/.notdef}repeat /S /T 12{/.notdef}repeat /a /.notdef /c /d 
/e 2{/.notdef}repeat /h /i 2{/.notdef}repeat /l /m /n 
/o /p /.notdef /r /.notdef /t /u 2{/.notdef}repeat 
/x 135{/.notdef}repeat
] LDGNLL+Times-Bold nfnt
LDGNLL+Times-Bold*1  [14 0 -0 -14 0 0 ]mfnt sfnt
94.8291 21.9541 mov
(The Compact Muon Solenoid Experiment) sh
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2007 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
def
/FontBBox {-195 -444 1446 1206} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/.notdef <1C60D8A8C9B6079F6CA73DFA409AF012C254CC3E9C1FE22D425665
1EB98561290D3823> |-
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C9157
71D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC
0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349D
F832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351
599687E8E7D0> |-
/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B
8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0
EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-
/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1
F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CD
B3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FE
AA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DE
B5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC
1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-
/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1
F006> |-
/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB01
88062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB
65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5
AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807
D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326
B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E
21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E90
35C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A2711
3504> |-
/b <1C60D8A8C9B7EF3218D573119DA1C11A6AE733DE74B449EE28E952049DF2
0D24986476D6D2EEF32C9EA9D0ACD1DB597DCDAFEA016C8786CCA065DDF1EE59
07C8756872FC8DF20AB863D540CF67DD1EF324B2790688B9E765FC9F6CEBC3C1
28AB52D1A4FF3B9BAF04627D17E8573C64B9FC053FD7156FF73E6BCD82B1A402
A01ECDBBEC20265AC1F5281625> |-
/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894C
A8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E
345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C80
6AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF
15C379D13F> |-
/d <1C60D8A8C9B7EF322B197A4CECAEBFA93CFC6ACCC571419BFA5461EED77B
FB3D8FE900AE7AE7F3558D5F515A8BFDAAA816E55EE92701787F654353E7BD1A
4CD427A1C3D52C079A2D5373BCA2D0E81E97334505A34C6046F7856771303B42
2A1AED127DFB82533DF581F3B1C10CE7C6EB68EFDC809921DBBDF534E7567CC2
D2750B89DE10766FCFB923BB97A09A4C79BB9A> |-
/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB
8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67B
BB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904
AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67
DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26F
D83CD870BB68F7A9> |-
/f <1C60D8A8C9B854D0E1194BB75B674577C40C65C9DA80CF489EB158487251
DB3D0D4CE62FE4588AAD1DAC98153B63C50CB7167E75DAE3557295D61A22E58E
D82D181423A4BEB279AE837EE035530BF30960CB0B47037A994CC5880A6489EE> |-
/h <1C60D8A8C9B7EF3217E3BC2FA8B1DA462FB5094608F57CE7723860E586F1
83A8CEF3068A0C010301729338C182E1C8129546DF528AA710511DF02DFE7ACA
98F8F6531E02F7C3E3DBAF3320F3D602AE65A66CA41E6984> |-
/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-
/l <1C60D8A8C9B88C084B857C39B4185359B4FDA8> |-
/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744
A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68F
CF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD6734
3FEE2448D6> |-
/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05F
D148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D5
20CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045
CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2
741F9BB15B> |-
/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F598
5C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3
CFA5497AE68C179CE338521D1494441800> |-
/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D
2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172
C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C6
9AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04
A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F1
2630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-
/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F
4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9AD
DC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161
CF> |-
/u <1C60D8A8C9B7EF3216DE239CB7942A5DFDA331E51AE98893153168B8E02C
BA8B703AF815B3549788123453BB74B7299D82AED651A97B215A966DFD3A6E1F
3128BBB9E96D3A241ED635729E83FA4EE02FD12FE6F7CB1ABC83B0> |-
/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F384130
4B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656
420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F0
4AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/JDGNLL+Helvetica /Helvetica findfont def
/JDGNLL+Helvetica*1 
[
32{/.notdef}repeat /space 34{/.notdef}repeat /C 9{/.notdef}repeat /M 5{/.notdef}repeat /S 
/T 12{/.notdef}repeat /a /b /c /d /e /f 
/.notdef /h /i 2{/.notdef}repeat /l /.notdef /n /o 
2{/.notdef}repeat /r /s /t /u 3{/.notdef}repeat /y 134{/.notdef}repeat
] JDGNLL+Helvetica nfnt
JDGNLL+Helvetica*1  [8 0 -0 -8 0 0 ]mfnt sfnt
83.1436 79.2876 mov
(The content of this note is intended for CMS internal use and distribution only) sh
%ADOBeginSubsetFont: Helvetica-Bold Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2007 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Helvetica-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 68 /D put
dup 78 /N put
dup 99 /c put
dup 101 /e put
dup 111 /o put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-204 -443 1437 1254} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6079F6C9C5B6880C89408E8AD9743F80D45518E2865
3C59C8B376144C36> |-
/space <1C60D8A8C9B854D00D> |-
/D <1C60D8A8C9B6079F6257591F6B821D521B69B6CB5085B89B0B2D88994AB9
CDD15D4F9FCC56E5359483D73F9E80C3862440F2941742975E0D24490481790A
84E314F741B73E7BF103570B3AFF5C00FB6C4E182890D79F93DE7BEEA23DE0FE
C4BBFABEB4108A163786B4B57A> |-
/N <1C60D8A8C9B6079F4056A67B07AC214E11A0833288A2EACF147312A351AB
D6E19454B2E6CAAB3689D4E14C> |-
/c <1C60D8A8C9B7EF3224D14587A8B37D54D8F0D79949CF14C9CC9890F2A6ED
AA42FBA7117A612E13E7903C5A9C5F0200507E43E4C5E8B577504A53EA8A3E18
0CB569C8E885144F7728A2CCF0AEA32AD779FCECF91E377BD59B10FB864AC658
0EFC92CA06227EB092EEEA6F0A41DE0D0DA52550ED7973070D2B3954AFC87D3B
B2A46D25> |-
/e <1C60D8A8C9B7EF322BA45AA2EF7BD5EAECAF85AF93C215781DFD7DA13F94
BB4115BE9214BE159174D684F62C2005A0180C6808F64A08B396F763189FED74
6BF18ED4EE6E66DDE691142C37E3D614F8DB7B75C14A9F846CCAD13261BA0F08
6A233499153D3DE84AE55E921B6458DA81ABE3A274371E0DC1724FB71E09D7A2
DF5E64CCD5B0577B8A6829193E633FA6CD7C2838A9AF9E8E0D8892F0FE> |-
/o <1C60D8A8C9B7D8BE16E0CC961AEF519BE656EC753A8172FD3365F902B7C7
52134E0D6062F2934F0088DB7D58C66CCBA57D3D7D362C8679BD71F98F68353D
F00A6FE4BC9DC38D8621ADC978F735588AE608451BBF7B1F36DE1ABDB4D743E8
61A8CEED1A56243288AD7237419D7149DAF8582921DC7F71072F99464BF4B424
500A0E0A81AC> |-
/r <1C60D8A8C9B7361F024500926F06869CAF414F7868F5156DB8CC460EA947
7D01645E9A011D9746CB6993BDF7B2650628B9E15EAC73BA376BEC45E761AF9B
7A77C8C55B8EEDEF93F167A7A94770404E8E1F0D41C5ED2E00F6> |-
/t <1C60D8A8C9B81F2C1282009E5D95CE7F7F46B3356102279C4BC0F18BE996
79A2FBE0B24A5C5CDAE5CD8FAEB44771EF6D329849A78B1C197090EDEDC41A56
28E7A0D30EBF1C775B98D05B427C008446AE8ADA9F57D4B8> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/GDGNLL+Helvetica-Bold /Helvetica-Bold findfont def
/GDGNLL+Helvetica-Bold*1 
[
32{/.notdef}repeat /space 35{/.notdef}repeat /D 9{/.notdef}repeat /N 20{/.notdef}repeat /c 
/.notdef /e 9{/.notdef}repeat /o 2{/.notdef}repeat /r /.notdef /t 
139{/.notdef}repeat
] GDGNLL+Helvetica-Bold nfnt
GDGNLL+Helvetica-Bold*1  [44 0 -0 -44 0 0 ]mfnt sfnt
75.4209 65.2876 mov
(Detector Note) sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
/LDGNLL+Times-Bold*1 ufnt
/JDGNLL+Helvetica*1 ufnt
/GDGNLL+Helvetica-Bold*1 ufnt
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (CMS) (CERN)
%%Title: (cms_dt.eps)
%%CreationDate: 5/24/07 9:02 AM
%AI9_DataStream
%Gb".!$!6uGZ7ld'?\%Sf.[(,`!Q(dsO9B)*:n.c$(1f8:53L]ss0(i9,\2FUGjfq0HF@Vd'@Q-JY-,=9\m6q3\t!ktP6!cDGOd-t
%570oZUDOk/MM*2aQ`DgQl-4?FJi$1l;7g3m*_ScYE%i=C_[GEG'p$c3(,tV3a1]Th-;HY9q)gSV9uVDKL`NlahjVU&FL$G#$baqP
%]u@5)Jk(:_;h1F!](i>KJ&Gcr)n;;r>8-p'@lWo$Q01bX\'*H@2!f>qdOTARD$n0X:RI%"f&A(n,g^bo-D&B9]J\n!O7;&Tf2n0]
%B\De'@"Q)[eJK@Rd=YO7s*`X+/-((u'F=m'.Sh?B@c1Jda89o+)[tm;Z*bED-Z;2Jmm_4X)mpGEN;YFr+,(B8nupgM!6%__i[@&i
%_/Lrf3/T'(+;$!BUGrhpP&Z):g8[fpqe+RY=7W<<l3o%ul24JK>A`#TB$Z9kgYr1J1hdR.,!efXhCM/[nSU*e8<[Jb'%1Q\Bt$#&
%!*8OqUDB:PJU^5d?hfa%1g8n3[fFjFNg=@]8Us]fFM/Z\>Q<rEl2]@;Dpk$0@q`c:+Gm%X-6n?1U.8`*r[/rO;'JIM7H55GYp5oM
%Bj;:39hJ]dN_hZ,s"RW8)QZ_7*"I^eU^UP1R2:WaFj6T:\F^/),8f&1T2>NR+GEB?(;5R3cMXK-RuS)`JJMKAXR$(UI5Ds8cW5PU
%-SX=rk'1m!';;&[FO?SqfV@;#Jdr7.ej$hmP)>$^m]\(UPBhrriGg7NZo/n`=s:W1=Y>#olc!hmm=hQ41IpYHogVShd_`\O@*(h[
%KDqhDmncYo,JE!OSTg=DHh^<*W$f:4e%FC=]fMCh+%gC)RPr&`RgJN>&Xl=/Vc)9KVX8KUFt/'KPaX5$VG"=r,IC^`mC!4OSf$_o
%JA#9f"8EAN(HlbkAhias&:&u`bL*8t#gHNs_SGLo"E+:pGM=@XP),M9HL$;Hdht]1_<3!F9\A`l>N0itJmgNAE&(^@Hi4MnLT9rC
%C]<R#I5MrqkMtN3WA[ZRrD.>E)DCbj3t1M@J#?bbhh/(dP90RIgmWGQ,P499d":`Jd=7Iq3LXK&qQEJhp[?D+29(+IFb.1E_$d<Q
%qS9)JM%P]_&sg*fSh<LGr^-Q/@A5\!%;0A:o,1*.&0ib2,86RE%j.5a)OY[JUekugs1s?s.)qf-+/D*j-hViNbO4kl+X3!_dT/>W
%>5ctf>LJE"96#h4`LO5c)h5`\3C<Zf9NWVP(caF*EMd#0+F("g5&7Xi]bQ(m"#O;2:7$#E&P%Z)O=7=.Ruo+O?NJ2?W4A)*^XA;2
%eZ.#^e>OiSWbVB/k$=6Ugds*c[,'M/O1K#$k4<"Po<u";j&SZ<oFB:i2f!Oi6V&a[EO6t_\XX(3ic7.r/Jl3Xdn0!ie7laGNWtOj
%A[L*+bX"rKO07H8Uc>TGi[:9GZ36=\c':cKB\Jf7qK5>G+Gp*;Zd]T.5,FaDL:HS-r\Nm-4t>.4HF9mr++FsP[6GcZ>4Z1YQ2i>?
%T0mBG-+.7f!RmUJG6:,g=L>LE%'P*eC"h4,r!Q)[Z6VRWA)RtqAFF0a)SlY>1n=2(+t`ehO`Q<cE<B$9]b]TXoYEi58L3^hgb+>`
%;0U[]LL;`ECt=8Oij?>aJ1r$2NshaaT_isX<#t];XWn(=Lk\1g,11O$-=W\"$sr_<$q2?]id.@gl\H`0ZFg/tpHQ@5TQ`dm#h4)%
%&u9gMT5f3=C5/O6f4H(hd+AK.epo?6P':0Wd$&^\2Hmtm]Js3BXsX+H_i*.-W.q[j32o[2O3]%O>g>Qp)UmrlGI63lIO+T<*f:>B
%l]#C>>O2:=NqVa"f)cPEp"lo_f"K2seMpUuDB'5S+L.j<JNp=:h>$,L#G]]Ub4S9*c;!0J49?jdiI%_MXSG?aHQ,Dh6B+7fbu`^l
%+'$,!_gdn(2g<:7qVYpuQ54tn:]BU<VDAZ"=5SO/3dPIr1TPC*FMOn^^rl%b\EKn"4WVk106_O8fp\V<%4rk9!SO.-O$I(Tj+NKG
%M<8e!nLgc1jH17jHUmM!LJQ^3mP?OBFi8mAEhj_-+RfF[j9/LkKS0mQ@KJ,LKnp9U."N'<?Jp+#j)[?+1OOe8o.cj!UO7_*o+Y!k
%"=J.Na)O,"jVTVd`>r3BUU_chiPHSROW9JsEdWnjj`50taX(ut>V&D.U:EfIS>1+8NaN$VB/qljZ7Nm?fJjg[Bf=+'fJ#t',YL*6
%J`.K,aY>?a0F9)O`#+r"1(bkW:^kGW#pI,4\3qsc-C@1F&Pp=XF<[00,f0j;5phDt&Ei(Y4;VYj9KWoJ46!M)*KS2bnSk"UK6n@I
%@XO,mj^N%bM'ZX$==cq^U9R6?*2?tRN1^?CV`?e.ZSY#skVsSM?8rt!__afG1uX5t;*N,kF&=j<6kdsm1_up_d:adDN`&_08jn=<
%+5nES#TI1rM+B`AMpRT",Q`EY'd4ei=:"M,/t<<U@4%KM`uX,@QjuX(i7<[_0Gu2cJ`8,=b#'_/:^JUH`@.14;@tBP;%uS6Ud4Jr
%8*3@.AB4nPJ/B\u.(EktOs3J\E"K78"KVdC&qD\*9jq'*!(K62":>(bV1UaJ2-CN)!m0aVBM&>UF6dd&2;bWZ#I3hNUZ`do)pPk=
%Noa:UX\blTZ/5,a5akJVlq[Qa[(>s.,uk#&Pop'/$@n-:n2*f_%[1=/;E:*a:C&3HZ__'\&XY]j=GR&;(r/`RYeuY+70'bE^fglF
%7oM,ITJ?NrAHB1YTNDI5J8P_@*Wbo^YRGMR%gLT2#OB9_Ka7_F7DZQ(@/Xb@a#L.J"7)D.p#REM,>,b';m>a'+93;c+V"Xk!+Fr=
%5kq9C'0n8d:eh-AL^$J/"%=q0=ZN-/Sebc<:`KY'(BFl=@ke4M@fj`7"nL`)9SGG,,YJ1&7Y$/++QYT01]t+U!ug@_6@o3+Vh"Ic
%^]QF_66(6%!T(luO73Il_%=C='JN;cR"trYM??d3^g&m-17f([!k=6lmY_&]d_Li^i(=3`1C%1-ZU0ZPY,-Yq,J_9?0'3/":&o(9
%^u??<]"eonp(X`\"N19LiZJ_OJH>S."$+2=!`+@%TKmro5`X26:Z<Ku(m$C2O>B!P3!<>S&3bV]&4D$]&5!6?:,"L1.UE[:=L$XJ
%OpfAa%a-LN_,r8-O;po$=b`_T$qiE&e"TsI+itM>dLF;WoRiMuE1jpi*Xb%>$To^*==j0-i(IJ:LW!O.Ma/NjUKA'O;&I=4&.(bs
%K6U+0@)."<*B>YoOc3hUS4&MQrP4QsIUZDi,,#mnJeO!d0G^9OJ>+.(\q1%/&V64bIH>KOVQs=,,0?:hdM9mU(m_Etb!rY37C"h1
%jXlY*kQaZ\_1<3<A+@`N&WDAsMZkgJ`<e)UO[+q8To?p1'T6QKSASGo,8#oaOC/Z^W(+WBM/*TZCa?Aj/@^i+:13UO"F(=_E?rQ!
%=Hk%=*l\7%M0/BBjHST<$cuoSc=%T_PJG%`_1,!n3Cm.jO[hg$<i"*2">`0&,oLDHaiOE+R3].)HEj5Vn)stiDh1Jjr\a>_;SrH0
%Y5LSq-He9I,rRB]]Z/O'N7Z`kZI%/qN>L>[XYm0Hcn2`GJfC&([GnbTGH;S9HJ,D9*\Y3UjW/U1XVTf?q/lhE>(>+38HMp\?qghj
%#Qis=+Ts#=XQ3tuQBtJ%lj_-9P*!X--_%l6!A'YSOqB75_3,s83j:1e=i6Cc/6To!'*I5?UKB:0-,Wh?N@!Ue163^`=Yc,U89Vec
%8p7LN.8.+TA1^IJZ=G[_2R?jM96N,"SA>CEYSuW-WaZuN+!`PV+WFUjU*Vl>>LKf//QpPc4Y9gdP"dN2eWO3t/Sg,X>YF4eA7/m\
%)h)7`7?Ecdg"G$+Q>LK\g6V)Bal8V&DVBZdDT2+29Q/&JQHX9h!1-AuaU"6WE6/Xr;k+D0>?nJR=U-k+-'MRhasFB!1<a=Y>cZk?
%+G$sckh&Lq75UIVj<5p*;VhW+X$sr#S!;_]SuEVaPN+I!EkG\6_c]dcMXor*GVBb%,`X(AV;m7$GDm$[!9I*Ui:uL*5PS_#rqq@$
%s)f#9WZ8^b&P$.)rSn@bUZlQqIRN!4Q-j6]ierW`H2Zb+pO"2q3.aFF_5AtLrtfQJ!nSI7s,<caC!B_XP?YF<74Ec/c0uO\7c@G\
%R0@BnPj`]gULZ'[+'JD7f9D:"j(n&O(V3(HeC^DaSUN$p?%;VW?)'s/L`,;9rD_c;eDN!%NFH<@C6\1OVKWN!'l9.LE%a!'q1XLo
%"RY/#r\Nia*MLnlqQC5)E0PHhRE9R13so9&`kA-g8*G+USrJ'=;rX__rsp)bjDI`ZR+,!Fa0$XdCB4i6.E>;Alh04DP;/-8`;fP8
%0CWgo3Ej(4)-Hb2Fs%i)U'N("^lT>Ii3e*S;cdGoEn4Eh*fp^5U=OKi,mPQSjpo;<[19i(E-P"l"TCYW+$d!O+-h+tEu2bl"oa"'
%s&Z=TZ)I9r'fCD&8BK1fVU*r(K@1#(<\YI\b[ZD4XY\-=JqD,^)CXR.&^7Wu;2^9ER`(/UOP8kgmhkpeJ1/dCYeVmo0Ys[tS>[;f
%$;`3CZ)A-Z;@aH;X_f8U=<F0hJDp0u&e1p:MD1IIqM`WFUmhg%S.)*^N7h/E5U:$o@=_cH@"M5X3)Ln_&l@m:`M.-%O[b_bD[h:5
%/n$sVY0B,mNArkH7H$JeHjR]4ooh8YeM'ie5>Pa:T))S>,bT^"`FrF_,Vi34M427*;h>4L'u+Hj,.0,(%&\eODi\U0/H*4pnGRMe
%1VBFP/SSTt12Oh;Pb)q*m#B+:Cgc(<>VAjZ/0iEc+9b;g8-,AW`h[]3"iG9B/SktJ!0iTV;2UTUOs[9?;(iok+a'>U@0V$YV2W'e
%@qZ<Lf9m@cYU2Wd3C/7$a7lBd&A`.a)fp__Fng*mKh]Jk?L*tb,a!gQY&W)P<D+5i&CZ5^"">5uY4shgTS58=0eMVN!q(e*dW;ao
%BHU#[K6FMPHMF7Ii_0po@2%mu=_r,,P,`oV$bf=`<GBq_4=1=soQp0D2:Xo0@Pu@2;o\Yjes2Li&4B60$Nm1/VG]J)")?aE<<F/t
%eFOHdc<FIV@i'f^VUJ@Qg=eA3j#g;O[Pj2NksSM0VA0^V,O.+ME@+jcboemJh"ie+J/YsnDg84"l8XjSELtSQY_d>4`5C%XLcc-+
%R8B9m4S5?Y:W+CQAAjR!=u8h`"/ID"lE(I8TM\Y`*&N@Jjhu:_6OT`F&%,frfTet(3*s4Aen+?aZp(A'iPQ,uET'JUH6d'tTPjaY
%o%26NmRrJ`AQY4^Dm$K]3F'gjnek\>oP'*p.U1n^UsG*eo(BBE_]QN=?+DOHccEtl%$&"#*fhYp+Fno8^nLIQ8*t&[5Q@Vbp92sg
%E>6!91"RI"r\Kb1L)<d(R6`Op/QuE[r:^2QqZ/D>s6K]&m*W&dS,Y,OT2OEc5)5o9fUKs!FC_+[fNQ)KmH"BMHB')<Rnr*g\eI4h
%>YO]q3N%"]s0EHY5WD%uN^>\<f#SIrl@0WA#\kUXs1Nh1&VBq!S'&LjVXiD-\_UKQ';m(nJ(\oXaGk9;f<Dm^r;Xedaab=Ce=J9.
%drDqM?V%"N>:0["bYG)94Ynlhi-a9@kIZ\Uj%jo4]0u;&-hAZuUQe3js%?CX-=@3OlVmh],n=/H&Lrq?hp_su5l@7ln6`.4G?r_Z
%]S/7GOMUb-]Wcn3JXtmB7)OL5':MTIq2`5R!?KJc>:53gn<\/4jppHuN=iH*=7%.`M'i9":o0_:OVgR:c?HJ(I=@CE`!QnPLN?Ce
%s"Dd>s38c.BI*O0oqW$WTPk)RGK^dn*j$V&\6Sm/gmSY;X[2ES2OuF43_L+#:_S3IT(l+MW6tM:ie[%5(TmCM1gJ+>&flsdUT4D.
%7kJ`.T!lT*;$YXY+-B'f6>Tk1U6<'Dc*m!SAY;/g\91_B"^l+=%00Ve[LJ,EfPI+#dIW(ER`oCr=P(iJ@(9Y>BKl?dhJ/GmZmUlG
%X]\GQLZ@J%V^4l._SjTH6&hnf`GE(E\nRkdlf%m%L.CNc!&AfH[<F+6q<+&&LpcnWB^'19X]gW(be/_mp;Y,0'+cru!,d=%WapR.
%WV!d>j]F=sRtgOZaAY83!)S6gE,h\9aZ>_aa9=7N,<hu4^,m8<FjRQd_n#39EGPP*UR>.:2J[G8;9<&`1!@OXKfs#G#n;M!8,X1D
%,&S4lVq5&Oag>9Ietce\la9doA#MlqBE>bXYN:-T:;7P#-S66\7`-+*,VgeJI=uA.Vir]NbS74PrmMNn-mUi48,Km]^$UddXT^7b
%H.ltlcsk8iF#,PaC3tZ7afd[@9C:aDZK]c8as1#Xc;a0(\jh416J']*/rs$'$`S_7,^..P:pO!lf!V2SCGM;1<lgNH`m@7Bls(ht
%9JOPAb=Q>>'@<D&OKL1,d_>YJ=]!Y^B"^Qal)_MPdU9ekLX(!I0'X>t>27n@3WY[R8;+Zr/@hV"/6LJk[04Uc0&sg%78$M81);`c
%\Aljl.mK6KIIjI+,EQ^,m5/9Yht48*7>E"%lu,99<c9QJ2?MYcY^O*fbo"QR\Q1MR[@?dmTLo.9g_j5k^k:r&;%Ip?TAIZ#PQ#))
%S1iXg%22*'\tb\GT<8<_)3me<`aD!Pk(Y=r#NP7q3kf,gmIu6236QJd;2nQ/BYBeYCpujrFK?$]d2:q3YH*H47WT$g2Hm;W[aB7-
%C?+$C[b,,*K0-<6SZ'Z]gsU9KQL/Y>T5GTNeBGkD$(ct.#48^"9t8sD,IOTZl^A2kh"Y[=?47Vp6NkF8+BCr0iFim_Tn[Wq?b3)Y
%Rf5!VeIfF0`Gi1>n]Wru[@)5"P>07L[@*"8s3VZU7_D=;>,,En+.MX]2io%p2&-?g?Q7b@rKmn9e7:J.%lY.>C'Eodqj`QDZanUc
%6j4E3BXT]0K.D;LNO!jh[oG9HCqA971oR6#lHH49-uk/bJ6K=8MfEO0=--IbnLRjbkp79CVjlpteZLLmIVroQmELE=aYn7eAmu<u
%A=I692>RFf2XbLGN4@QUlo!70@r:F''d6m1@U[`ZL78&m<4!5rPtfVCLsFCPdg4?G(tBL@Cp-\BkZBr^F6f)`+La1,og(]Lfi3m.
%BYn$<Y%,URkWtE8P[(N)d<:.l^)4toB!\YJE(%t3&QeA$4+nr:4\'+hHp_,V!'P==f5K^=;L?Aad+!'&N;slA,b=Y+]%O&_(^O,Q
%0M:@MeKN],@9Ki`)Q^@!_XQat/of`8]nt;R7P3f\_\n9SanI\JLMR%Mq17f.MUOIEs$\_*27`mLptG+4<Taps`FS$fA`T8Sj+Yi7
%1H99\0e+E_V3L6'\"l!CPqTFh7uB`gm\La&CDC?@6'l'c%FnmmCiaA,=-/m4:dcHS7hfjJ&Ht6n*n8)^cjm%7KMA=Y%,tq[_-mbJ
%QriTdTK'>iBK^2?%5"Dt+Ts4>*$Osfp)?E=b\ce5.N[]Eh_(pQEqqBQ^hIu[HT^F_`D0e0eL;jB_nLIBRHhh(llf&E;n\uBJj6-8
%^f2+6b"IfRoY1sKn,/UNG)2e\M^WYq&/s6_ln(Lfe)P(r.inBrVRSE!0/[B[QZlbJdN6WoG:nBb9^.*m&]K]MaaR3T'rF6?WhBK8
%QK"KigDbm+5MY7)r0M],4#.>=f);#_79G8[iS"]oI2FSTL+rOJ6'si_DhQ'nE?j4Vbg:-DQOXi#0*_l0m&2`'X%2=%]E4-8]JAn1
%*?gTK-gq20'Ml:2f$?KA4ZhVK,.lq7Q1>#Y\oQZIDjIqk^dU&W9S8bgTf6`><27/9L??m8_\E\A_l(&Sir'O@d]W[H*cfr\chB49
%p<L=]\#\U!_t+g\cs5qRPPAhP0DGd\GEWK\#AI;,k7Xl>rG=I"+JpYSnn*Ef\f;27d8?D5JWZ]2V@ZJ5\;^IZL&JNYDB5l^.@W>Q
%000,TGTu<0kV"hK&j!3&3q)A7=d0<Yo;=i#S#/g\VU9?GT^`poUXG.k/b-gAB;b?:ofKrk976G@U.^YhkI(?LLAhU9bDA&sq`XB=
%SVKlD2<T%5c^[5i,s#Dc;=)<#p4M66?X#/qoGT$>Z\5FW3(u*!GIXU5dmk@knG.mCqh^LcoOF=)`ROf_I.M=mJdd#Q2(ZQ"jEg<u
%s#G*n--te$n'$ii>La/YG"6W=TFR<+fP!GG/QrV[+hmn+mOSRe[HX/]J2/(ni=b>D#L[@iKh0)"I%(Y85'G78Vph'eT]5MeGj9.<
%hRqi6*A60Pr\RX;/-_qH:@=aXUZR1uSt67>V5n3\3aD8di@B@<$)_NMF!ZKgVdMN`Ru0>u<eGRPHsV3;K7ZeJ,?X`OUN2@&$O.'1
%)ckKF:<J4?4<E=IL;j&:-Q\L7A(nRV.'*fXlAPGWh:L#X.H@EthBIm9?,1j7=eTLh."+gc:@OndQYon^BLdH2PE4jY?LqeW5P26j
%2X('L`X6=13aA&:1=Uu)2Oc3>f_=H&NUEso"pIo9n==,4c<=h4&jh2b`.K7>WLk\hEdE'cVCVq"H6\*P_N!eRO+hl%oc:WYeI;k\
%i*l6?bA.IgdjLaD+Bp]F2!k^.o3(Gp%@T2J[k=1^@Td?_JOkV'kiZ-0Ytsq`:B@Y:;#7WuI4l&P^O?Q+1O[O]jVL+\)q<i0k?@YK
%a1b@7[-=6K1N@(gB_K'+@k7h4nI`6%<&SSSfAfce[FFT702)VaD.Z\3K3l;.MQC\l(e#<#8)/G4j5tu[:R8JBFuO;"k^Akh=q5kF
%&*6=6*]'@&M7B13ZPJ1*I/!(?+,oHW&"3-ZDGWHQ4D_@G/06>HI>neVeV;Ctd-KuTl]Fi4R1B)%#hFPWXl_[Iq;%*4K*k#Qrf]5^
%[$pZE0?cPV%LQB5*L?^4ck_8R$dONCU+?c-3aUn!R3j.2+'p.)cjKs)<):=#p:W-"9c00+l0%n_G&o,DqOKTM)`7EU-7Z<uTfe[u
%_YTokEBYeBTKtAY:md/A5a6oHf+V><5neoXrm"lK$#.bFQTs)qf?":uO#6(T,$A.eKQjZsWPV(9%EfSWi>ielQ/,e$BSOqG.Ln6u
%H-g(b\3ABY*U@aDnY"jb?+Gp$QtEKK0CrlS"`#%-..e2@j2XUe$L(NBF;C;<jNd3$Vp1eW/]Pdn:NtpPU?UFUQ8;6?^%rN\:Hb%T
%CL0(WHO;8GS3($C.>Ob]R?8Bqm0OdH:.b*-5W6Z:cP\n9cs_j1'/<O9.n%pcl`4Ap/E5aPF3ORL/%7<=IGjE,:D^"Y<UjU;p(Z16
%-/u&npICS4DjT\MFnTk?Z$9I;f93E9JEbPXoeYk(AmX=>N*R>J'lgfgbDbs?mCmALn<Xnde)'t,qB;n'?,p'84aT.'LTJJLL%Ao:
%DS2E&XY@WDKeMdKH\sM#IIm7lDt8AK\$$mg`o23!Z?SG0R0LBPEV$)(D`)>m9,KHKIli![;7H(0oB0GBLF,f$O4;/=GtbHZ=RYc`
%=<(Chk&:!N[nk?%eZn@;f0d5umr_rLbV:H%(X77c>PEHko;mM@0.?Oo>%bn>WBgfH9QN=?^3M^2l/g-USunMCjS>CnO^Io0HLm'W
%Ca,[//u]@O>[GWZAo:u0:XCtrIMR6r79#%^F8_MfA/`G+;YQa"`KVEl$Q-.YjFYq.Zm\h1;^]Z_S23u84?:_P^Dc<;&:GoccafMb
%qXn7Y'QUlCreYFH?Btbe=?meoe0AqiJRb'?F7C0b1Iqbr-mqqD1hs[Q*d4TH(Ad$kIDrYt=b.tj,A.-N4:Q8J!r+BhULMWV*Dgdh
%(*[S%"A:IPZdB8n@0'Xqn<(t"-:p9D*t.Q6*\HMp/9F8QHMk'/ngnTm0(\,91MWu2Hm#+sGPi/SnB[YtIV<uRp>P5Qb"#5'k::\E
%A#;J756'_9igB:Ae1M?d81mZun["``'^s.GaRtJ]:o2g&iCF:hHQIm'hs:O+l_c%$-K`e`78a8m?k#aq#&SnR:T)2k>Ccm[)B?4f
%26($f?KC@i$p<QbN%%EX5[(>+,D9d+@08W9\bFe5%U;d5%PVK$?MqD6BENG]J,PPf%%Q[tU8UD"4*YlWmRU.GSa/5E0PVCi4f6a1
%aE'&senAlFG+fhX*-6K+I0t%p5D=h>an)p.qU96Pj@n5I'`@q&@DP!"1A_Iun^XF$F+LY:5YLo-RhT*ZAR3AFoIER1B"-IcE:Jb%
%MS/tj)e>sZjoN2#*m;n?>U/D!jIuj,'?A>aa=.IDr$E[^q<Q=es&)sVBTsLMn<1(]5g8)+MJ'b#kH"fg"QLfsTfa4P$GC9l@)OiQ
%EECs(:dHu530pRGCFIn1Xb)'^kV!DLM0SBFSUV$X9_&soBOs*Jd87!rY;6Sso&HX6PfLZbE-3'VpImd\o!HRh;$B(AcQ;7QrORQB
%CUEGZaj[2'_0ZOMG66(Kg'F8Nb:E)S^]=s/=99kpKgX_JeTUFiXY+M;&66I&*p)%Da`P@].]NA<X)C",Qa.NpKZ/$r:)hZ)fO#),
%\LMrh$BiMceX-u'efuOs;E4Q4Caunq[_`qN(Ppo/;LV'[/na&/>kY2L[U,+=ik/!W0e'lTAUAjm&7>EcM?Y)3e!IBS8]]=K[P#TQ
%/ee&m)H$9K]C<!=6XCXS+DN_iIc6*skNC5F!ZeH2gbpH_Vk1bD&1CcC.hm^J_]T9fgN/<=LJ*ChqZo$BBM[e)1PmGu-')Wk3gOi6
%9=1U<]uWGW)+:e;:>?IZRBQTO0?m;)<[SsK>05d[iA)5=lTMs6g!\Fmj^7TDj%-?;lLV2Ta#\7%c9dAVENOV+bd\E*$_/1D@mmNN
%]X,#/q3"tAQQ&lV^qXmj1]=mH82(i)'3bRH&L7I^X[(>#b&)Cg-b[hF6#n4;'3%X2=VMu=edhSY^a$<sD!Jc3e_>sdM`U:Vm#*=j
%gSUiK(5]7CpI_1tWNf/Lm4>nb>KK#Dj(A6](d#/t8m3Mcm?&5r,arULe8ZMQ7E9Vc`EgR'oIF*A6q\[!\_tYCMNI2cTQ08+.F$@R
%dhhbLp+imsB+WbNg"^5A0]Pd%+8.He3;l`EmcKA/Vo>\l$0t2>S[?e'e]akZ-dUEu@?Z`CV]@kP=a?KKV7o1PIHqs/iPK"S6&G@-
%2JpXD2*N^l>1Ah/As*,!Y1`3P(Mi>Ge3:WRQOI"H+*LrVRB/KP9>3;BZO1hi;IqI`nJY>\YbZu8mt9ob.!l_AAsZ48"j7o&2`$H2
%[6#>]1gW&<`4WjI%J-bf^IG'NL-`nVlr^L(TTWcV'1KmthdC$am$KFYIroF%o(Xn^$7:XLJ&cqV\[4k:WbHBH#D7V6Qc#LV*SR`C
%<BIr_36u@W>Bc]hk<(CQY!ZVKS@NQ;%Y?E^U.=mRXDF9Cj]n^][s="b+RSM?>>aUSjPT+qSNrA0P`.l\Ot/FU_G>%<rjml%@8p1l
%@l(DXHqa4;V.>/-f$gYRGf/pJj;Y;/5!cKX""nh>GHPi78;"Y$#7D7aZF&ETKUX6/@WMIZZE[(5,>Qhfc8G*?oNnG$i)Vc9)L+_1
%q`![#(TdU:6YDmXXe"msleWk`AA&n)KaV2pa&_]lTDM$,f"E#^9YReH&:7/R[6bk9*V?([Pg=Tb`FaP\E1+'-"pA,9\0V2X3Jn#L
%G,5Djp-t]aHV!HH>9=`g34EqFMn]Rl)'ch&e_>572[2=_7?t>&/fR*`XkX@KD@E6'<du'4LJO,0BD2t+.E9#U_3c--e*tO%nZ)(m
%il>G0Rt0S("k7HXBP<`&#0O_uHfE-mKVlj5Z_I9'=G_5"MG*:ofEfb`XA&rQm*]bq5$DkKJu`\>n$.g"g5+XQ9Yr&ZQ>&e0la2kd
%,@*4[_QM)KE']O>RuE)NThVBn>%L_AT;G4lh--rOPh+AuY824aRDU>7E5TC,F);B$g*,fcM<N4!+7qY-qZm0%Ba_+YFqV7beL-EM
%p&mtQmj"K=gX0+2H[:\2c$$0>.EaL/D/f0aEAOrJAN>KuZu;">=>4V&J.#*]2ZGt13<6PED6$[<Di;nh]J]6./ZfDoT5Lrq$o".?
%n'9^Hd$@tk?2\VRZa"`9Yet[P2N6$Gqt&9=j(O02rupG1/E47)rAtqP^4GCo?u2>+Q$V5o!Fi1U'cJm]q]L2l4g1.(S0PW5$iO[t
%V4r%@CoBBO*q>`e-I(u5$:ZMT7unE0'DE:uk$@?-UIe;B?.@Og.sjrnjSPo2L1Rpq]e+X8WQB[\61eC<\2+G.Re+8LSWOmCBR./#
%_4ujJ).5;h[Hq<:+LHi>YPqS0)<74O,TX$.6jh9FZ?pbeT=4<12+,,5jL(%t62<CS_pOikj&d*6!7,+kj*82k"LK'.VCoHS:F0,^
%Pd\+T26^.70.f)B+7D//*#pR=R;K@lOaihe^1sP8j;bs@>o_@D5n:+>Dq\e=6-_$*a-];'MfYJ%`e`UY[%Z$Z,'X$O4,gFaO&k-T
%8)/07QI,r:^='a^K7;+*dDNY3N&)l.)j+2P[Hqk#VXWs+UR>:lW+t#E11W.m<Hq'B%$%'1lXDXb4`"0B)@9n\/[pb02KS"k[>\eC
%3YDHI*^hS)#t#b(%tunL[;<9aZ'kE<2Ki-Ejq/4_^VGEMEpL5%*0/#sWFa&'fhj='g3-?:]1!ELS+=*2+"c$KM6sXbQCHmb<V+43
%r29.L/2gOkqm]k=U<;4mhO2PtB\@PM=RRWNFp$<=oKGP8I;2jP>K*YMo_W;\Jn`gMDi47PGieoU@XSN+_6&8"/a_1eP:0jqgs5fj
%10ol:^\1olqLPeShjHtsD4La@Hdn*c+1k1d[Qs_MWMGSN-E2uZSIr?%<)P;N[-'?aMN1uNnc7&8_MVB^_Z6J!Yi>B3&&e@U@-hj;
%C:)bjI3?Qkdsbea&mFA`k4OUPm.*>:s400EBjs-CU/p_UC.jg$QZPC7ge>%+FqcHddscmq2mLb2B4r/XbAqoI:1L53qUXUl2:H,L
%+<G2WcUoW!(J['<n)&&SkKRn^l$`(Rd9ecAhR_3q&eoaVbMIS`:M!7X.Pg>KgGhB9bC=dlrMEA#M7uqXNCp[bV=YNn"kKelC.97c
%7K5qYdBr<r1ZdIhc&-@6mUi41AZ[kt6O.KTe@O6@/ME<uQ`$tQU7^XWX)G=fW%qqdjd@XdS8R_V5-[$_qW'JVj*S*e(MKeM=5D6K
%<?5+D2Wd>u\B/3dA"uQ?<BE1m=p46biVHD?>$;a5etU`<`bH[_g_4ae/*b\%niC%@P+Vn27U$7GI;eh:TNdilD26<Gc<)KkCR3mm
%<[2Y0I;B)tS_ap'C>&_BInJJ2*KdOt4R7Mb>\R`12.EgCK"eJl>l;0TYDjrJW6sbrKGA_n'h0S&BPa#]CiL?<&N^HeE%1C./algF
%mS?Ro]GarrW+GZYpDI[S(^-X_^dmNK[0A35MU>hRGFj,AdW`igMdg-%bE:n0N#dE*UGWi>/9hi+WG\8]J]]`bk4;recYSkDei^f=
%hp:C<Z#$MB7Xo5ca;][doo_;(V(ZJigr#S-DQefHFom0<D(#BOrN0)Nn)/5+2JZ:;m+1ZP%&n5.PDWt-Qa</+^@'*Z-s>tdp$Vd%
%o.=gE/DI7"!C:J(lJ#.g\K-5\3bhg)Cb'ed"p/eO#??0k2Re1R+B)QTR:V*."pCAc[$qL;mHK"100WuDU@FP+ANNB>pY;.P]*[UC
%)X-_J:<:IF@MrMNGQ&_a.D04oAp94$ZR97KBogECpY'(6!U2k]U8S]NCLW^6X;fXUQsHFQ()Ye4Q>>^qRrL*]9Tf/FFp%cQ.>,e#
%KmWJQ,_D$RL0_5b"<=tWRA4GjF:4s])-oSl_4!e"\&Of_0#?*j>D47@0!cttVHpU5Y&so/kMjd/9>Rk4Z9un$j-H,8h/7h86HR2b
%lo('?^@/S2jgMWEpmlBXZn9o)?pjbT,#^>IlPc1-a1YSZQd:j_Y=mmId-HiSXG-Wo(EG,T-NWU2Xh:rDe\s8fkMP7F!.0u)Nh&eW
%D=..gT[G<)NCps&($O@<-+75Yl*i5PFr++mCRR02,jt#dhcZsF\aK.BhUZE["g_\a9PI0Xm7iQLMLGEP)kEI(%]e,eAF+T*[7:j#
%+N\Fam:;?a,sLZUcNQ,fGs@6N*Li?lmZ+Qq\NS?HntrK=Tl2<5h7(Wo=b=#eO),9TdqhgAf!B3*:q#GB%?Rq'&fZ(F_e/4<H2[Hl
%Lt-CNjgLH-0fO%B2J\EjnTADD5&XIV[-iTO=,fsk$NPsa)XZA3C@fPT!8_1C=gFOmq6lA7.IEZ6\$^\NlcSF%gPI@^f4b'S`F[fg
%dlQ)!LrG__Yrr/!mbOO5:snjB1Qci)^/)FP@ltdQ9J:93=gf&3F6HJ7NPKs/BU0B##_C"\bT.:oZTT9\A:6RB45m+`o[b6C9r,8.
%HZc2Sag0N)#*E3ZL)ttnh/(Z7_^9SgMn]RlX^Q&/l:e6NBYDs1k6ZpB4F;hpg4g7N&Q%H(<'j6gU\e))Y(L8UJSP(hPH'r.NCP..
%c?5>VD7AV@AWjHTeL"bI`_d"ReqHQj*[jj73i:_E;DTNX,2/U5'A_q/6\";J"Pm3>4.[h2<gfHL*hnr*0P7dNFt:RU3_sj--+&EY
%<nSMjQ"Si6$Gg-QW8Hcbj)mXQfdk+MP6Qb:,r")Yg+ef:/9)OUk9OW(\9ogoo%5q@`88L<^,@lB>i+M*!*"XkdG%0\2=@Kab-F^J
%e[1r@C?;AZ.YTPBCouA=ma]i$D-HmTB_0n@'uf.c>/#B7H6Q$mW7^kV7fl>KhBqn`Hd\;-mZGPQmZgR`ZnD!)*pjaR>LaC$Z_:D7
%76_abY4B&ch%cKVpFT<t)o"Ca5U?GF'FDcb7&FaXaHZO"Jf<CimBPs([!mH&mB\u<*L3QMmBD;XoFY'!]&oeZ&n]HN@p9"PLRf"g
%!5CNZh6^)4DGfT*infruo".hiE:L4g^1j0QDl8!Yr&=52-&ba9CktdQV-d'@ns[2].iS"tPr8-@nS4D'CS!^VgX]XOMc><$R$)0?
%aj\ISitrT2g/p%ah&R#*V0Z_9J.&\`e",@b1cqf=np#ZB/-8cWD&%:lZO#nt)"Ol6q>feekJH3>5)9js'ec=1U-4QUg\eQ5VLdR0
%U$t&BL?RUQ1j2Dc7d:N6o'Z5uD,nb%_Yhtt6),(CZ5oIf<6GfP>5k@I!P%Ne;s)^U*<9,i:UP"E.=@4E!`<qqW9",OV1snp2ll&J
%P:*i*0AEnX[mWc+q=7tD1+HF-eFN'B/7:gsCN?RoWF`D`Y3fuW?:5CW]iqJuUt;KN[&K>l]U*K\\k1_Ua^!D4JP@UY2e=M.f6upp
%E`5*)hL@YphJ\95kl'n6T4kcZ4/6ba-][bPG4Y)Q@stl$hgX[b4Z*PQDhIe.bB28S=27!`0tO<U`j9nNCt,Yj3L/Ilbi'R@8WaTn
%m3o,\7Q)8h?qM4$j0tSs89Qt@%KNmU<47#I*5K(gEtk_#isMB$dE"4=QEAAHlgl_[e5e1=gASO5Xh;tD2Jo?8>@u5Ae4Zc@Rt=?E
%hp3C4g[iH7F#.NsfKage2rJCm;75@TlM845R+.V(G+*UZR..`*Ks%?99eNHk3rPUWER0QCFk9SS>^pck[I0JuL[._gWn+RF2gt_B
%7FetbW]/2a(Dg)@cfNLi<U6feL/Is0U1t]fkiUkh\>WR9*6@3U\>WST9smG;+7c.@*H3F,n-9b0l`R4Qp6#o7;75h\C7qiH\>\,#
%48,:O<3<d0>)FdLr1[qcp<c@fXY'=]/umKV?++8Rms@p>cE;/#/Xp*R<,E*"\sHt!U2&Edj@Zu6Q5\V.0<3UrVa%6R5SmGh:r@);
%eiu6lK'$P>U2&F/bPDiFMgS0g=hXDqec*hhQG:/4g(],#2gt.YOLtUF->,[EMErf]fJ-@XfgfF1nnJtlL:k7VbHh_ib@=hL^#SJg
%LH[Xu/^CeI42]XndVZtV[UZPmjk77UlnCrl)N(lqhA*H'[pqA_``@An%?RBlD1>QWD%>?)*Jl5bp'b,-(MDbIV12R<]hXK_`S&#+
%HkbpZb;ej&qb?2*2Blnu]0&0?BA4i[QFZQFjk2PfSG?E5.aPQ.VhWdaQfZmYMR0F"7Wp3+[K3'fMsXiBD50)FEaA$uBA6^Yhj%j/
%.*hhb]#7#Vf'c@HFdeY0gCR4$Dd^%e"PYUgjBJ%$;k@i_9%=DPG8#F.l+XD\C6)<<p#Xjb:hcMn]Mj*aNT0<\G"#-KZSsp"(,pd1
%?Cl#JqJ4(')pa5E=.X9(3*VShZYt-_IMghI4PO=og>_JDr*l]hHUf12&uZhO09%)GH[NRXcdm_Zia6W*8%)KjD$-TY=Tl1UZ]23m
%_ZnpHf,@r;D<jAte!Y*a454^D\*is+]=#EiaH5l9[W.qLh9+O_G@t],XR(PJqq]qp1[UmVKA<$"BOn0uZhI]6Zc\M>ePY)3451U-
%fhb1UbG6k^Y5-o;Hc>Y9gmnnGphpZ]=@]%Kh:]fS3pe0=Q6Bc<>_Sa.H=g$fQ/7i:U;*ZE2a+/5i"b;,U2Yme(t[;qr_^YE"i_$W
%1&gJP%W,4)gH+<_f+m=\c5!oRql_Kh\)(e;OG\%uNq`A;=#$l(+SqRbEQ`Do%U(S><snu)J4dTQ-5GQfh-md6`V9Xr*O'#N0K2[B
%Wu,4$Hi:"&EFWSY?W<!=4cA6B(#tb<dG)F:(q7^04_VgErNc`Y;_`0=>LoJu`Xbn4A><VhG$WP".`QTkn:+ClrbEFY<AEpGX*oIt
%0s73)ZTBQG<&&:fcMCmJN18Af*PPuf\m`bLS`flNN(]9`bp=<Y;DEWV)QW6?j"!a1?(/2t`Al-c1,jIg=>>j2jUf/Kk)/\7lX'=d
%(cR@Y*55n[5W!(N0lAstE5tTXGHVj-fQUVM;),e.B%NYTN*G/ZGL24eWVYlY0F*/2<fHKqf$-r)j7;HfQ9ZJ1M32[-5MoYmo"0d!
%dsH?M?890F`bZ\RBucFRVZY$uj1jl!A&UFM:,h$XFm+^&1m^Qt%l[RKY=k7tWYfqrM*r>\@U,'M%gQ"U<YaZlS.2lQ`OKK4jId7J
%LH9_/U1.A.b>pQP*4B<]T54Ba(#rMB7Li<NY4n+YVIJ=Y-6KU(>cE$5W89I4N:1i)iVITLW>N,5M>sG^>^o5]hc,QhiVhY8N&t8k
%-Uf)h@N=JWmr68ESe^944!T5O0eVpRfFBG"="t1%Zb5;sE#%CGmm#LWaEppGDp5RQ=N.fKo>c;Y0lD=:fVXPr`6!u>:Y$9@Mc3k"
%0%GgY9m*sL)m7HQ3HTDRg<S[R]BX@C2LOmei<*/:Djnl.Wl*B@E1:q%X#aK;[aj4+IF.7u[5M:#c/^OX_c>XE>F5q.*NfHV=]p6)
%l>UTOrSLV1q_qU-+/h5*/^m`q3W"a"E4%T/dP$)K*KGH3C;XKQs/\7d[FI-SbC`lOS*l+T]K1GbLAA1@nF`0s?WDk'kbc!Ee_rUA
%MsXLbDLHlr+fiN2g@1YSH?Z:t=/TiH2</Z+iVJN$^Sq]%alr_Vl>W58(;Hp\2g@oLWt%AK:hT;Ge_qu5PS:"pU,lPkS+(XPiAU8I
%%T"1KN@4a3FgqokIoIG+SYLGNlL<%[]SEKs=)5]4B&!<j3ntEZ#HnV=CW!Vn%f`7agsf4_G]gNrlVTO[?WDkcS?$Vel>STual3*.
%l>Z@**4e19XUSX4Yle'_>M(V7Xq!C(Ys52t[p58P<em``i<NVS%9IcB\Lt=j_mau?LSt\a(L(hL+0mq4XUVab#16c-iL?l-%ojXQ
%U/H&Yp;*fID4IYGDd)pI))opo_QG7WT_KA8^t7Y??j/9;K%U=A41Q>H][&cbQNnrOf1WZV2mJf)r1IH$PV^E(I%K*N9'GfSV49T*
%)7F\]_jL<t(u+;@h@4[KU(%o#KqL=h6CrnI:q'_L\.4ZFlc)9^Do\'h9],SLKr1OFc%_j.Z-cR5pKi%rR,(`QDW.L/Cjo;Yh9+0\
%\$kp+3UNu6]VYDR?I7)nDG+lKp>qA0==_RY^otu!NkYi\?CBXO@$tZ:/a*J2l/g&gIbD@P3sQcbGtEfop,S:V6Y65odoo$'<I(^k
%$<-Z;ISm.a6gC&p_n,r#p,&QGJJL-P+OH5Fn-]BYgsOuEUF0U-R:o-TN7%-/i]CdUq_g&F%3i,lQ`V*@pb[8DCfpXa8ib"ViIm]X
%h>.@>)Ar?12]<B)cHOtFW'93(%*"/t)]/M,M-C`+G"4"`C26G+S^c2aAZE5uUfJFZZBnUj:"dF^24CFVU#Pb$Y'I:20!1a/pu_L]
%N%UeB?@C&PDO.b7%!GZ4a>0#S:Rj=Q$bP];ZoQ:=l\X)`N,@Gt]K'^i/*RP+fc+Gsg=YiH[TfchSMk4>m+hA=qK6\bZH%`O1:c(_
%00C,tVqSAuZdm,eV<diT-?XM&p:A@HdpnZIJ4a=b@p<utAq@th:>9e.]N56FX]49HE@pj4jP'BZ#=Ta@2<Ai#%e!_HPIG`0jrAP:
%Z0a#I9+mS0@7L0:G*';^>;I&OlVn=mC41jH\h,c$gKj]Fl!E%mOa9EN7ND?ILp$V;m;Q4H&K_s]2q3"KFNWlmh)Ur0.G3:m7M)_Z
%bg!SmVFSfbO+rX(FW@Q$4dm/&geY&1?r4,1^!hQ!eu##n=aR&]fVg7uFcD9mcJn8r2(J?!SBc)0gO@J9>C0?PG"T#h;4FSF-Y)F$
%:i5J8P6r:#^YIME9smE"gGa2^A0@8r=mn;l9jJm[:8-H:/!F&tFNc\>2PALN?c3qCF6S%#p:Ua`:f2UJs!;<DSb/C-mSN0EY(6hY
%qiO$+LUeN&*ZGE?#lJ#K#-(kaFO6TWF0;==p&3ZL_u5iK\]F3D8_]@RX(AERB,2]!Go>cCk+,WWNU9Q3qYIOl2O-D5.4sqejjrs]
%D<kY8:%</OZKX@p%u40.W9S[&djcrreiU8i@CBM!]q8IdOi]j/#?&aIj%@C!0&0LiHa'30mF0^+e?\b<omm4FA_h2Mn&nF?\LHsG
%QEB;4o^6m(cfWAMfh6p_n+r7V)g@llX'\)uhD`Ubqj$#f['05UFqQa`?JCKJg@E20=Tu59+e-cOa&VGOA\5)0g"%A%iI)X[m&%h/
%jFREUW#ruB^<^YAi\mQ\:YVXnDXEjR\g&"B.&(R!S%uH@gsqfB)_0KW*B1VcXJe3NZ#+Lr_#@b2J<74A?Yl:E?uc^r#2Zh1h>(fP
%^htm>jf'/sDLL82dWY37f6JH<YjY%C>J3TsBf1rkCtqp*obLc^QE7>bUlMGKg-"%FhWOGgj/pr(^g@4EIm%4LDqQ1U29n<rPI%a*
%c7XmG.R3iVHlbu2MY5q#\29RBV&SAtij/k*^8<GjLB67u/+4S:.P'N.1mdsEQ0(^!:0#7>6(K(C"^c,69_FROM);uJq6Vf&Pa<HX
%$n*!nX)I)@07Uu>IC+6E1X(RhkorL7+)Ws[7:h.<OCQ1:>iY*3X^#09$1GeMlFb=b@I^ZP>`RYRot*"u!;oH]L](Y<_VgkCq,t#1
%o<m*X_d=Kg=#?Ku\1?+%S*82mdn;51N-+%oiA"FAMU#lq+8K;_^@*i5gC!oKg#u^3J*t"`rojOFMf<%DNLS@?Eg2$Cp+kK]_tDK;
%rOBf4KYDUn>\?0s@;h`\oj=l)I*9j"QcSg,Q\:VV"_4OW_c&6GNtsA:)RoIdT`71@U]s'XrcHeV,m:Zp&jj?3,kA>>7MJ'"??%$9
%\=0&&dqskU*c8[A#jUK_c^tDZKAuI>\NHKQY!8TJplm;#]puBZpk*@2/6i@Kip\P\WX^O<L'&7Oe#Iu8Q'F`rYj7?TR*X.d$Y<t$
%I>Y+gDCLt<O7EArbo]l_T\Xb1ABRCt*+LN$Q54@8%%fR$Y3dY6oX6lqg<';7j77:9L'0FM)(\QQ?"`meR<pA0,0cGnWB`Xiq8<(_
%in#gdq,[<%UHVj\DTCo8YE1_nSY?b^7##W83b)dM#u$cNBN``>FY"cj;3*'0l0mo<E9=<XN-,&(ehMlr-#jO*k*0oN#D)o#V,P(I
%a,Rln>%;tFNT+D]khC(+L"kib?UpW;OQYKZ6H<DOc;Q>:Eh<06=nHRYl)u19UQ[@6d=[B6^kB>Fo?(RZH1l;'&nJ!4-Ld;t\DTK]
%%7&fZ2cmS250/3gqqm*cfC076s,MAt0a%?:J';0))<.q]c4*u$&q?C#3cfIbT.d:(),JFs5f1E0ph3]XR%&j1K.D7r1uJ-.8J'DI
%:PXe!c_c6G;%Ob<IED.$oeb8JT$MHUMpGSp1Xb?[1PefTD)sO_^V)T)<6mq`OMH--mhGTK7q'8p@Wap3(sf'nV[+A;YAB3iT#cX9
%mJG#&cb!I^X8g03q`M]TZD4Y"\V^+eP%/@fl()>-:\QQ&mtHiLMKaT-i3W@/_`]]_*R>A%Wq7<qs,M's[tg@#)%;!@n<AuC)Y\H)
%Y!7@+-\j_M;rFCrPlL;`$9!Ap5Iu7%gXAK>WHD-FFu8^l@*nd4,4(eh0FdI<Pe.jih(dC)lBq]9mq*flM2uQgW>H%?M'JQP(VC(.
%L&9/m!tRQg]DNr^*u/u.,X6M@=pj-'eJ8$VJ$kY*GPX(a.c+7WIal?Y%DV*<GBNS_"JHncas:roogijj'lpW[J"/Q28l)o0AXsY$
%/80#PGdpZ6-^%2hSK\&V9q__2k(`>!9)7m8"\Wmu;oX/HK/jTXL^q'iPHtq*piZ.[k7W+IVd&HUBSUf=8-;$",ODle0>Ip\aD<ot
%eP%`DS\'956UrZ:ajSW<d,>mOk/-<efiFUCNJTL=R.E<-c1$6A?PmV&'mS#?lE)>7Yd4>kiB5DC_i@NDp*$#U,^_o>UO+D698![R
%/Q)V3d;hmucuktIKJVnV;ASd?m'4E!cnuM$4Jb"1]5hlm(47>.)D]IOTZr[:EZUSl.`u@%e&O2a$biDh:@(/`>X9#qi%sNS46IDY
%^J;JJKBN*EM@>:+_AbK7TV'AN$,d'[+@P`4T5Ln4TU&<3067+r+"6,\Hn2j`q%8\gHUj^hW_LG/+%U?6!I8t5D#K&'Za[Kn%9#L_
%?(q5>82H%&X#L`#01mJ_MhuYL+1]a.4U.Y[if+5ADVZ.!==12C9t`;N'9H\?a8OHj1MO<^,_!j[3>)&*1[bctn+$@,'3tJ[C;aMe
%@G[n(`kElXS^#l)ABEDj3#rA6gf*5Q7ZP/)$1fTVk-+OYbEMQ)HD:IbpRfk],k2GGgjY#ep6ej``g8Vs0+s+<+'4dOWA=&[$2h"P
%=/4(6k*_#VKL^qK1_CYIKM&%dn%O8=P8:1b."2e!#EMQhIXU'@\@XDagg$Z%&mkaUUro84[V'P!9'8;"@T.LcXuDkOG8_@PA&bct
%)k$=4]A-EP]7tXB'6mD;jj%'p.(.i3N7Sa5]YapDYh).V>GqBol"QCJMU=0u8>VJ9e+Z`AU#B2;b0rco5s&$?Kj*V&QT#Afo6_]0
%_@1oQraHeV]0;eo7R"+1*ZfaV-l$B00?%#,3U;+p>olM$c?M;;*Q`kdoD(XJ!UkW>"\&qmT]2%*le?c;o6%*9M'Tf^DpV.FCpBc(
%X'>Lm_^3_._AfR%/,o#GdqH6`;Y/E@qW,\BS"H7KC!caj@t`MjfH,5q=Fhd?\FUW6=)[\?3UM/+]q?klc.PKU$XHYKb?eN!>cY(g
%RiG,S3X_,LR([\#hD(#%YBM,Pf,t\h?GT^@R-Y@\mT$Oq<o7ILJol#@0Qs5*PRL(9Q!8:T6LU$ukq;ee>Q3b>q,X&4q$4?+A:5]-
%#%fYs@!NsK83N:eQhf&-j""'$SSb_dTJ\Nd&S-FIURoYr8RYn(2FU:Q]<@9"!Y`XtRG)AQ,4R%X/0NSD^=+!KJ`$");T?X('7#'[
%YI,<#ZTm,SR[J3bVlP1^qDj^5?@U#V6YiL,"!4VkG\VWA)*fI(:?D<j[^+"FmgrX&Dci[T`eJCijo+:K?>9-<[bl%C!jhHB0_++!
%'%H4$mgJ$*IgDQEqa<@DrZH8A%Ek:Q!`?W4NR_s"6MC@HA?/@a(CcW2?1JQJc@+_<hBdi1\1>[?#X9TPaP#h"2G?4f%J?.D`GEXq
%fs/>Q`nb-J>g8f8q>826Ou7;pW2lu>;m%3O7pq.>Vgp/XVjr!,pLAU*IFc^kX2giK+N^/U!\XVBKlOP<9F>P\C@60cq!!42el!Tk
%pr\#ib@mn_#W8gmKjk%)3?YFlV."@/J4I/c/#Z5*'mO(5W=b`]YtV<R]3)E9C8^^ApN6`!At;VJ]^)hbB4At>R-C$U_B(AfC7Qok
%1)\<aJIc0=>=s`c.+.1'?c?rNE6EsM:!i_2B<GM-riidMq4+3Tmp6!m>"hrR+?l<+meX(dkDJLQ5u9CZb^NmUG1^6.;F*p5Poc#I
%f+2!Dh;mZ7acIGoeDatROM/32N?H\;K[p4i+&ih6:LU3<;IGeDNu-Y!eRJsrh^;`9H;RjN#gH4c.9RW]@^#>Tp2M#c7BiirKPW[E
%bQ[<n&!ipi;mKF@i*?EH0(*`Lce[S@4KX7d)aC/nP0be1h8nT(mG-*u980@Lr4QmNh^Qt]lk=A1U)2L<!3K'`k&:N[Wn+f$RjS62
%IlD#WmW>>icVWe(QoQBFJsN(K#6)*2^iR5W_Y.Ui\`(15M9SE:+*7qA'h5b[H;rq;8d5W=oY/%AR4j9L?ncdKH]2H);&=[5N(fNA
%g(hjDf;h/<79q7H:kl@3H1?=UJ;1hV;)k`QGXb8^<Mrd'3Uh@/6TS[..OM-0A>$0J14/*:NAELqSr#8++*^(n(C'K;EDlmgX586a
%4WN!$E]MT4lonoPU#FHF$>k:AAH)N^Mrd7)FP6r`h/"Eh(gI/"<!!JdHB](L5JQ_#Al<97a@5(3oC8JU[Jl%uX3,FLf_qb=7qZh$
%5bStjpdIVq'qWt>M`,IG"MaR`*7>K8JUGlH.8DqJ\N:pBE%F\ld:rDLEMEnVaAN`u=GMOj)1(C:V0$D4WMP_)rm;Mq?Xf\INg"=P
%[*tu.Gg'!u312-9F(B`cN"Q#G1Iq(YZR`XY<E=So>(;N2LW]m*jT$M?]`:M`j2cVNl3DXW@#bLhB?oZqd*!O>XHFs1k1FsYC[?"W
%Bti1c'QgGEp`!hsZ+<s_X0NN$RpOZa*jIYl/AHK\i8o,k'(<"FUj>W,(c_3.-Y*%Uf*;]HZ%UXV\?JAF[?i`56u_Iak<c=5If_eM
%\mR3S?';>MI%@BZ2of;JeeUq:(UsU"]K-7n?,#:Dhl]=KC#b=/]VEsf,gjDqrF*K)<'hIBCubW:/oLJ;I?JujjZDYiJ@77G_P!Ql
%p*ddslLP_H^;dT]K!!U96^VE4/VQ`VF3O.me:Te'&+*FJ,>u'A4/2']oKfO:B*$k=7ec/Fd\I!]8+):bmdpc^9P;`*1FI7_D>+b;
%j13Kkr(>a.3F(]+_:+41jb&Zs1Yt+?3u]tE(dhdp0:p0qF4JLaRs5:pR-FNN&6uf7_Hc_SND9Y"XrCtF/Pf1OP#0ta"(j3@??t^>
%;(/7`h`7B+V-m$r/:N47)>/QsZ]LbB-[:-k6Y453dOd/JaY>P9SgiQaN=j\8(p&5T$b-gk;CSK&B3k'NP2:iSWW'3sAbEJN7B(Z^
%^d"@rhWY9%oiYsQT"IH9PM&p7Fd5ZqK?ksS=@_OY<[[lgJSS;r@.<GD7:c7&3#7he3G(6s(\pgq!:..%qd^W>bCnj[EHA;H5<E9u
%%i"=+RUC$rP?["Z+'M:MB[=*j:NjkQhhmJ"IsQO_eAes"+kO9HTsH<-&E^gG\XmsUM]],eI7-l1h!fpgK9pQV%fZ3&(I8_R@;)8l
%o.j3^0@^&ff`Y84]Fgr`99:,Go_cf`;!T68/O>Opls50qU'c4>ekUsrc?ge%c9D0a]cD\S<0s,jE1Q?Ds/mu%:eXhP!1'I^"A.+?
%K(l;<W#O6;p*'^06]Vo2qa"5,J"9?^WD1k&2)/jobFA!RDLQ4O@^o,sc!K7pC:Wi8)q:LW#5&__iAcc/CdTSE((j^h<_/R=C-&:D
%m@9UfQ,?-]GGa`5d]XEWS_feY<L.->L6cM,5qaX3V&.!!=$5fmf:E0K/!'r^'FutP![t<^\^LI62o"/O'#oP>,d:^accP*WTI`?3
%hJEH'AZ+tse=IeVW3li.\)q:R[&5mHGi,qpdYT33J%[DcTR@e#2.nqnOB."J8IS`d9>.(X_7aG(;PUj>Pp%kD!a"CF2nF+PRa6QH
%4uVnUC4%8.IXVmp)$]J-/$%2R-<d;4CFXX,^7$oV)-Ka*ahM=L$T`e'@/Y+jKq_Kn0UH($$69.Dfj173>giI\+3nJ1H4%XEo"UL>
%HB"H&b6"Qs>/;\Z")k#9St7l`9:qa2N2_$-DKV<MrN[r\XkhZ1d4ZgTMqO@(S6h<nlq3o.5qUcT-rcd!\5OhkXmJ$mrqJ%V7E;U`
%XLf5($9(THSN^P$:EI9]U2TttE$5nd5nd1,$JAMCVZ5m`jge@<+n%WN\"P-.=$aJ5H;&nXfAK^i,:$#/chp-gr18"+WJHWqq6%7P
%f3B>cf3n2["1oa0^6H.a&#jFg8264So=(Cha<l*+_g3=&7i.)M0NL(7@aPMELPs-HoD+Yb]NG5_'m+Tim9mDY+(,qIQS=bYh;Wih
%g>OWgXAen-?=oVjO0?H%QX7-cPKNbf-AU(,#SZUfn$51V_.495`'H_NE^g7_N+3!+Z0Ja8f&D)IA.iR9A'Y0IIS\jd9h2sQBWL]@
%'ld`:NsZWI-<oR<qtX*7AV\Lq#N)[KX`erkA%kQKiI!Q(4-"&>Ii5(q#2RYsUoVVT6JK<H-EoSf_?!-5*SfUXXm!okH&-N.G1od`
%Au%B"f]o1g?We1;k0r,]k2?jPh4YZV_dq)j+GCb"JmP1dIb8Z51.l]kK+#TZM6_1=Nt8F`^b;&1f3C46r!#J=Pnm990hab+JD-_2
%2+'aRcT#9P&%P=+`JL?QoS)d5aF1dEQDn2#KVI&&+i8C2V1QpQ]1ntI9`i:Ajb/U#4*p/8A4f="0T?E/RnTKjF!(frm\Sb)LN_)n
%mI[S?R#rbb6X:Flm:RCgn,&4@]!fMYjH+nilFHO&PV'tW#EYUF8Vp%9A(Po_Fh=TWJbX1"?.;Vrq7#P\Qb:ui3gh@iYKnFI2P/\(
%([5"q$D,qA)dbITA[5qF2XHAJV"Bd'<F,sUoD>>hiSn1U@?W/WdACse8$f!cde,(b9CcP_I)k,IE,<M\PtB)gqTrKQJAoo>0Tf)Z
%gh4*@P>k/:<%>GW19X86&As4\/n1ql%42k,@1(!Lo*P,X>fF28ees6&hKh'Z\-La0N3sOP>NMok_ttE8CBI9V?S,nB-Y)*L*]<+q
%D:9Lq@oL'/k<:CK,&^_9G21&F*h3b)FJJ5c=>ogn!8FRERZ[gOFY<<HifOV4W3q/=+bH#,#\ZGucdoVE"D+dD5UJE>ZZB\^^k\'d
%:_['FT:%taH`5/+6)hVJZQKD,o#=ArPM6MC_^rI7)k\]8l]tqq>h!#5dV6>/ou,(=D`?)m/bXb<?NcO/,usZ8#o\)?e-I/WgWS7h
%U67Po-;HPo3p8NjYBZ(]&+9a7HDA=Aj<Y4;qO[.D$VnOIFOP77(r>lcT>C@*pMH-"?YA00?gm+QQ\(#JMe$k+)53\eDFCXA".=jr
%@U&=[1)/mp71[\*@_XFE`B$Q4-C^oQ%.Em=6ck',*jGZr+:D_L>gJg$(;/*WM01HL<$j+h_A@9rG\B6_")l_t"q#ZXBhMet]U\?H
%HH]g:$5T_(mNN8M4iUtPO@AhGp4dCMYC$Hjc`fBa`ddgViM3oLE#D*M_9Q`?qH.piVl/&qUl=SL+Y_*'Ke/4@8Y1@@ce-n`L&E*D
%2DSca;r3f20$KghMU5-A]]]-o:jK,_:YNT%JZ^7[2f)X"c8<EZBUZ'5HhO_l8pCBR,>)NG1\-n`HG+RdNn<k$9#AeQ8MOo-VpelS
%Q!9V6iXOL>>3QX\.;bMuW7(0AKSCj/#$/L'M\-mVVC?hik*7;9Afg4DZtGSR<N?2oAHOd:J,dZFh%01A<$[%X*5+tPZTi8)9j13L
%#^g*u[u#/uYt1JHHopsOVYpYl:6:I/(Ml6DUla"gnkQnL%52Cnd_A>.h<?sSa(%1HG'-T=j>km&lTgb8:d(G&6(^qJW91#uVqr2l
%Qp9V:berl2*18fE)Vmq=%qk<n8X'<QV;/"\=OT]!5]B=Bfc;AWiSY_oVEL8g(WqJ&W^Tr%kKUA5eu)4%*o9%#U)`,9NfM8F;-bc\
%<WOdDk22!F"&^FlPYcJENdCV+Y']PR.a(tt+WE"#G-\#7s5aP+7'Z9[a"+H7RO,A&JB5,D5&c-$/NjU)h=ri/14n#L6c8hm5^dTY
%1^482?NJ:UUb*#HQc$EHYjQRFA[4q.<M9ku/d^pEY"[*QE<dFe-=8Bi3D`i.-@!-qY^].pn8g`VM'DEq0\Qr8P9j;#5FfhuJ^V!P
%f+MfcCY8nn9;U2l&6*gBefM*<CQ]WKB63VVbgYi3hToD;:Hg82G9Hrmd`o&(LZuQH8NGd*T.#Gbr_B,HEiH74kKWE.b-a^*#mM73
%6csd@jl.@1lal!_`6XpO;$5o`f?f.3q)_3YQG/!L=/^a&H?t3)Ga-XbIGt)pH:&_7)Z;6IcRTNekX*1a%*IZjT^LK3K3qpp"phl:
%I.&#P5Q?@+Bh0$^6>%sMK=WimWSQJPG9iP>q:<UQ"PHJh8t?.`S`;f>#-HThYY:%g<PlV4k!bfK/t:RqFS#ht1a\H"#iX!O%[;qC
%\0kD>@)%@8]dAop7`3q$HSS\N8Hf4L!VkoZInI$6:I@3_$CPX<T#%n,.2`^GZ(#O$#KJ5qCFJ7)\*&WE<t?g!W0G7)?IJ`@[jKL\
%"BS1a(;ILIG>ghOAs`10R#Qm];N_k8']rlGRl^;bGuNn#'++VUZsi``</.>E?'#H":lU4u]es19pPh35gqVjR)b+IXdLUr]rAI(C
%bACsmADOI8YZGQ?C:*8"N.fJlWd!VFZCRUt;9jSb0OXJgE^>f>FGg$o/q?KaVEr=gL=mZ$GRomVjrn1UjBmNZ6Ym#Pe$[Qb+6!-5
%]%jXX<%)ZaT:"As\R[k^'M5j\6D6NpBsoKR\6CUKG`n5k:1K-pC8rZgU^8\^A=,iS"Wm$biS7;06D+`._tY3kHk$$hbBY."D'c7>
%*a4p.=rqnRL&L-@KN]@g/Ih4E#'09#RB@bB[Qb=cLoVE&+Gj$E%A&aBgh<km-38NeFd45P_M9edakQc7;KPran!sOK,G=HN-QH-4
%@6#+8YJ2oU^%nb*GHGXpn5$=I!f+a9LFa6[FA[JTEJ&dcJJ6Pme`odFm?kAeL]Rm(hX!?dh83I]:E3I&&#+J,aWl`T%d1@YYC&a>
%RsBeT@#jOkQn-2l]<+&a]ZG.nML>,?>d6hA\?$ZOh5p?n>a:8(^NEed5DUkeh`7jP%58fPmC6UZd>lbL3j.,?EL8+b*mScEDC_Hd
%5BU3c>c;8q:E<N@@)ET;,;TcnF.;WI!Rk"tO:Fgar7KcNYkH.mREo#(Ad25Q,e,LGY_`t'5*'6RAiF!Mo3$&r>\J@bc@DJ`;40k&
%LSq"o"u^mr8'jY$4"p"@p"[AVN3%qc()^^+rVB"1hBos)k6o:iPf'Aq&\V9#IFR<mT0n4t!c!S715;f2OGN\Rf<)3%Ci&.IPI-\9
%!adLH+3Z-uYd&j9q!?@J?6oBl1E*g)Qg0K>Suf4cM4E$qr)ki9:T7Yo.nHo>^\/XCA9.]]O9#FlUL9205Fi3[r-l1CkE-FBn&A:f
%O4qE6nlH/ub]dFm).2SqE^D'JQ+BV]Zq54AIBI/6mAkg\4.eL[K/guf?AZak]tc^dT*_aBiok!gV_H8VG2c$e?pX'&eP5(^@IRXi
%4iZD)8&E=,"ZdMP,/7>"`5!!j*g<-U%#)tm6BnQu].uVn)&b]94D<e$L-_9EjcXX5"2neNZQmi\Wg+:l[*cK7pc(j_a%Hqt'g7Ob
%:Y`QMSON$TeAm1t]/h$2W^EG?Kk;?1KK+h7_3>3@.nj)$%'"@)mIU([UnD]a!#_jfNBMN+>nV373R=lE015BFmhs8<cZtm8'3t&J
%%1`&4N]bXqcm?76!QoUIQbj3rp@J5,RjuEN\mB?'b^Mdl6Z4X9C[qSLL#!/3qn:.(r!B$;Y1EIN8#oMG#3Q"d7d,kALWtXLeWF$K
%b602eU'R)WhCX@<@JZoL&T*3#VMZ++<uu^T.t4`X3PHV=COM?H72T.g/D'96iei([W.f1r07B"B'tN>Egb#>nU_eA5X%d5bS_8sC
%amrD`o-Y`<pUOqqrg$cs;MAreY&Wi)7/[FcOh#_q1>_G?lFG\DjPGbA"YSiMD6P+IBCt12RBNMpRS8;3\;'I<(&4h,']R<E;f\.,
%+*XX9e9(VE,9YFklh50Wc&5B_hOSQI:+>IMa5eYuN!TQNTUJ:<<N[[+*?kf%]M3POl^JYk)erILF9A'u*(tDq"1iYRf':4Uqhf:s
%Z<))6)tp0dF\->-001[oD%F)chRc9_WnY1b[eKqETPko6p:HqBkIHhF]nS>&`B>[dl=&!Tq3BV,`I8X&<NCI_Q74,VG,TjSIK%I(
%$J[Z/?e%f/Kobd]S5%:i_67C)V<hH-;lJ/m&EJ7I+F*eRGHU\FCpS99lqC=p/Q_7kSCo0[WaY`m/:=FeQ/Q!sFf+B8$iJiVcOB40
%a8,pA#RD;*VBi(p3hHV":&FT/?2\q2Q=HqYN[jC;FFqZ]A`jpGU.]d@Dls'&,QG<8gkl<\C4%`Oc0B,QKscXZfk7]"!L"<H/r*(i
%?AZ`ni(]L2>JkNl;N3o,U,eQ9U/N:S=5!!iT3n`lR+]bS=9ipg9^L\%Zeq_p,o*d0(Coh6R[mdTn8YSKG?'&cV,dW:mIF7,rOp#]
%!VR@2@$\,g2Bg.ojJdio;*PgUJ"q_BrKoRWro-))eC?#n^OY^!^t=3$,(i+5.j)6H6rM7f<q>u^KfZAI_D9fI6R#%YpBK--j7Y_u
%>hBc\cH.nET%l,Z\*Rq62@\"6*ae(Ye*(&6P/=mO*QtaSi$4#E=ShU/fjYSfDbWVd^KYQg\$]d[9A..p<&"45Q+Z3b]E5a,:2@'4
%n*TR^M*GD:7S78qTi]LM=WJN']IJm.KnbYHo2qMP2N5;(Rt!M(GE9SPNF%0_I,Cboh;cZF,!p];M%[DsZDuUN?'GLAM2_!8##*\:
%oFT([qk^bjoY-NUAA1/YaqOX>O@1PNb,Xb9(u&Ps8&@sRq73<m$b=t@O`pTQ:5X=Zc`$nI,%Yr&EWmB/X=1J[fb[&u%pXSBJ!PH:
%(-fnP]u:H7n1<,-RChLP9&7;[HMTfs]0jKi9fC4Oc3."G?!O+@^jOcdSmB-a.ul#Y?gi.F#WZ/U\P3IB#[F'thZbr7.;CJnIH3YP
%4Kg_)ME`WA^dn)r<:_CeaN'`Pq8gWAQ$hZ0#<G'Q*)<O0S>EKON#^F`F@@O\)i=$bY=Y<?E[gMg0I;3BF]6pa"fKKX5n7dWjkq=1
%FV31"hj0k4Ek@hN?PF*16I$@<W+P]AP9<=17MS*#;C)`,X?fmSl32n92d^uMX8+`_,)3%^<UpYd$S"GdfB-?diDV(h\,dNqn;:r(
%6ak/iNr$9RB@^1t8HO-'Np'P,0pT"\ljfes#;,Y)d9lh6rF*n*@:XAjYFT\-Mu@(r]>L*/Pd]ri+#EKH@ChFu)g7_3=.3s,`a3c_
%C78VsXbjtBK5G=KoU(']'']2A@:_pdC:]kP?Z#,Yeolj+V3TZ"8O8C(CD5a'gc!ifWmut_]8S*R*lMqrX]B$%<OrZFU+ok*C1#H"
%UI^XLe-V]:F1>cR=8+_+7#Fd]2666fg8>Ag5Bfn4^G3mTmn,Anb#$(T[WEbY/;_E]Z2oKXhmt*/0.WLl*B1lPr2iNPhqq9_].\ob
%Y-TlA9K-+u,4IQR@%V9Ob=raSrBGBRPRKLTPVu_2LU#AM>HDrdA:]flfh<0;/+NF1l42c&l@@<onQ?dQM1aXdW40CSg:gC(,/m0'
%EaoV@4H'QX\t0nemSF@"=;S+(q\(<6h`#g[hfEXHqN?+ZleUCZ747BaXPS,R-9JB:CDg8N&)Q2(2IPsi>\k@lOq9s,q6,XN7PZgB
%i%oFug2-kJ)GfWYCarShc;3<=M*"92SbN(jq@$/`6nqKWUtm`*]hX@+hF?/d9NtaX@Pht2nIf@UQMLR7]?[NJEa\hKIKrZ!+duFZ
%8S$SCBOJnA)@s^o3UGW$F.`E^=&O7CD3K];2k4s8T&#*]DQ+nH.]B@?_n:r@k*b1Ar&h;%ftREq4C8Q;f#MWQ6Bg>:9#'.crK8WE
%2)Q%bmZO/*0C_OdSWXF<q_./>3nWLhl!`@mhN-sD=AZ^k=?u*eh'2Y%?"C[Op-"UUfIA:ZZMN^\r2Ie6ITnJuLPd*ZH`A5=KY0S"
%Yd_uc4R)U3eJ=ONPbe&M)KNJG8N,X*q#8L)ABW[UIdB4j3b2,-eCsioK:fQLKBsl9\]*s\mPoLG8<f]`O\%.Pl8M;2pWKAAH/_%V
%IJhc.MmTPLi2aR5UraJ=C!erJ/-"_Dl?lY*^@dWGjFgJ++7WjWA%Bi:AubNi*WP8poWo]TSAY7D60W"s#'WML(tWlr(,f\#'kb6N
%:9i$3>%tG5[T>C^`CXfr4GS%[M;DQHBT_AlA-E2Tj"4hpa?Nt&$S&`snj^Fu3Ara><i't?7bVCtVME+Pfo>13Y4JbqMiL;Mc0nr?
%Hq/QG6LmF%YZf89N[cR/G(&6&?/]-C?_O^g0D9jl]B9Bj3ol9]4%VXp6o0,0\e'5Y.BAiW-i.A5S*EP$n_PGJ]_Xi3HbIZ^c/ctD
%rg$JjB)+,%ca#H'0&.r\UH`!9RX"2lK$bYm(L;8Y_<;DrM`+c*Q%IC*/f0LNC9JD3rc#D]I*M1r_<;DrMrkAXY8*#qE4KZ+fW,1N
%5?ohPn<S[R+"e?=cf3K,d2stW?0HT%_<;DrMoMoI[:&W^b=0m=]j<Dh_r[VT$2J>PkRX#<DTd`\CT6TCoupajCB^It>V<V7onJ(G
%+"e@(qW7C%d2stW?0H#T(u7L"3bQ"rh3E#YmqB#1B\4DAq231>?hs6\BTdZQpS2Vk:jql5p?fG<"d6VrlrfU`I'dE!oZTX_'7KM&
%Q0sSTD#YbnfVj"6=<=hOoBCplLU^4_if&#-s70e;-Ep(^]@VcjP4)blN$fp;\";UHPIl++fX#(CRpMsBZ\$P7B?fd:SsHQ-52AoW
%mDWGVI66g2.k6@XQ;#s=1.h@OXkf5n\%_RdNoSk`p0;B&pM+H+hmqVNA[t_4rkiJK\Rk62G1q(^g;3oY-g69%b8+B?&eD_^B#_9.
%<%$Ea2/5<u>P7_aE=?&HH)l*oQ3V%c/HmrOZfkXLUI*1+3=_pqNlTa%Q_1IZq(j<;ch'-b8J:Bpm4&$e*8QL5:`KA-]NhS?e-=KR
%$orG*:Qn!TYIqMp0\gTi&O6/@e!K%ag;"u%*>e%&d%<'pg%XGi`sYeEW"]tHUa5nWB_CVqH,"`VEIMn5*%6a[L<=R(Cg<Ug9]%du
%lcoHSS@WDs>rAf-Mo3N-nlg0R:6D2dgmg6[")KCrI[tlMh>U(PDrX>gPM(['8?Y7)X&8%ANH,Z$m'3TslR1>$c?SCNT<7gKju[M+
%.D3D;5ImArh#):u3F5r>QNs\4_8q;^<*]BMW]IbAO;)6=D7rQH]nU>.;Vj\F=o&609Cn>TqI*XRNc(,ZDg'#mg<'*d]AD'*oZm=*
%=F%!qM4T*s'N=hg?*i`q8@cL-OPdQI:Mm.Q[lHJ@fOrW$.lDg"P3_%IZ7+mcp?QB#'n0303)=Yomd!mOg"\Z&4u`B,aQ-ZF*)<,f
%gtu>Y9J"35qL3"Vo"/*h\m)MSqF['a-O.lBa%_9af%drg.<A:0;[7]+K"R<4?8FZ2F#"'\X7CfK00FpMHBqn(SoH(/n:DJqb0#.d
%e*-JP0-ju("qIBlU[dnHro+pC>5lJ-]\ikYhCR)/B!bQ3K0<:-Xdc+O-n[3kfD(=<S(3R)hn=X]Et,%P1ionY1L+e"IG[TMkt`)8
%#rf#0Eg91R0:o7=(hY!rl)hqZ3@6rQ&T)uk"eE/EZ)aI7dli]h<+I&3.JeH/7=Uf9<[N/TGOQ9K`]dl`4/<Q$FOh3(=I%'A78.#>
%hlbTE[QbOMC(#0X7W,^2a??;;F/?TFIY[Ze`?Q^Z)V.oA8kEQ=OCk$8+SG4XOE4pSpJZ.^]:Y9o7nYi<rS\6bES!W+cf&9+:u!<m
%:'!4ZJ)Q(I5YW=`mUp[Am.[@*h7Y=Q4m1)`A5V.;e[KZ[h(uORRP)l0M5^AkSC>^XV"cS.Q&O-e7p.)P#4HU#%qDrc5('W:&F[b"
%:T1t.;#88!r\8QP^MqW;]c+"1`Xff1kQeP#8A`L)md3HDW]t_f>p3RP<[(%%2r.^Ro6JX\_:\`bF_nYE3,_bs<gK)X#_XeKh0$H&
%q)%67M#m=,Wf(B=<Fb][S%Dh;>QHB220CZ=^G.`(nar3Tbb)#)oW,`I=ZZ"%IrG7`o7om!)m_@5fA%O".;JKS0-3SOLKahMj4Q8l
%%2\!to!=l2?CU9S_k"g-)rX]J)h!$GO/&TZ`9&4F86OfS.HkY*eJ#].q/E%iDK4\A%IE'uLfl7FJ2M8^#49Pk%u(@'7)U?Dk9Ce\
%(Ph9GG$\f$)I+hVeQZ*6o<j5;f;*`GQU@ig("KAj\2r'V2K<m4._UC@&Vi'pjm1U6]CZJ_ljr]%U;]h^W@(bX*O"?dD=+,@`89RU
%<k[[JaWq;"hO4uHir+,t>`G(fa@l!B6O<>Y4T7-F0$,'B]3Tm]IQ[=LhX63uTc6H>q)sbj+1bmZ;>q%qljqpV6J&ghYs3?JP"JMg
%FN"1*%Eg5q^<$ua6T5Ern_W5\rLk0BDV09A,PHn1R(;rDmteAWOS-WZYrGm%G,kB&FoZlf0tFhYGJXA3P<V!srokD<?6]:*94U@F
%b28R=Y<@>@b:[3W=e3iT!p;(h[JleR]1MsX[Yk*h/iXMRrUHQ3rt':M,4*9hrXY3rQLf$:]=uq@2a22od2-^efR2!s#`h+Z0AhB>
%c0Z%+hK%Mke*6V=QBC0RL=WWdoOVN\H).&sO&+!4iP('mn)VI"/\Kg$Ep]-S2Es]!c]0hbI5?i)csm#*G?`:7car)DM4+@B;CUI>
%8YJiXYf5=VDl.OG5I5,Bp_!dX45"k\0BaJ1'-l\4\pi0J43)g3Edm5=j&aJqV%FtDe>Eh,e6:`uN"^+k[l:Bn4er[e#/[/W?ap(l
%Dm%['1&#'L>;AEE;*qld,&4R.V0C#l=Iln@\-)KGe)`a_M=a="0Y,B)Xai8mdX+JYm?]><[oD/^e!f!KrsNV_+#!TOD$hrOV6Da@
%](5[nb&Xn6l%SuV$_uT@eq-*]4>YSeobu_TII&kGCB*TgcJ_j=ml#mCeb<EU^q)9Mf\^CH&V'Xrl$=8kF2dJFTQL-cR"+<f;GqH3
%Q$Y;@'@5:Z^YDq;R3_Zh=W:5Uh]Mmn.Z\b9&EA-C;9tL%hn45;*50#Zs/cq6XnP:)^Oc:^S*u<(kd8ZW)t)g7,@2ohhfJX:FoTeU
%N>V($pg85``9G1O`(Z()qmR83Su%kt\i8X,R:_La3OR=<hLFk9n]At]^>UE:Nm0JRD78QcUJ?"b4F?VGnW/aTXJq-PQ9.+`Fi>#/
%0e>J7DoBrObL]TV*8bmP[VS.eHKL6GI5@2PRt^l_C_)1W\o,Z+]:U,prpeu$f$3nU/H2MI:>?<UVaD7K6[o.ro"Z=@Ec+ekABTQ8
%f#"!2@NTl[r6l_m;pG4:JLj.jfU9k2q=US3BcPooUQacomP@qD2CZ7ZrmC)cJ0tiAFB,K0&(G^/r,e*[\hjV1L>LNc1`uOaPP8G0
%mONqTElg<\?g1LYjdV`;h;/_0\4XeokE"kmWf7Lro>fe+SkP1"C6@XG+/epN]d\+^g,iGEA&H#gmq5?YL[V7EPeY5'n?IHr(Tob.
%EQIX*G'9I<e$N[N\Ck9@*JbeU&&6S.9ai.sMS8r:p/h\tN>?+P^&=dl[GqB+*1s>n\B"+Zj9.FSSS]&WRlfYoL2<^><@$S-KU_s@
%H.jLpFL'YXV4@EE^FQW0f6>>Na3Ge:o'E^Sm2m^rmFbqa6XPmhNA&$ogq8i_rF)3"ofMTA43/_?3iuZY#Gk2(d-ns(+lo3dmGDuF
%<'Q8(:Aq,-.?gbj1;?aXP$jn$C\`#CHSVN.rN`=jkOOA+XaY6o['2W5j,f9L*O:]=h.TCR<_P7iV_87H4tEcBDpKJg;C69V-k`ji
%]Jji:F%Ij+q[qG!XsFSNm0_aN9C$@7Wgku@q6k*mAS9"UVB^qVm*F7P3-!YDJj/upS9sk?[l`.;k[-*m'^PS(L26MMf#5P\VK-2;
%#gU8IB1?fd:>02CID9Rr(V>`udUmN5E^[lZO'J>*/^Lb;!\O]c[3=$/3GlqhHQ4JU^h%&jdb("[GaS;u:J7a]-Ka7<747`e2sLnZ
%gh]q.f2%1amdTQ6rLe>FZ40C<:l6X[m?q^+210KJ$!RL9Bg,TkVEOYPd)fsF<pHKo^*bqV*UA(7^+i8ViO3PjUK[JbFUEU_fBp?.
%l#cTr>e!MC1<O5XClAg)b8]7^a8?KDLpf@1,Yc0)-:HmK7M3)Ff*.p*HS[JoLbM:[#@))jh;1iWbl4g"l$=r()Dg&SgF'J"C%,YM
%Wk$q)Uq[uBM.rY6;'*($E"7"k\LalVpQ(pfoHkGk@;WTR3H<E/jD4d7p1r!'DE?t<Qq:SRh>BE]5BCs-2;`bj10%Lpq"Po"rr.jk
%4^CTo<Rio(C5u#,#Q0A"n#:4iF8($VY^K=9"jp0&b3fomR(QFh$Q\<O:Q8&m29%Oq2\5<H)4`7\%K-3oI^<\1<.3U0(XkI2LM<ln
%XeI&R#Q<X/M"f+'?$uY.SYf+$V2+370X%c96WuD5+iDHBY^]N1cMVa1/s)=2_QJ9!i@A/UHS^W'PdCA=i*O/;90#)+YOt-0\uS'i
%K7U<erZmoB$=-g)/L]:ANE5*E?h-A53:b_reZ>!9>"!ZjNCri3_XB,nRs$9Ug(O0Rh7n.pgpY_'KL0A4_WB]BfBk-YF3bL)Ma-`_
%hn>Kk_>,:r_=^NV\[=*RHW/2Cp,AFn/8<h?g6J_lp%`%-p\Vo`'_E/AJ#?3c0>teMQ+V2qUednW^ZJ&"k]?jWXNh;VrNB_O;l-CI
%D:1W6:WX]kJb",hqnhJUJ"$nEHPXbl$.1[l>T4jn=ui--[O%7ASkUCH>Gm\NX,=Yc?a8pd"@-e;4!K\f^#PU^*&!6^)pJ\/<4b>8
%F3+bp?%f::+.mH@5]ft>SmPaS:]>(b(IZ[Kj3^*dYLH#"X.g\)!'J'idm=R0>SOk?Uu<='Q1#fm/fKce2qKGOrtL4hD(jI!k,+$R
%7J#jX4ZcR.+`b4?HCFi_M[[$=,4VVi(!H7<p>:S<-i3iurHhl?/.mR86bgjo&&/DH],2;"MgG\8nI2V&(;`V-4AW"ek^+Trq/Pr)
%&G]bVe"P!iHA2S8r=J`f@HkBU=:bZ@$Ua=Q]0T$.T'V9,O'&@9]:CY=h-@]]6ocfpq6KLBQ=Hp+.ToY8<".cbUkBi;!(3STOV_]J
%i_gJG&K4JS8IH[IPGM+O@?LOfMPDRB7$V9o#D@=J5n=_5.8#%[")\f>8SuEj@P!O&T/mGsrL&K%2ksKK/K-6J5`](T+>%+]Lu(s`
%V',>[L8?jdX5WT!7#"-:>k5:#=_!T`9"lCd9LL/&T[k;_Q]r9$I-Nd/R!!^R"@=hO*XG.!.b949LdRU<LB`[`+LPQSTp4tDIS!(I
%&Et\fe5GK\7^Q.mT$eqP#6kiMJ5ln5OiX%\j&)D.\ZJCqR>nG!*\]YsY9l+@dqj\h<_!J?:agsZNan>_+habjJ7dIBBKj5S#ng'I
%J^bUfV&6>J058,:=I6lQU=kWJ8OdBVIYa^8ZUd3]!k[HCn?Cn<.27M^4Q76c6usA?RSGPt%!9:@L]n>_H&?!9@iAu"Am"+_L:i%]
%8>n4cOGn2b,A*2qhBN6"mQuuE0F@kf=Qs7g4PMMq$VDHeKn^d]hM1Zte=h'CUD48$1ei%bKYqXp/58"Q+qhiP=S+jJ1b4pp5Z-m;
%=U>/Glm@N%4PDd_`Y[,L4d3pB`MGD<.+CP7d>2:FQ9e(V@c%j"$/2'Wnj9=$$!$>G4:sdP)+tSr0+e_hT6*d^miG&Yf^'^k<7dO>
%8PX'`<M.nEQm=5u;A6>-/5$m1/[5dTRop,q1HmbbGtJtu'8V1nUF?luY;`_fi5a9J7:Xq1"J]Ya>(U(F1bBc*6*Q@k10[ob>DoAt
%PJ6o.nPBo(#1:.lFP,$eCP0al>mHZ'HmO#.QnsgR+f7*b"&2[Qk:BLBX,r2N8N4k/&?;+eJn3;t`2&^_7Hqc8O3rhX%%;pE@cB+p
%#q^[!,Mg5(\sBupc/Ld7ZXYQk()A/OMCIe`J3oAQ:R3An?pmFqT4Lp<@eC453mB,EQ_UIa2]^,b)mbJS%s&SI(V;c)]g7gD(.9\4
%q$>_SQXWO<0pV/MEAC8%Og^.s?\#%f&kQ86E`8Q*N#2mm=o=8V.3b@)KO1-]Ca:Ja&Z9:r;FUi4OomsZOWk6Z@XZrh7IWn,d5jW)
%#a1hiL\$A<5atImXD7Bp*@:#/QGqLXb'3JLMAWl?L+J51Vki"\5\S@3[Zq1n9EIch*fD&b2r"QdAJh^]68PT4]b0DU\pH91,[lr+
%d69hA.Wc7kqiCFuMm*m/Zq<_Q6n>?%+8^iU?d`%!e"j1,Qj\L:>LB@6Q2[3X2'S#-&%b9Xj:id4lrMV*[/l+/LdKh)/Fq2Q+sDJn
%Z/u=\U++YU63iE>VZbXuRPoaNCmT^'HI5hA%5FuEU;BOD:f*K8+i5$b")'8rb?DVZL:'ECCO+$[+^+[gbWp^A]A1fV5A[CIpm$HF
%:F>`aO-/i?ME)r:Xd2=R*#YI2P6Qe.Q=0AJB&=k2WBBRVmN?[]*K3sd,0N'U&$W9)>-1P/?*[Lt;(<B)&?"hd'18fqEZ7g%YXt_%
%[$(QMBm6r16>EL8'FU=Xg+>"`BR\%h$JC_<YRhQuBa7/pV19Qk`*S>;fFflN<(TYWR.Z6'7!D6qSK[E#A5=LM6&5di/8,6P_B<RC
%Q"RT0QmWl=%n$b?":/b"OdHg`dmX)L\*oIPjC!,M!m`Z@H;WaZD!k/Q6&Bb??6#cWRY1g8E1Vr\.YQ.F>/u`4)</k?MNOWr`hnXq
%D<@AON4TapcB*dU!jefG5)H,qD&5PrVK5"QP(=XXR04pb@LD69=CSL4i+3&DbHq\_Y8pAOk7-9FWI(=17OX_G/&l7(3uAO26A'r2
%Uf_ks/@Z=g;932>4[C:0[dI'YH%auTo3R<ZA`^:0-TQrQ9Nn4L:h;A:o(9V;I+`OOC;s_*#D4>`)f:S:$c=I5@%5+YZr)^Vk)Qa[
%A*NPH#Ks&i&]MU$Lsj/c6]0RJXf>%Gg-IJXE\XP(Y'!Vm^=RrjLL;1-45^i"=P^f,Za+r@.,<u>0=$h]XH@2f)"$N2aYn>tl%e\_
%1u'/*Jlq?riK6MjUpHT)Q`NW-1t\6DD]iL?-:OP2l].@oh0OjiEQL:sNM^MIN,PnJiF&&eRLtl1Ut<:Fk$1o'pFf\W"ZolO<ff>u
%9j^au`7,0o=dH5*_2N#c(.jUs5%gYojAjiiGhQ(V5,#.3M92>Uk?atUM",#=rYj(hV"+u]-s6nSq`l#L-]rW_T&;TJMHPLAm,gjD
%lCjb$/4QpCG^a;L))WCN4pK,B%?.KR6c^JDo:onV^?$g(rj[c?m*86oSRCl'C#PKHTIBV'?l\%(m-H,6[F?-WFejXX&EXO+$aI(&
%SRPd.-`5fLCR59;[dVF.)qWYYcg3bDgRP'2rRfH2Q=<mn?S]W65`VKb6)'%R"F]$,;l^(.5<3W7/7(&#NhVeQ?6Il[pB&Y`3Wa<j
%=`g1#U$9)t[[Ekh0n*$alXqnqIur,LlIXi$abc4>GWM!J:*E*WIf:dZ@'OB2fY2Pi-,gj!8UGP6)K7*a]k.cbd`L\U3H(')d?rTd
%0W"B0)Ir$u-V/mIA+MYR<8?&fMIQlGmhs??e^i7SoCm+Kd]_*61Be;@,:`[u^qkfUjt+>d#&q6'k)`(-6jKi%9GX0Zah_<]WrOOR
%c/F[!e,)-*VgeX[,b/&++_b$',H\Xd(*7.MQ>_UF:a\T",hNcFZ39-5Ufc>Gh6`qV-RaDLhP%?'i>SWZ\'DXJ6`-#l_9$TC,!%%q
%:d>^L7Qej'7WrD=WP;+S,1bo')Nk1.T?m`R8Q6=$r"N1^QImSbJu!]IkmsSDACi/lj-"r78S=!,<X4"'9&9jIAo-gF=?Jq.0\n\Z
%Tcoo)7fb1Hf`8TG@c&/g/-qd-n;W?lOH?5qoJ[jO'3uZ4Z?=Mr":0$E=n>L#0g-#P!3u9R%M[/l*jK#Ad:D`)Z4[LbA:^(eB[?%i
%Q4hK^4J.u@`_@H,a?pMHGlV7b\9Wn_*0@J8n]]n/hmWEH-4UrU^et2HJtF!tk_Y-C6(<W$Ols8lrD`jYqj8/IUr5mE%*8:_Gn#_q
%*)/$rrR9VO65/-ZLYXaWd17-C#gflN6,HHO7;-HKqDg#3nqGm33-iaL%L%<GV_Zm$5D?M^'5^2L<nH6Ao:d(:N-5b:BNOg+UFJ0S
%dse7^*fVB$OJHlVabV;q5YDB5'TSSc*O)B`(f%Jh.31n?.4IqXb*Tt'AEQjRSS-i<OpDepXlPVCjfKrq.u`g.,#\>4O@V2l1M;@O
%Dn0/)pWS.jC`+_93"\cFC8!a*Z(FN1[P*3!1FY,VQG^#uR7YEnZpg3t8Ir1V/bYugaHNL13"U6iA9\0<?=[ad>,J[)P!s(0+Fjd1
%J-r_K,I!%B_(hX/0;0Be6:6D5P7dZ*R4kBg'ad55+>!?:QHX[c('Z?daYlC2A'Q"5Zni>!9q]UD1e8hEG^.?'o0chd//7o:-P+&[
%#H;4(Vnt&NA"Ko`KU<2B)'j"VLN.e>m#"pqE/]r8KV_$$aCQ!S4PSuDO=55-Wtl,@PDRj[]9-_@BA:;1A6Fg>2,jR`0+(@*o."8G
%/lP.b'.ZDufLA.CH[:V)>9kM8_/T"l!f7CQ"tYT@#k#b:\`/,U!9SXLhB!QFO]4d%r4F,rTfiE#0sW@WJFN4hT6aU1nHkS>_Z^('
%Pl["-B;:e+8Do0>0>][;9[po!i>t["4IH81K'&hBjZEWVLbQ+WG;Q1F%_j/B^\]aT_X(+>*.6]600Bb9>QDKN!&DJd9S&_HaLjka
%fH;.LLBGH!'L<'s(H#`&@(HXHfRQ@?C!-pXiR(VD5fOut2U2kC*pd3F!)<iKSrsd#-5t09C<5`$_h!Fh*ar\-5Q_?ToRqCZM%Q]%
%.CEe&!(P2;$',3M/T%n4fe3`20Rnp\"O/KB%V5/P]4+<hfGo62M%*!&'tcBA)IcCC&..7#rtBr94;=j;?rFoD^D:4PUq?lL6einT
%)Vgn-4VO4UES:^150S65irD/OP*GT)&hQZdCSmPbH,,5k@:KI-KIQ.K"JC@fn>1[..d1l+J1oJ=C&l1;ShT3_Et5hu,6STk=Ii/D
%+&NZ`a9oT*2P/@N`gU>jdZbC1KI/Au"_9)G:<oZZPN<ZP+(TA1'o44KO@&8D->/,j%1!`'(?2;;+C^fch9GGs@c:'AS2?=n4_'Oh
%Z<#m<b.+8q'4"#9.CA.=33U,p+gK$P'\GRbXFtT@=:rGB1!C5-"E:;i[=J*=<%BZm)Y3>BY5herg_mtYBF,?U,X97H,rd16R<F7<
%E^V8\d&"EUg\KT8I@9SV@%6B&GQf8>`Zc(t:V0]]]RYMY4S^Csk@Xc,kPHUei]Inlh2$f!E8!_lf*ut$)+FZ5BbR.rHiouY-jh0U
%71b\"XLV7<;)uJJDbn8K8I7.TV)dNLFD<C]qc$*Qd<F^XLk_bH,1R[B!0b-8qBK?6n5GI.,pNJK$j`JPZ$?$1>IJB<l9&AZ.F%6&
%^BG=6bV9!:=<;S)8/t87[,dXZH1hr3QgJLo`507ui<5g@k;U:fi^5E!:YZWR[\C_gVK.e!R4"lH'I1@,i@.Su-:OG=4O?LQC$;Qc
%oOh`VneA3jabM$-.Gq52LMaoF3(hfO%hVr7IkXiHKu;7[A9`feKK^U)Q<UEW$uC4D2$X80nY/!M'ZbnONhUsAhRlP-,,.WGE(9Vk
%:IPj@@cIc090a::Ifr*1]Mfn9''EJ5Ncp>2(0&r%,Y[8a,G3#02)8A`5l;5;k:'nr>qpCKA^?nNA.6BVrK%."Kls$c(`l\Yboob"
%j`$2?%7cgO4'lI"!1AFT&S-F^EV!PM=sRu"-Z)8I3Ji-U`2>B90P?c0J2Cm=A!Df?m!(Sa#GZpXkR\Y_2+g4N*4mK2P2(7;IF9/[
%8'"#)0gT'\YG"2Is$2t57ROoL<4fekB9$Pf+AV_3L&A]tOQKNg-E*)P'I#Qp_Z:[9]qd%RjErV)W+HS3g4AmuHA@gOKa2\-LQ2R+
%\5###$ck0d#X.6jnpA'sZd`4GZ]FYH<#d8]-,1c;RBo5Dq$TuNq,6/`l90YeQBBFp`G6oEM$:-0"_$/,.>6lo^a5/+Mo4&r&B\7P
%ggtK@r-!,2S@^t#rWiDi(PgQ_DsmWsINL$.J2nkLX:X.>IsZO:]tK`?BI2Q`T(cuH88ErQ+SdjXIN#"F(oGd,7^)V,Ia%i^m;rK7
%dS[382"0/k)<YH>%MlXe^7UoSfC)Kf/t;Tho7rOER`1KVl^PqYa6"uPV0IIHI%XN0`J:'EIflBGP/k2GC<P([rrUdUd*;~>
%AI9_PrivateDataEnd
